<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/05/hello-world/"/>
      <url>/2023/03/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>全局异常</title>
      <link href="/2023/03/03/quan-ju-yi-chang-lei/"/>
      <url>/2023/03/03/quan-ju-yi-chang-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="统一返回结果对象"><a href="#统一返回结果对象" class="headerlink" title="统一返回结果对象"></a>统一返回结果对象</h1><p>项目中我们会将响应封装成json返回，一般我们会将所有接口的数据格式统一， 使前端(iOS Android, Web)对数据的操作更一致、轻松。</p><p>一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。但是一般会包含状态码、返回消息、数据这几部分内容</p><p>例如，我们的系统要求返回的基本数据格式如下：</p><p><strong>列表：</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">{  "code": 200,  "message": "成功",  "data": [    {      "id": 2,      "name": "欧阳老师",      "intro": "高级讲师"    }  ],  "ok": true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分页：</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">{  "code": 200,  "message": "成功",  "data": {    "records": [      {        "id": 2,        "name": "欧阳老师",        "intro": "高级讲师"      },      {        "id": 4,        "name": "上官老师",        "intro": "高级讲师"      },      {        "id": 5,        "name": "东方老师",        "intro": "高级老师"      }    ],    "total": 10,    "size": 3,    "current": 1,    "orders": [],    "hitCount": false,    "searchCount": true,    "pages": 2  },  "ok": true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>没有返回数据：</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">{  "code": 200,  "message": "成功",  "data": null,  "ok": true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>失败：</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">{  "code": 201,  "message": "失败",  "data": null,  "ok": false}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-1、创建结果类"><a href="#6-1、创建结果类" class="headerlink" title="6.1、创建结果类"></a>6.1、创建结果类</h5><p>创建interfacle定义返回状态码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import lombok.Getter;/** * 统一返回结果状态信息类 * */@Getterpublic enum ResultCodeEnum {    SUCCESS(200,"成功"),    FAIL(201, "失败"),    SERVICE_ERROR(2012, "服务异常"),    DATA_ERROR(204, "数据异常"),    ILLEGAL_REQUEST(205, "非法请求"),    REPEAT_SUBMIT(206, "重复提交"),    LOGIN_AUTH(208, "未登陆"),    PERMISSION(209, "没有权限"),    PHONE_CODE_ERROR(211, "手机验证码错误"),    MTCLOUD_ERROR(210, "直播接口异常"),    COUPON_GET(220, "优惠券已经领取"),    COUPON_LIMIT_GET(221, "优惠券已发放完毕"),    FILE_UPLOAD_ERROR( 21004, "文件上传错误"),    FILE_DELETE_ERROR( 21005, "文件刪除错误"),    VOD_PALY_ERROR(209, "请购买后观看"),;    private Integer code;    private String message;    private ResultCodeEnum(Integer code, String message) {        this.code = code;        this.message = message;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建结果类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;/** * 全局统一返回结果类 * */@Data@ApiModel(value = "全局统一返回结果")public class Result&lt;T&gt; {    @ApiModelProperty(value = "返回码")    private Integer code;    @ApiModelProperty(value = "返回消息")    private String message;    @ApiModelProperty(value = "返回数据")    private T data;    public Result(){}    public static &lt;T&gt; Result&lt;T&gt; build(T body, Integer code, String message) {        Result&lt;T&gt; result = new Result&lt;T&gt;();        if (body != null) {            result.setData(body);        }        result.setCode(code);        result.setMessage(message);        return result;    }    public static&lt;T&gt; Result&lt;T&gt; ok(){        return Result.ok(null);    }    /**     * 操作成功     * @param data  baseCategory1List     * @param &lt;T&gt;     * @return     */    public static&lt;T&gt; Result&lt;T&gt; ok(T data){        return build(data,200,"成功");    }    public static&lt;T&gt; Result&lt;T&gt; fail(){        return Result.fail(null);    }    /**     * 操作失败     * @param data     * @param &lt;T&gt;     * @return     */    public static&lt;T&gt; Result&lt;T&gt; fail(T data){        return build(data, 201,"失败");    }    public Result&lt;T&gt; message(String msg){        this.setMessage(msg);        return this;    }    public Result&lt;T&gt; code(Integer code){        this.setCode(code);        return this;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="全局异常处理类"><a href="#全局异常处理类" class="headerlink" title="全局异常处理类"></a>全局异常处理类</h1><p>第一步：在异常处理类添加注解，使用aop @ControllerAdvice注解</p><ul><li><p>aop（面向切面编程）：不改变源代码情况下，增强功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ControllerAdvice //aoppublic class GlobalExceptionHandler {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>第二步：异常处理类编写具体针对异常处理方法，方法上面添加注解@ExceptionHandler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ControllerAdvice //aoppublic class GlobalExceptionHandler {    //全局异常处理    @ExceptionHandler(Exception.class)    @ResponseBody  //返回json数据    public Result error(Exception e){        e.printStackTrace();        return Result.fail(null).message("执行全局异常处理");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="特定异常处理"><a href="#特定异常处理" class="headerlink" title="特定异常处理"></a>特定异常处理</h1><p>步骤与全局异步骤一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class GlobalExceptionHandler {//特定异常处理ArithmeticException    @ExceptionHandler(ArithmeticException.class)    @ResponseBody  //返回json数据    public Result error(ArithmeticException e){        e.printStackTrace();        return Result.fail(null).message("执行特定异常处理ArithmeticException");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h1><p>第一步创建自定义异常类，继承RuntimeException<br>        第二步在自定义异常类创建属性<br>        第三步在全局异常处理类添加自定义异常处理的方法<br>        第四步手动抛出自定义异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@NoArgsConstructor@AllArgsConstructorpublic class GgktException extends RuntimeException{    private Integer code;    private String msg;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class GlobalExceptionHandler {    //自定义异常处理@ExceptionHandler(GgktException.class)    @ResponseBody    public Result error(GgktException e){        e.printStackTrace();        return Result.fail(null).message("执行自定义异常处理");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="业务中需要位置抛出"><a href="#业务中需要位置抛出" class="headerlink" title="业务中需要位置抛出"></a>业务中需要位置抛出</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">try {    int a = 10/0;}catch(Exception e) {    throw new GgktException(20001,"出现自定义异常");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220705171809261.png" alt="image-20220705171809261"></p><p><strong>跨域的本质</strong>:浏览器对ajax请求一种限制<br><strong>解决:</strong><br>        (1)  在后端接口controller添加注解@CrossOrigin</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RequestMapping("/admin/vod/user")@CrossOrigin //跨域注解public class UserLoginController {    //login    @PostMapping("/login")    public Result login(){        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        map.put("token","admin-token");        return Result.success(map).code(2000);    }    //info    @GetMapping("/info")    public Result info(){        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();        map.put("roles","[admin]");        map.put("name","admin");        map.put("introduction","I an a super administrator");        map.put("avatar","https://oss.aliyuncs.com/aliyun_id_photo_bucket/default_handsome.jpg");        return Result.success(map).code(2000);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)  使用httpclient</p><p>(3）通过gateway网关</p>]]></content>
      
      
      
        <tags>
            
            <tag> 全局异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/2023/03/03/springcloud/"/>
      <url>/2023/03/03/springcloud/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="问题（面试题）"><a href="#问题（面试题）" class="headerlink" title="问题（面试题）"></a>问题（面试题）</h2><p>1、什么是微服务?</p><p>2、微服务之间是如何独立通讯的</p><p>3、springCloud和Dubbo有哪些区别?</p><ul><li>Dubbo是基于==rpc==远程过程调用，而springCloud基于HTTP的==RESTful== 调用</li></ul><p>4、SpringBoot和SpringCloud，请你谈谈对他们的理解什么是服务熔断?什么是服务降级</p><p>5、微服务的优缺点分别是什么?说下你在项目开发中碰到的坑</p><p>6、你所知道的微服务技术栈有哪些? 请列类一二</p><p>7、eureka和zookeeper都可以提供服务注册与发现的功能，请说说两个的区别?</p><h2 id="第一季"><a href="#第一季" class="headerlink" title="第一季"></a>第一季</h2><h3 id="微服务的概念"><a href="#微服务的概念" class="headerlink" title="微服务的概念"></a>微服务的概念</h3><h4 id="什么是微服务？"><a href="#什么是微服务？" class="headerlink" title="什么是微服务？"></a>什么是微服务？</h4><p>但通常而言，微服务架构是一种架构模式或者说是一种架构风格，==它提倡将单一应用程序划分成一组小的服务==，每个服务运行在其独立的自己的==进程中==，服务之间互相协调、互相配合，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API)。每个服务都围绕着具依业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p><p>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合,每一个微服务提供单个业务功能的服务，一个服务做一件事，<br>从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p><h3 id="微服务与微服务架构"><a href="#微服务与微服务架构" class="headerlink" title="微服务与微服务架构"></a>微服务与微服务架构</h3><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用,狭意的看,可以看作Eclipse里面的一个个微服务工程或者Module</p><h4 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h4><p>强调的是一个个的个体，每个个体完成一个具体的任务或者功能</p><p>微服务架构是一种架构模式或者说是一种架构风格，==它提倡将单一应用程序划分成一组小的服务==，每个服务运行在其独立的自己的==进程中==，服务之间互相协调、互相配合，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API)。每个服务都围绕着具依业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。另外，==应当尽量避免统一的、集中式的服务管理机制==，对具体的一个服务而言，应根据业务上下文，选择合适的语言、王具对其进行构建。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018003333251.png" alt="image-20221018003333251"></p><h4 id="微服务的优缺点"><a href="#微服务的优缺点" class="headerlink" title="微服务的优缺点"></a>微服务的优缺点</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>每个服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求</li><li>开发简单、开发效率提高，一个服务可能就是专一的只干一件事。</li><li>微服务能够被小团队单独开发，这个小团队是2到5人的开发人员组成。</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的。</li><li>微服务能使用不同的语言开发。</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如Jenkins, Hudson, bamboo 。</li><li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值。</li><li>微服务允许你利用融合最新技术。</li><li>==微服务只是业务逻辑的代码，不会和HTML,CSS或其他界面组件混合。==</li><li>==每个微服务都有自己的存储能力，可以有自己的数据库。也可以有统一数据库。==</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大系统部署依赖</li><li>服务间通信成本</li><li>数据一致性</li><li>系统集成测试性能监控……</li></ul><h3 id="微服务技术栈有哪些？"><a href="#微服务技术栈有哪些？" class="headerlink" title="微服务技术栈有哪些？"></a>微服务技术栈有哪些？</h3><table><thead><tr><th>微服务条目</th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>Springboot、Spring、SpringMVC</td></tr><tr><td>服务配置与管理</td><td>Netflix公司的Archaius、阿里的Diamond等</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper等</td></tr><tr><td>服务调用</td><td>Rest、RPC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用(客户端调用服务的简化工具)</td><td>Feign等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由(API网关)</td><td>Zuul等</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Spectator等</td></tr></tbody></table><h3 id="为什么选择SpringCloud作为微服务架构？"><a href="#为什么选择SpringCloud作为微服务架构？" class="headerlink" title="为什么选择SpringCloud作为微服务架构？"></a>为什么选择SpringCloud作为微服务架构？</h3><h4 id="选型依据"><a href="#选型依据" class="headerlink" title="选型依据"></a>选型依据</h4><ul><li>整体解决方案和框架成熟</li><li>度社区热度</li><li>可维护性</li><li>学习曲线</li></ul><h4 id="当前各大IT公司用的微服务架构有哪些？"><a href="#当前各大IT公司用的微服务架构有哪些？" class="headerlink" title="当前各大IT公司用的微服务架构有哪些？"></a>当前各大IT公司用的微服务架构有哪些？</h4><ul><li>阿里Dubbo/HSF</li><li>京东JSF</li><li>新浪微博Motan</li><li>当当网DubboX(不建议使用)</li><li>…………………………</li></ul><h4 id="各微服务框架的对比"><a href="#各微服务框架的对比" class="headerlink" title="各微服务框架的对比"></a>各微服务框架的对比</h4><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221018104303660.png" alt="image-20221018104303660"></p><h3 id="SpringCloud入门概述"><a href="#SpringCloud入门概述" class="headerlink" title="SpringCloud入门概述"></a>SpringCloud入门概述</h3><h4 id="SpringCloud是什么？"><a href="#SpringCloud是什么？" class="headerlink" title="SpringCloud是什么？"></a>SpringCloud是什么？</h4><h5 id="官网说明"><a href="#官网说明" class="headerlink" title="官网说明"></a><strong>官网说明</strong></h5><p>SpringCloud，基于SpringBoot提供了—套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。</p><p>SpringCloud和用SpringBoct的开发便利性巧妙地简化了分布式系统基础设施的开发，SpringCloud为开发人员提供了快速构建分布式系统的一些工具，==包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等==，它们都可以用SpringBoot的开发风格做到─键启动和部署。</p><p>SpringBoot并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过SpringBoot风格进行再封装屏蔽掉了复杂的配置和实现原理，==最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018121742804.png" alt="image-20221018121742804"></p><p>SpringCloud=分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶</p><h5 id="x3D-x3D-SpringCloud和SpringBoot是什么关系？-x3D-x3D"><a href="#x3D-x3D-SpringCloud和SpringBoot是什么关系？-x3D-x3D" class="headerlink" title="==SpringCloud和SpringBoot是什么关系？=="></a>==<strong>SpringCloud和SpringBoot是什么关系？</strong>==</h5><ul><li><p>SpringBoot专注于快速方便的开发单个个体微服务。</p></li><li><p>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务</p></li><li><p>==SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖的关系.==</p></li><li><p>==SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。==</p></li></ul><h5 id="Dubbo是怎么到SpringCloud的-哪些优缺点让你去技术选型"><a href="#Dubbo是怎么到SpringCloud的-哪些优缺点让你去技术选型" class="headerlink" title="Dubbo是怎么到SpringCloud的? 哪些优缺点让你去技术选型"></a>Dubbo是怎么到SpringCloud的? 哪些优缺点让你去技术选型</h5><p>目前成熟的互联网架构（分布式+服务治理Dubbo)</p><p>地址：<a href="https://github.com/dubbo">https://github.com/dubbo</a>  Dubbo已经停更，弃用<br>                    <a href="https://github.com/spring-cloud">https://github.com/spring-cloud</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018123724595.png" alt="image-20221018123724595"></p><p>SpringCloud 与 Dubbo的对比</p><table><thead><tr><th></th><th>Dubbo</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>服务注册中心</td><td>Zookeeper</td><td>Spring Cloud Netflix Eureka</td></tr><tr><td>服务调用方式</td><td>RPC</td><td>REST API</td></tr><tr><td>REST API</td><td>Dubbo-monitor</td><td>Spring Boot Admin</td></tr><tr><td>断路器</td><td>不完善</td><td>spring Cloud Netflix Hystrix</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netflix Zuul</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloud Config</td></tr><tr><td>服务跟踪</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总线</td><td>无</td><td>spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>==最大区别: SpringCloud抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式==。</p><p>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约,不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更加合适。</p><p>==品牌机与组装机的区别==</p><p>很明显，Spring Cloud的功能比Dubbo更加强大，涵盖面更广，而且作为Spring的拳头项目，它也能够与Spring Framework,Spring Boot、Spring Data、Spring Batch等其他Spring项目完美融合，这些对于微服务而言是至关重要的。使用Dubbo构建的微服务架构就像组装电脑，各环节我们的选择自由度很高，但是最终结果很有可能因为一条内存质量不行就点不亮了，总是让人不怎么放心，但是如果你是一名高手，那这些都不是问题;而Spring Cloud就像品牌机，在Spring Source的整合下，做了大量的兼容性测试，保证了机器拥有更高的稳定性，但是如果要在使用非原装组件外的东西，就需要对其基础有足够的了解。</p><h4 id="SpringCloud去哪下？"><a href="#SpringCloud去哪下？" class="headerlink" title="SpringCloud去哪下？"></a>SpringCloud去哪下？</h4><p>官网地址：<a href="http://projects.spring.io/spring-cloud">http://projects.spring.io/spring-cloud</a></p><p>参考资料地址：</p><p><a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></p><p>本次开发API说明</p><p><a href="https://cloud.spring.io/spring-cloud-static/Dalston.SR1/">https://cloud.spring.io/spring-cloud-static/Dalston.SR1/</a></p><p><a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></p><p>springcloud中国社区</p><p><a href="http://springcloud.cn/">http://springcloud.cn/</a></p><p>springcloud中文网</p><p><a href="https://springcloud.cc/">https://springcloud.cc/</a></p><h4 id="SpringCloud国内使用情况"><a href="#SpringCloud国内使用情况" class="headerlink" title="SpringCloud国内使用情况"></a>SpringCloud国内使用情况</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018130824135.png" alt="image-20221018130824135"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018130925888.png" alt="image-20221018130925888"></p><h3 id="Rest微服务构建案例工程模块"><a href="#Rest微服务构建案例工程模块" class="headerlink" title="Rest微服务构建案例工程模块"></a>Rest微服务构建案例工程模块</h3><h4 id="构建父工程并导入maven依赖"><a href="#构建父工程并导入maven依赖" class="headerlink" title="构建父工程并导入maven依赖"></a>构建父工程并导入maven依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservicecloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--springcloud依赖--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>Dalston.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--springboot依赖--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--MySQL驱动--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--druid连接池--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--mybatis整合springboot--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--logback日志依赖--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--单元测试--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建microservicecloud-api-公共子模块"><a href="#创建microservicecloud-api-公共子模块" class="headerlink" title="创建microservicecloud-api 公共子模块"></a>创建microservicecloud-api 公共子模块</h4><p>工程目录结构</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018164048451.png" alt="image-20221018164048451"></p><p>maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--lombok--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>entity实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructor@Accessors(chain = true)  //链式风格访问//必须序列化public class Dept implements Serializable {  //Dept(Entity) orm mysql-&gt;Dept (table)类表关系映射    private Long id;  //主键    @SuppressWarnings("SpellCheckingInspection")    private String dname;  //部门名    private String db_source;  //来自哪个数据库，因为微服务架构可以一个服务对应一个数据库，同一个信息被存储到不同数据库    public Dept(String dname){        super();        this.dname = dname;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建部门微服务提供者子模块microservicecloud-provider-dept-8001"><a href="#创建部门微服务提供者子模块microservicecloud-provider-dept-8001" class="headerlink" title="创建部门微服务提供者子模块microservicecloud-provider-dept-8001"></a>创建部门微服务提供者子模块microservicecloud-provider-dept-8001</h4><p>工程目录结构</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018163832193.png" alt="image-20221018163832193"></p><p>maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--引入自己定义的api通用包,可以使用Dept部门Entity--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservicecloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--动态获取版本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--单元测试--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--MySQL驱动--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--druid连接池--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--logback日志--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--mybatis整合springboot--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!----&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--springboot web启动器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--springboot web单元测试--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在resources目录下创建application.yml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001mybatis:  config-location: classpath:mybatis.cfg.xml                            #mybatis配置文件  type-aliases-package: com.example.springcloud.entity                  #所有的entity别名类所在的位置  mapper-locations:    - classpath:mybatis/mapper/**/*.xml                                 #mapper映射文件spring:  application:    name: microservicecloud-dept  #应用名称(即对外暴露的微服务名称)  datasource:    type: com.alibaba.druid.pool.DruidDataSource    #当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver      #MySQL驱动包    url: jdbc:mysql://localhost:3306/clouddb01?  #数据库名    username: root    password: liteng0220    dbcp2:      min-idle: 5          #数据库连接池的最小维持连接数      initial-size: 5     #初始化连接数      max-total: 5              #最大连接数      max-wait-millis: 200    #等待连接获取的最大超时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在mybatis目录下创建mybatis.cfg.xml文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--开启sql日志--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--开启二级缓存--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP DATABASE if EXISTS clouddb01;CREATE DATABASE clouddb01 CHARACTER set utf8;use clouddb01;CREATE TABLE `dept` (  `deptno` int NOT NULL AUTO_INCREMENT COMMENT '主键',  `dname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '部门名称',  `db_source` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '数据源',  PRIMARY KEY (`deptno`)) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;INSERT INTO dept(dname,db_source) VALUES('开发部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('人事部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('财务部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('市场部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('运维部',DATABASE());select * FROM dept;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface DeptMapper {    public boolean addDept(@Param("dept") Dept dept);    public Dept findById(@Param("deptno") Long deptno);    public List&lt;Dept&gt; findAll();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface DeptService {    public boolean addDept(@Param("dept") Dept dept);    public Dept findById(@Param("deptno") Long deptno);    public List&lt;Dept&gt; findAll();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class DeptServiceImpl implements DeptService {    @Autowired    private DeptMapper deptMapper;    @Override    public boolean addDept(Dept dept) {        return deptMapper.addDept(dept);    }    @Override    public Dept findById(Long deptno) {        return deptMapper.findById(deptno);    }    @Override    public List&lt;Dept&gt; findAll() {        return deptMapper.findAll();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RequestMapping("/dept")public class DeptController {    @Autowired    private DeptService deptService;    @PostMapping("add")    public boolean addDept(@RequestBody Dept dept){        return deptService.addDept(dept);    }    @GetMapping("{deptno}")    public Dept findById(@PathVariable Long deptno){        return deptService.findById(deptno);    }    @GetMapping("list")    public List&lt;Dept&gt; findAll(){        return deptService.findAll();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class DeptProvider8001_App {    public static void main(String[] args) {        SpringApplication.run(DeptProvider8001_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建部门消费者子模块microservicecloud-consumer-dept-80"><a href="#创建部门消费者子模块microservicecloud-consumer-dept-80" class="headerlink" title="创建部门消费者子模块microservicecloud-consumer-dept-80"></a>创建部门消费者子模块microservicecloud-consumer-dept-80</h4><p>RestTemplate官网：<a href="https://docs.spring.io/spring-framework/docs/4.3.7.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/4.3.7.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p><p>RestTemplate便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集</p><p><strong>RestTemplate的使用</strong></p><ul><li>使用restTemplate访问restful接口非常的简单粗暴无脑。</li><li>(url, requestMap,ResponseBean.class)这三个参数分别代表REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。</li></ul><p>工程目录结构</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018164145297.png" alt="image-20221018164145297"></p><p>maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--引入自己定义的api通用包,可以使用Dept部门Entity--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservicecloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--动态获取版本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--springboot web启动器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ConfigBean配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ConfigBean {  // boot --&gt;spring applicationContext.xml --- @Configuration配置 ConfigBean = applicationContext.xml    @Bean    public RestTemplate getRestTemplate(){        return new RestTemplate();    }}/** * 以上相当于applicationContext.xml的内容 * *     @Bean *     public RestTemplate getRestTemplate(){ *         return new RestTemplate(); *     } * applicationContext.xml == ConfigBean(@Configuration) * * &lt;bean id = "RestTemplate" class = "org.springframework.web.client.RestTemplate"&gt;&lt;/bean&gt; * */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RequestMapping("/consumer")public class DeptController_Consumer {    public static final String REST_URL_PREFIX = "http://localhost:8001"; //微服务提供者的IP地址    @Autowired    private RestTemplate restTemplate;    /**     * restTemplate.postForObject(url, requestMap,ResponseBean.class)     * restTemplate.getForObject(url, ResponseBean.class)     * restTemplate.getForObject(url, requestMap,ResponseBean.class)     * - (url, requestMap,ResponseBean.class)这三个参数分别代表REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。     */    @PostMapping("add")    public boolean addDept(@RequestBody Dept dept){        return restTemplate.postForObject(REST_URL_PREFIX+"/dept/add",dept,Boolean.class);    }    @GetMapping("{deptno}")    public Dept findById(@PathVariable Long deptno){        return restTemplate.getForObject(REST_URL_PREFIX+"/dept/"+deptno,Dept.class);    }    @GetMapping("list")    public List&lt;Dept&gt; findAll(){        return restTemplate.getForObject(REST_URL_PREFIX+"/dept/list",List.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class DeptConsumer80_App {    public static void main(String[] args) {        SpringApplication.run(DeptConsumer80_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018165359109.png" alt="image-20221018165359109"></p><p>访问地址：<a href="http://localhost/consumer/list">http://localhost/consumer/list</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018170936600.png" alt="image-20221018170936600"></p><p><strong>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合,每一个微服务提供单个业务功能的服务，一个服务做一件事，</strong><br><strong>从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，拥有自己独立的数据库。</strong></p><h3 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h3><h4 id="Eureka是什么？"><a href="#Eureka是什么？" class="headerlink" title="Eureka是什么？"></a>Eureka是什么？</h4><p><strong>Eureka是Netflx的一个子模块，也是核心模块之一</strong>。Eureka是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障转移。服务注册与发现对于微服务架构来说是非常重要的，有了服务发现与注册，==只需要使用服务的标识符，就可以访问到服务==，而不需要修改服务调用的配置文件了。==功能类似于dubbo的注册中心，比如Zookeeper。==</p><p>Netflix在设计Eureka时遵守的就是<strong>AP原则</strong></p><h4 id="Eureka的原理"><a href="#Eureka的原理" class="headerlink" title="Eureka的原理"></a>Eureka的原理</h4><p>Spring Cloud封装了Netflix公司开发的Eureka模块来==实现服务注册和发现(请对比Zookeeper)==。</p><p>==<strong>Eureka采用了C-S的设计架构。</strong>==Eureka Server作为服务注册功能的服务器，它是服务注册中心。</p><p>而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行。SpringCloud的一些其他模块（比如Zuul)就可以通过Eureka Server来发现系统中的其他微服务，并执行相关的逻辑。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018190744900.png" alt="image-20221018190744900"></p><p><strong>Eureka包含两个组件：==Eureka Server和Eureka Client==<strong>，</strong>Eureka Server提供服务注册服务</strong></p><p>各个节点启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到</p><p><strong>EurekaClient</strong>是一个<strong>Java</strong>客户端，用于简化<strong>Eureka Server</strong>的交互，客户端同时也具备一个内置的、<strong>使用轮询(round-robin)负载算法</strong>的负载均衡器。在应用启动后,将会向<strong>Eureka Server</strong>发送心跳(默认周期为30秒)。如果Eureka( Server在多个心跳周期内没有接收到某个节点的心跳，<strong>EurekaServer</strong>将会从服务注册表中把这个服务节点移除（默认90秒)</p><p><strong>Eureka的三大角色</strong>：</p><ul><li><strong>Eureka Server提供服务注册和发现</strong></li><li><strong>Service Provider服务提供方将自身服务注册到Eureka，从而使服务消费方能够找到</strong></li><li><strong>Service Consumer服务消费方从Eureka获取注册服务列表，从而能够消费服务</strong></li></ul><h4 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h4><p>==<strong>需要特别注意的是SpringCloud、SpringBoot与Eureka版本兼容性问题，对版本的要求十分的苛刻</strong>==</p><p>这里使用SpringCloud与SpringBoot的版本如下图</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018201212058.png" alt="image-20221018201212058"></p><p>因此Eureka的版本必须是如下图，要不然就会报版本不兼容的错误</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018201529765.png" alt="image-20221018201529765"></p><p><strong>microservicecloud-eureka-7001模块的创建(服务端)</strong></p><p>工程目录结构</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018210119272.png" alt="image-20221018210119272"></p><p>maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--eureka服务端--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7001eureka:  instance:    hostname: localhost #eureka服务端的实例名称  client:    register-with-eureka: false   #false表示7001不向注册中心注册自己。    fetch-registry: false   #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/  #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类，注意：必须在主启动类上加<code>@EnableEurekaServer </code>注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaServer  //EurekaServer服务器端启动类,接受其它微服务注册进来public class EurekaServer7001_App {    public static void main(String[] args) {        SpringApplication.run(EurekaServer7001_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：<a href="http://localhost:7001/%E6%98%BE%E7%A4%BA%E5%A6%82%E4%B8%8B%E8%AF%B4%E6%98%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%B2%A1%E9%97%AE%E9%A2%98">http://localhost:7001/显示如下说明环境搭建没问题</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018202315527.png" alt="image-20221018202315527"></p><h4 id="将已有的微服务provider-8001-入驻（注册）到Eureka-Server-7001"><a href="#将已有的微服务provider-8001-入驻（注册）到Eureka-Server-7001" class="headerlink" title="将已有的微服务provider(8001)入驻（注册）到Eureka Server(7001)"></a>将已有的微服务provider(8001)入驻（注册）到Eureka Server(7001)</h4><p><strong>第一步、修改8001的pom文件，在pom文件中添加如下的maven依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--将微服务provider注册进eureka--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二不、修改8001的application.yaml文件，添加如下的配置</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">eureka:  client:    service-url:      defaultZone: http://localhost:7001/eureka   #客户端注册进eureka服务列表内<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018203846783.png" alt="image-20221018203846783"></p><p><strong>第三步、在8001的主启动类添加<code>@EnableEurekaClient</code>注解</strong></p><p><strong>测试：访问<a href="http://localhost:7001/%E6%98%BE%E7%A4%BA%E5%A6%82%E4%B8%8B%E8%AF%B4%E6%98%8E%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%A9%BB%E6%88%90%E5%8A%9F">http://localhost:7001/显示如下说明服务入驻成功</a></strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018204741903.png" alt="image-20221018204741903"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018205951448.png" alt="image-20221018205951448"></p><p><strong>application.yaml配置详解</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018205523385.png" alt="image-20221018205523385"></p><h4 id="actuator与注册微服务信息完善"><a href="#actuator与注册微服务信息完善" class="headerlink" title="actuator与注册微服务信息完善"></a>actuator与注册微服务信息完善</h4><h5 id="主机名称：服务名称修改"><a href="#主机名称：服务名称修改" class="headerlink" title="主机名称：服务名称修改"></a>主机名称：服务名称修改</h5><p>1、当前问题</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018211956611.png" alt="image-20221018211956611"></p><p>2、修改microservicecloud-provider-dept-8001</p><p>修改8001的application.yaml配置文件，添加如下内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">instance:  instance-id: microservicecloud-dept8001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018212246001.png" alt="image-20221018212246001"></p><p>3、修改之后</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018212454568.png" alt="image-20221018212454568"></p><h5 id="访问信息有IP信息提示"><a href="#访问信息有IP信息提示" class="headerlink" title="访问信息有IP信息提示"></a>访问信息有IP信息提示</h5><p>修改8001的application.yaml配置文件，添加如下内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">prefer-same-zone-eureka: true  #访问路径可以显示IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018212736560.png" alt="image-20221018212736560"></p><p>修改之后</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018213044429.png" alt="image-20221018213044429"></p><h5 id="微服务info内容详细信息"><a href="#微服务info内容详细信息" class="headerlink" title="微服务info内容详细信息"></a>微服务info内容详细信息</h5><p>当前问题点击microservicecloud-dept8001报如下的错误</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018213157792.png" alt="image-20221018213157792"></p><p>第一步、修改microservicecloud-provider-dept-8001的pom文件，添加如下的maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--actuator,监控信息完善--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步、总的父工程microservicecloud修改pom.xml添加构建build信息</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>microservicecloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delimiters</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delimit</span><span class="token punctuation">&gt;</span></span>$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delimit</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delimiters</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步、修改microservicecloud-provider-dept-8001的application.yaml配置文件，添加如下的内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">info:  app.name: lt-microservicecloud  company.name: www.baidu.com  build.artifactId: $project.artifactId$  build.version: $project.version$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018214841016.png" alt="image-20221018214841016"></p><p>修改之后</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018220910691.png" alt="image-20221018220910691"></p><h4 id="Eureka的自我保护机制"><a href="#Eureka的自我保护机制" class="headerlink" title="Eureka的自我保护机制"></a>Eureka的自我保护机制</h4><p>某时刻某一个微服务不可用了，eureka不会立刻清理，依旧会对该微服务的信息进行保存</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018210427561.png" alt="image-20221018210427561"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018221847288.png" alt="image-20221018221847288"></p><h5 id="导致自我保护的原因"><a href="#导致自我保护的原因" class="headerlink" title="导致自我保护的原因"></a>导致自我保护的原因</h5><p>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，==EurekaServer将会注销该实例(默认90秒)==。但是当网络分区故障发生时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，==此时本不应该注销这个微服务==。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时(可能发生了网络分区故障)，那么这个节点就会进入自我保护模式。一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务)。当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。</p><p>==在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例==。—句话讲解：好死不如赖活着</p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留)，也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</p><p>==在Spring Cloud中，可以使用eureka.server.enable-self-preservation = false禁用自我保护模式==，不推荐使用，若使用，则在EurekaServer(在这即7001)的application.yaml配置文件添加修改如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7001eureka:  server:    rate-limiter-enabled: false    #禁用Eureka的自我保护机制  instance:    hostname: localhost #eureka服务端的实例名称  client:    register-with-eureka: false   #false表示7001不向注册中心注册自己。    fetch-registry: false   #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/  #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。(即对外暴露的地址)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018222350555.png" alt="image-20221018222350555"></p><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><h5 id="microservicecloud-provider-dept-8001服务发现Discovery"><a href="#microservicecloud-provider-dept-8001服务发现Discovery" class="headerlink" title="microservicecloud-provider-dept-8001服务发现Discovery"></a><strong>microservicecloud-provider-dept-8001服务发现Discovery</strong></h5><p>对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息</p><p>第一步、修改microservicecloud-provider-dept-8001工程的DeptController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4j@RequestMapping("/dept")public class DeptController {    @Autowired    private DeptService deptService;    @Autowired    private DiscoveryClient discoveryClient;    @GetMapping("/discovery")    public Object discovery(){        List&lt;String&gt; services = discoveryClient.getServices();        System.out.println("****************"+services);        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances("MICROSERVICECLOUD-DEPT");        for (ServiceInstance instance : instances) {            System.out.println(instance.getServiceId() + "\t" + instance.getHost() + "\t" + instance.getPort()            + "\t" + instance.getUri());        }        return this.discoveryClient;    }    @RequestMapping(value = "/add",method = RequestMethod.POST)    public boolean addDept(@RequestBody Dept dept){        log.info("dept={}",dept);        return deptService.addDept(dept);    }    @GetMapping("{deptno}")    public Dept findById(@PathVariable Long deptno){        return deptService.findById(deptno);    }    @GetMapping("list")    public List&lt;Dept&gt; findAll(){        return deptService.findAll();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018231054081.png" alt="image-20221018231054081"></p><p>第二步、DeptProvider8001_App主启动类 ，在主启动类添加<code>@EnableDiscoveryClient</code>注解</p><p>第三步、测试</p><ul><li><p>先要启动EurekaServer（即7001）</p></li><li><p>再启动DeptProvider8001_ App主启动类，需要稍等一会儿</p></li><li><p>访问<a href="http://localhost:8001/dept/discovery">http://localhost:8001/dept/discovery</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018230608246.png" alt="image-20221018230608246"></p></li></ul><p>第四步、修改microservicecloud-consumer-dept-80工程的DeptController Consumer，添加如下的内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/discovery")public Object discovery(){      return restTemplate.getForObject(REST_URL_PREFIX+"/dept/discovery",Object.class);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018231838067.png" alt="image-20221018231838067"></p><p>访问：<a href="http://localhost/consumer/discovery%E6%98%BE%E7%A4%BA%E5%A6%82%E4%B8%8B">http://localhost/consumer/discovery显示如下</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018231751960.png" alt="image-20221018231751960"></p><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>1、创建microservicecloud-eureka-7002、microservicecloud-eureka-7003子模块</p><p>2、分别在microservicecloud-eureka-7002、microservicecloud-eureka-7003的pom文件添加如下的maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--eureka服务端--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--热部署--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、修改7002和7003的主启动类修改映射配置</p><p>7002</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaServer  //EurekaServer服务器端启动类,接受其它微服务注册进来public class EurekaServer7003_App {    public static void main(String[] args) {        SpringApplication.run(EurekaServer7003_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7003</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaServer  //EurekaServer服务器端启动类,接受其它微服务注册进来public class EurekaServer7003_App {    public static void main(String[] args) {        SpringApplication.run(EurekaServer7003_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改映射配置,在C:\Windows\System32\drivers\etc下的hosts文件，添加如下的内容，并保存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1    eureka7001.com127.0.0.1    eureka7002.com127.0.0.1    eureka7003.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221018233656169.png" alt="image-20221018233656169"></p><p>4、3台eureka服务器的yml配置</p><p>7001的application.yaml配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7001eureka:  instance:    hostname: eureka7001.com #eureka服务端的实例名称  client:    register-with-eureka: false   #false表示7001不向注册中心注册自己。    fetch-registry: false   #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:#      #单机的写法#      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/  #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。(即对外暴露的地址)    #集群的写      defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7002的application.yaml配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7002eureka:  instance:    hostname: eureka7002.com #eureka服务端的实例名称  client:    register-with-eureka: false   #false表示7001不向注册中心注册自己。    fetch-registry: false   #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/  #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。(即对外暴露的地址)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7003的application.yaml配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7003eureka:  instance:    hostname: eureka7003.com #eureka服务端的实例名称  client:    register-with-eureka: false   #false表示7001不向注册中心注册自己。    fetch-registry: false   #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/  #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。(即对外暴露的地址)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、microservicecloud-provider-dept-8001微服务发布到上面3台eureka集群配置中</p><p>修改8001的application.yaml配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001mybatis:  config-location: classpath:mybatis/mybatis.cfg.xml                            #mybatis配置文件  type-aliases-package: com.example.springcloud.entity                  #所有的entity别名类所在的位置  mapper-locations:    - classpath:mybatis/mapper/**/*.xml                                 #mapper映射文件spring:  application:    name: microservicecloud-dept  #应用名称(即对外暴露的微服务名称)  datasource:    type: com.alibaba.druid.pool.DruidDataSource    #当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver      #MySQL驱动包    url: jdbc:mysql://localhost:3306/clouddb01?  #数据库名    username: root    password: liteng0220    dbcp2:      min-idle: 5          #数据库连接池的最小维持连接数      initial-size: 5     #初始化连接数      max-total: 5              #最大连接数      max-wait-millis: 200    #等待连接获取的最大超时时间eureka:  client:    service-url:#      defaultZone: http://localhost:7001/eureka   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(单机版)      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/，http://eureka7003.com:7003/eureka/   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(集群版)    prefer-same-zone-eureka: true  #访问路径可以显示IP地址  instance:    instance-id: microservicecloud-dept8001       #自定义服务名称信息info:  app.name: lt-microservicecloud    #app名称  company.name: www.baidu.com      #公司名称  build.artifactId: $project.artifactId$   #构建工程  build.version: $project.version$   #构建版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动顺序，先7001、7002、7003最后8001</p><h4 id="作为服务注册中心，Eureka比zookeeper好在哪里"><a href="#作为服务注册中心，Eureka比zookeeper好在哪里" class="headerlink" title="作为服务注册中心，Eureka比zookeeper好在哪里"></a>作为服务注册中心，Eureka比zookeeper好在哪里</h4><h5 id="传统的ACID分别是什么？"><a href="#传统的ACID分别是什么？" class="headerlink" title="传统的ACID分别是什么？"></a><strong>传统的ACID分别是什么？</strong></h5><ul><li>A(Atomicity)原子性</li><li>C (Consistency)一致性</li><li>I(Isolation)独立性</li><li>D(Durability)持久性</li></ul><p><strong>1、A (Atomicity）原子性</strong></p><p>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。比如银行转账，从A账户转100元至B账户，分为两个步骤:1)从A账户取100元;2)存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</p><p><strong>2、C (Consistency)一致性</strong></p><p>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</p><p><strong>3、I (Isolation)独立性</strong></p><p>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。比如现有有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的</p><h5 id="CAP是什么？"><a href="#CAP是什么？" class="headerlink" title="CAP是什么？"></a><strong>CAP是什么？</strong></h5><ul><li>C：consistency(强一致性)</li><li>A：Availability （可用性)</li><li>P：Partition tolerance(分区容错性)</li></ul><h5 id="CAP原理"><a href="#CAP原理" class="headerlink" title="CAP原理"></a><strong>CAP原理</strong></h5><p>最多只能同时较好的满足两个。</p><p>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，因此，根据CAP原理将NoSQL数据库分成了满足CA 原则、满足CP原则和满足AP原则三大类:</p><ul><li>CA-单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</li><li>CP–满足一致性，分区容忍必的系统，通常性能不是特别高。</li><li>AP-满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li></ul><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019002650422.png" alt="image-20221019002650422"></p><p>​经典CAP图</p><h5 id="CAP的3进2"><a href="#CAP的3进2" class="headerlink" title="CAP的3进2"></a>CAP的3进2</h5><p>CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以==分区容错性是我们必须需要实现的。==</p><p>所以我们只能在==一致性==和==可用性==之间进行权衡，==没有NoSQL系统能同时保证这三点。==</p><p>BASE是什么</p><p>分布式+集群简介</p><p><strong>结论：</strong>CAP理论指出，一个分布式系统不可能同时满足C(一致性)、A(可用性)和P(分区容错性)。由于分区容错性P在是分布式系统中必须要保证的，因此我们只能在A和C之间进行权衡。因此==Zookeeper保证的是CP,Eureka则是AP。==</p><p><strong>Zookeeper保证CP</strong></p><p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30～120s,且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得水集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。</p><p><strong>Eureka保证AP</strong></p><p>Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka汪册或时如果友现连接失败，则会目动功换全具它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况:</p><ul><li>1.Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</li><li>2.Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用)</li><li>3.当网络稳定时，当前实例新的注册信息会被同步到其它节点中</li></ul><p>==因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。==</p><h3 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套==客户端    负载均衡的工具==。</p><p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供==客户端的软件负载均衡算法==，将Netflix的中间层服务连接在一起。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer (简称LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则(如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。</p><h4 id="官网资料"><a href="#官网资料" class="headerlink" title="官网资料"></a>官网资料</h4><p><a href="https://github.com/Netflix/ribbon/wiki/Getting-Started">https://github.com/Netflix/ribbon/wiki/Getting-Started</a></p><h4 id="LB-负载均衡"><a href="#LB-负载均衡" class="headerlink" title="LB(负载均衡)"></a>LB(负载均衡)</h4><p>LB，即负载均衡(Load Balance)，在微服务或分布式集群中经常用的一种应用。</p><p>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。常见的负载均衡有软件Nginx，LVS，硬件F5等。</p><p>相应的在中间件，例如: dubbo和SpringCloud中均给我们提供了负载均衡，==SpringCloud的负载均衡算法可以自定义。==</p><h5 id="集中式LB"><a href="#集中式LB" class="headerlink" title="集中式LB"></a>集中式LB</h5><p>即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5,也可以是软件，如nginx)，由该设施负责把访问请求通过某种策略转发至服务的提供方;</p><h5 id="进程内LB"><a href="#进程内LB" class="headerlink" title="进程内LB"></a>进程内LB</h5><p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。==Ribbon就属于进程内LB==，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p><h4 id="Ribbon配置初步"><a href="#Ribbon配置初步" class="headerlink" title="Ribbon配置初步"></a>Ribbon配置初步</h4><h5 id="修改microservicecloud-consumer-dept-80工程"><a href="#修改microservicecloud-consumer-dept-80工程" class="headerlink" title="修改microservicecloud-consumer-dept-80工程"></a>修改microservicecloud-consumer-dept-80工程</h5><p>1、修改pom.xml文件，在80的pom.xml文件添加如下的maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Ribbon相关依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、修改80的application.yml追加eureka的服务注册地址</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">eureka:  client:    register-with-eureka: false    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(集群版)    prefer-same-zone-eureka: true  #访问路径可以显示IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019120419288.png" alt="image-20221019120419288"></p><p>3、对微服务80的ConfigBean添加新注解<code>@LoadBalanced</code>，获得Rest时加入Ribbon的配置</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019130537168.png" alt="image-20221019130537168"></p><p>4、主启动类DeptConsumer80_App添加<code>@EnableEurekaClient</code>注解</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019130710349.png" alt="image-20221019130710349"></p><p>5、修改DeptController_Consumer客户端访问类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static final String REST_URL_PREFIX = "http://MICROSERVICECLOUD-DEPT";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019131022435.png" alt="image-20221019131022435"></p><p>6、先启动3个eureka集群先7001、7002、7003后，再启动microservicecloud-provider-dept-8001并注册进eureka</p><p>7、启动microservicecloud-consumer-dept-80</p><p>8、测试</p><p><a href="http://localhost/consumer/6">http://localhost/consumer/6</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019131643646.png" alt="image-20221019131643646"></p><p><a href="http://localhost/consumer/list">http://localhost/consumer/list</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019131659100.png" alt="image-20221019131659100"></p><p><a href="http://localhost/consumer/add?dname=%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%83%A8">http://localhost/consumer/add?dname=大数据部</a></p><h4 id="Ribbon负载均衡-1"><a href="#Ribbon负载均衡-1" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h4><h5 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019132046515.png" alt="image-20221019132046515"></p><p><strong>Ribbon在工作时分成两步</strong></p><ul><li>第一步先选择EurekaServer ,它优先选择在同一个区域内负载较少的server</li><li>第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址</li></ul><p><strong>其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。</strong></p><h5 id="负载均衡实现（默认的轮询算法）"><a href="#负载均衡实现（默认的轮询算法）" class="headerlink" title="负载均衡实现（默认的轮询算法）"></a>负载均衡实现（默认的轮询算法）</h5><p>1、新建microservicecloud-provider-dept-8002、microservicecloud-provider-dept-800两个子模块（即微服务）</p><p>2、分别在这两个子模块的pom文件添加如下的maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--actuator,监控信息完善--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--将微服务provider注册进eureka--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--引入自己定义的api通用包,可以使用Dept部门Entity--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservicecloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--单元测试--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--MySQL驱动--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--druid连接池--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--logback日志--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--mybatis整合springboot--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!----&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--springboot web启动器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--springboot web单元测试--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、分别创建clouddb02、clouddb03数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP DATABASE if EXISTS clouddb02;CREATE DATABASE clouddb02 CHARACTER set utf8;use clouddb02;CREATE TABLE `dept` (  `deptno` int NOT NULL AUTO_INCREMENT COMMENT '主键',  `dname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '部门名称',  `db_source` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '数据源',  PRIMARY KEY (`deptno`)) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;INSERT INTO dept(dname,db_source) VALUES('开发部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('人事部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('财务部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('市场部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('运维部',DATABASE());select * FROM dept;DROP DATABASE if EXISTS clouddb03;CREATE DATABASE clouddb03 CHARACTER set utf8;use clouddb03;CREATE TABLE `dept` (  `deptno` int NOT NULL AUTO_INCREMENT COMMENT '主键',  `dname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '部门名称',  `db_source` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '数据源',  PRIMARY KEY (`deptno`)) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;INSERT INTO dept(dname,db_source) VALUES('开发部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('人事部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('财务部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('市场部',DATABASE());INSERT INTO dept(dname,db_source) VALUES('运维部',DATABASE());select * FROM dept;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、编辑8002、8003各自的application.yaml文件</p><p>8002</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8002mybatis:  config-location: classpath:mybatis/mybatis.cfg.xml                            #mybatis配置文件  type-aliases-package: com.example.springcloud.entity                  #所有的entity别名类所在的位置  mapper-locations:    - classpath:mybatis/mapper/**/*.xml                                 #mapper映射文件spring:  application:    name: microservicecloud-dept  #应用名称(即对外暴露的微服务名称)  datasource:    type: com.alibaba.druid.pool.DruidDataSource    #当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver      #MySQL驱动包    url: jdbc:mysql://localhost:3306/clouddb02?  #数据库名    username: root    password: liteng0220    dbcp2:      min-idle: 5          #数据库连接池的最小维持连接数      initial-size: 5     #初始化连接数      max-total: 5              #最大连接数      max-wait-millis: 200    #等待连接获取的最大超时时间eureka:  client:    service-url:#      defaultZone: http://localhost:7001/eureka   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(单机版)      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(集群版)    prefer-same-zone-eureka: true  #访问路径可以显示IP地址  instance:    instance-id: microservicecloud-dept8002       #自定义服务名称信息info:  app.name: lt-microservicecloud  company.name: www.baidu.com  build.artifactId: $project.artifactId$  build.version: $project.version$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8003</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8003mybatis:  config-location: classpath:mybatis/mybatis.cfg.xml                            #mybatis配置文件  type-aliases-package: com.example.springcloud.entity                  #所有的entity别名类所在的位置  mapper-locations:    - classpath:mybatis/mapper/**/*.xml                                 #mapper映射文件spring:  application:    name: microservicecloud-dept  #应用名称(即对外暴露的微服务名称)  datasource:    type: com.alibaba.druid.pool.DruidDataSource    #当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver      #MySQL驱动包    url: jdbc:mysql://localhost:3306/clouddb03?  #数据库名    username: root    password: liteng0220    dbcp2:      min-idle: 5          #数据库连接池的最小维持连接数      initial-size: 5     #初始化连接数      max-total: 5              #最大连接数      max-wait-millis: 200    #等待连接获取的最大超时时间eureka:  client:    service-url:#      defaultZone: http://localhost:7001/eureka   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(单机版)      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(集群版)    prefer-same-zone-eureka: true  #访问路径可以显示IP地址  instance:    instance-id: microservicecloud-dept8003       #自定义服务名称信息info:  app.name: lt-microservicecloud  company.name: www.baidu.com  build.artifactId: $project.artifactId$  build.version: $project.version$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时需要注意微服务的名称不能该，如下图</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019134501280.png" alt="image-20221019134501280"></p><p>5、剩下的其他目录直接拷贝8001的过来即可</p><p>6、启动3个eureka集群配置区，先7001、7002、7003的顺序</p><p>7、启动3个Dept微服务（8001、8002、8003）并各自测试通过</p><p><a href="http://localhost:8001/dept/list">http://localhost:8001/dept/list</a></p><p><a href="http://localhost:8002/dept/list">http://localhost:8002/dept/list</a></p><p><a href="http://localhost:8003/dept/list">http://localhost:8003/dept/list</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019135419934.png" alt="image-20221019135419934"></p><p>8、启动microservicecloud-consumer-dept-80</p><p>访问<a href="http://localhost/consumer/list">http://localhost/consumer/list</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019140608591.png" alt="image-20221019140608591"></p><p>9、客户端通过Ribbo完成负载均衡并访问上一步的Dept微服务</p><p><strong>总结:Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019140454089.png" alt="image-20221019140454089"></p><h4 id="Ribbon核心组件IRule"><a href="#Ribbon核心组件IRule" class="headerlink" title="Ribbon核心组件IRule"></a>Ribbon核心组件IRule</h4><p>lRule根据特定算法中从服务列表中选取一个要访问的服务</p><ul><li>RoundRobinRule（轮询）</li><li>RandomRule（随机）</li><li>AvailabilityFilteringRule：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问</li><li>WeightedResponseTimeRule：根据平均响应时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越高。刚启动时如果统计信息不足，则使用RoundRobinRule策略，等统计信息足够，会切换到WeightedResponseTimeRule</li><li>RetryRule：先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务</li><li>BestAvailableRule：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li><li>ZoneAvoidanceRule：默认规则,复合判断server所在区域的性能和server的可用性选择服务器</li></ul><p><strong>使用方法</strong></p><p>想要使用指定的负载均衡算法，只需在80的ConfigBean 配置如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ConfigBean {  // boot --&gt;spring applicationContext.xml --- @Configuration配置 ConfigBean = applicationContext.xml    @Bean    @LoadBalanced    //Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端   负载均衡的工具。    public RestTemplate getRestTemplate(){        return new RestTemplate();    }    @Bean    public IRule myRule(){//        return new RoundRobinRule(); //轮询。//       return new RandomRule(); //达到的目的,用我们重新选择的随机算法替代默认的轮询。(随机)        return new RetryRule();  //先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019143732291.png" alt="image-20221019143732291"></p><h4 id="Ribbon自定义"><a href="#Ribbon自定义" class="headerlink" title="Ribbon自定义"></a>Ribbon自定义</h4><h5 id="1、修改microservicecloud-consumer-dept-80"><a href="#1、修改microservicecloud-consumer-dept-80" class="headerlink" title="1、修改microservicecloud-consumer-dept-80"></a>1、修改microservicecloud-consumer-dept-80</h5><h5 id="2、主启动类添加-RibbonClient"><a href="#2、主启动类添加-RibbonClient" class="headerlink" title="2、主启动类添加@RibbonClient"></a>2、主启动类添加<code>@RibbonClient</code></h5><p>在启动该微服务的时候就能去加载我们的自定义Ribbon配置类，从而使配置生效，形如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RibbonClient(name="MICROSERVICECLOUD-DEPT" ,configuration=MySelfRule.class)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3、注意配置细节"><a href="#3、注意配置细节" class="headerlink" title="3、注意配置细节"></a>3、注意配置细节</h5><p><strong>官方文档明确给出了警告:</strong></p><p>==这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，即不能放在主启动类所在的包及其子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，也就是说我们达不到特殊化定制的目的了。==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019151551554.png" alt="image-20221019151551554"></p><p>因此，需要在example新建一个包MyselfRule</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019152512822.png" alt="image-20221019152512822"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class MySelfRule {    @Bean    public IRule MyRule(){        return new RandomRule();//Ribbon默认是轮询，我自定义为随机    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：<a href="http://localhost/consumer/list%EF%BC%8C%E6%9F%A5%E7%9C%8B%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F">http://localhost/consumer/list，查看，配置成功</a></p><h5 id="4、自定义规则深度解析"><a href="#4、自定义规则深度解析" class="headerlink" title="4、自定义规则深度解析"></a>4、自定义规则深度解析</h5><p>问题：依旧轮询策略，但是加上新需求，每个服务器要求被调用5次。也即以前是每台机器一次，现在是每台机器5次</p><p>解析源码: <a href="https://github.com/Netflix/ribbon/blob/master/ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/RandomRule.java">https://github.com/Netflix/ribbon/blob/master/ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/RandomRule.java</a></p><p>参考源码修改为我们需求的RandomRule_LT.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class RandomRule_LT extends AbstractLoadBalancerRule {    // total = 0 // 当total==5以后，我们指针才能往下走，    // index = 0 //当前对外提供服务的服务器地址，    // total需要重新置为零，但是已经达到过一个5次，我们的index = 1    private int total = 0;  //总共被调用的次数，目前要求每台被调用5次    private int currentIndex = 0;  //当前提供服务的机器号    public Server choose(ILoadBalancer lb, Object key) {        if (lb == null) {            return null;        }        Server server = null;        while (server == null) {            if (Thread.interrupted()) {                return null;            }            List&lt;Server&gt; upList = lb.getReachableServers();            List&lt;Server&gt; allList = lb.getAllServers();            int serverCount = allList.size();            if (serverCount == 0) {                /*                 * No servers. End regardless of pass, because subsequent passes                 * only get more restrictive.                 */                return null;            }//            int index = chooseRandomInt(serverCount);//            server = upList.get(index);            if (total &lt; 5){                server = upList.get(currentIndex);                total++;            }else {                total = 0;                currentIndex++;                if (currentIndex &gt; upList.size()){                    currentIndex = 0;                }            }            if (server == null) {                /*                 * The only time this should happen is if the server list were                 * somehow trimmed. This is a transient condition. Retry after                 * yielding.                 */                Thread.yield();                continue;            }            if (server.isAlive()) {                return (server);            }            // Shouldn't actually happen.. but must be transient or a bug.            server = null;            Thread.yield();        }        return server;    }    protected int chooseRandomInt(int serverCount) {        return ThreadLocalRandom.current().nextInt(serverCount);    }    @Override    public Server choose(Object key) {        return choose(getLoadBalancer(), key);    }    @Override    public void initWithNiwsConfig(IClientConfig iClientConfig) {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用，在MySelfRule类中调用</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019183440325.png" alt="image-20221019183440325"></p><h5 id="5、测试：http-localhost-consumer-list"><a href="#5、测试：http-localhost-consumer-list" class="headerlink" title="5、测试：http://localhost/consumer/list"></a>5、测试：<a href="http://localhost/consumer/list">http://localhost/consumer/list</a></h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019183556905.png" alt="image-20221019183556905"></p><h3 id="Feign负载均衡"><a href="#Feign负载均衡" class="headerlink" title="Feign负载均衡"></a>Feign负载均衡</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>官网解释:<a href="http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-feign">http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-feign</a></p><p>Feign是一个==声明式WebService客户端==。使用Feign能让编写Web Service客户端更加简单，它的使用方法是定义一个接口，然后在上面添加注解，同时也支持JAX-RS标准的注解。Feign也==支持可拔插式的编码器和解码器==。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡。</p><p>==Feign是一个声明式的Web服务客户端，使得编写Web服务客户端变得非常容易，只需要创建一个接口，然后在上面添加注解即可。==</p><p>参考官网: <a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p><h4 id="Feign能干什么？"><a href="#Feign能干什么？" class="headerlink" title="Feign能干什么？"></a>Feign能干什么？</h4><p>Feign旨在使编写Java Http客户端变得更容易。</p><p>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了—套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，==往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用==。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，==我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)==，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p><h4 id="Feign使用步骤"><a href="#Feign使用步骤" class="headerlink" title="Feign使用步骤"></a>Feign使用步骤</h4><p>参考microserviceclouc-consumer-dept-80</p><h5 id="1、新建microservicecloud-consumer-dept-feign"><a href="#1、新建microservicecloud-consumer-dept-feign" class="headerlink" title="1、新建microservicecloud-consumer-dept-feign"></a>1、新建microservicecloud-consumer-dept-feign</h5><h5 id="2、microservicecloud-consumer-dept-feign工程pom-xml修改，主要添加对feign的支持"><a href="#2、microservicecloud-consumer-dept-feign工程pom-xml修改，主要添加对feign的支持" class="headerlink" title="2、microservicecloud-consumer-dept-feign工程pom.xml修改，主要添加对feign的支持"></a>2、microservicecloud-consumer-dept-feign工程pom.xml修改，主要添加对feign的支持</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--引入自己定义的api通用包,可以使用Dept部门Entity--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservicecloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--动态获取版本--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--springboot web启动器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--热部署--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--feign负载均衡依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--eureka--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Ribbon相关依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019190433258.png" alt="image-20221019190433258"></p><h5 id="3、修改microservicecloud-api工程"><a href="#3、修改microservicecloud-api工程" class="headerlink" title="3、修改microservicecloud-api工程"></a>3、修改microservicecloud-api工程</h5><p>1.在api工程的pom文件添加一下的maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--feign负载均衡依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.新建DeptClientService接口并新增注解@FeignClient</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@FeignClient(value = "MICROSERVICECLOUD-DEPT")  //value的值为微服务的名称public interface DeptClientService {    @GetMapping("/dept/{id}")    public Dept get(@PathVariable("id") long id);    @GetMapping("/dept/list")    public List&lt;Dept&gt; list();    @PostMapping("/dept/add")    public boolean add(Dept dept);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019200158844.png" alt="image-20221019200158844"></p><p>3.运行命令：mvn clean</p><p>4.运行命令：mvn install</p><h5 id="4、microservicecloud-consumer-dept-feign工程修改Controller，添加上一步新建的DeptClientService"><a href="#4、microservicecloud-consumer-dept-feign工程修改Controller，添加上一步新建的DeptClientService" class="headerlink" title="4、microservicecloud-consumer-dept-feign工程修改Controller，添加上一步新建的DeptClientService"></a>4、microservicecloud-consumer-dept-feign工程修改Controller，添加上一步新建的DeptClientService</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RequestMapping("/consumer")public class DeptController_Consumer {    @Autowired    private DeptClientService deptClientService;    @RequestMapping(value = "/add",method = RequestMethod.POST)    public boolean addDept(Dept dept){        return deptClientService.add(dept);    }    @GetMapping("{deptno}")    public Dept findById(@PathVariable Long deptno){        return deptClientService.get(deptno);    }    @GetMapping("list")    public List&lt;Dept&gt; findAll(){        return deptClientService.list();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、microservicecloud-consumer-dept-feign工程修改主启动类"><a href="#5、microservicecloud-consumer-dept-feign工程修改主启动类" class="headerlink" title="5、microservicecloud-consumer-dept-feign工程修改主启动类"></a>5、microservicecloud-consumer-dept-feign工程修改主启动类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClient@EnableFeignClients(basePackages = {"com.example.springcloud"})@ComponentScan("com.example.springcloud")public class DeptConsumer80_Feign_App {    public static void main(String[] args) {        SpringApplication.run(DeptConsumer80_Feign_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6、测试：启动顺序7001、7002、7003、8001、8002、8003、DeptConsumer80-Feign-App"><a href="#6、测试：启动顺序7001、7002、7003、8001、8002、8003、DeptConsumer80-Feign-App" class="headerlink" title="6、测试：启动顺序7001、7002、7003、8001、8002、8003、DeptConsumer80_Feign_App"></a>6、测试：启动顺序7001、7002、7003、8001、8002、8003、DeptConsumer80_Feign_App</h5><p><a href="http://localhost/consumer/list">http://localhost/consumer/list</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019195323997.png" alt="image-20221019195323997"></p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>Feign集成了Ribbon</p><p>利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，==通过feign只需要定义服务绑定接口且以声明式的方法==，优雅而简单的实现了服务调用</p><p>==Feign通过接口的方法调用Rest服务(之前是Ribbon+RestTemplate)== ,该请求发送给Eureka服务器(<a href="http://microservicecloud-dept/dept/list">http://MICROSERVICECLOUD-DEPT/dept/list</a>) ,<br>通过Feign直接找到服务接口，由于在进行服务调用的时候融合了Ribbon技术，所以也支持负载均衡作用。</p><h3 id="Hystrix断路器（熔断器）"><a href="#Hystrix断路器（熔断器）" class="headerlink" title="Hystrix断路器（熔断器）"></a>Hystrix断路器（熔断器）</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><h5 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h5><p>==<strong>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</strong>==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019203102958.png" alt="image-20221019203102958"></p><p>上图中的请求需要调用A, P, H,I四个服务，如果一切顺利则没有什么问题，关键是如果I服务超时会出现什么情况呢?</p><p>答案是：服务雪崩</p><p><strong>服务雪崩</strong></p><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C。微服务B和微服务C又调用其它的微服务，这就是所谓的==“扇出”==。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”﹒</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统</p><h5 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h5><p>Hystrix是一个用于处理分布式系统的==延迟==和==容错==的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，==Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性（高可用）。==</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝)，==向调用方返回一个符合预期的、可处理的备选响应(FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常==，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h5 id="能干嘛？"><a href="#能干嘛？" class="headerlink" title="能干嘛？"></a>能干嘛？</h5><ul><li>服务降级</li><li>服务熔断</li><li>服务限流</li><li>接近实时的监控等等</li></ul><h5 id="官网资料-1"><a href="#官网资料-1" class="headerlink" title="官网资料"></a>官网资料</h5><p><a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h5><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。</p><p>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，==进而熔断该节点微服务的调用，快速返回”错误”的响应信息==。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是<code>@HystrixCommand</code>。</p><h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><p>参考microservicecloud-provider-dept-8001</p><h6 id="1、新建microservicecloud-provider-dept-hystrix-8001"><a href="#1、新建microservicecloud-provider-dept-hystrix-8001" class="headerlink" title="1、新建microservicecloud-provider-dept-hystrix-8001"></a>1、新建microservicecloud-provider-dept-hystrix-8001</h6><h6 id="2、POM添加如下的maven依赖"><a href="#2、POM添加如下的maven依赖" class="headerlink" title="2、POM添加如下的maven依赖"></a>2、POM添加如下的maven依赖</h6><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--hystrix服务熔断依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3、YML配置文件"><a href="#3、YML配置文件" class="headerlink" title="3、YML配置文件"></a>3、YML配置文件</h6><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001mybatis:  config-location: classpath:mybatis/mybatis.cfg.xml                            #mybatis配置文件  type-aliases-package: com.example.springcloud.entity                  #所有的entity别名类所在的位置  mapper-locations:    - classpath:mybatis/mapper/**/*.xml                                 #mapper映射文件spring:  application:    name: microservicecloud-dept  #应用名称(即对外暴露的微服务名称)  datasource:    type: com.alibaba.druid.pool.DruidDataSource    #当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver      #MySQL驱动包    url: jdbc:mysql://localhost:3306/clouddb01?  #数据库名    username: root    password: liteng0220    dbcp2:      min-idle: 5          #数据库连接池的最小维持连接数      initial-size: 5     #初始化连接数      max-total: 5              #最大连接数      max-wait-millis: 200    #等待连接获取的最大超时时间eureka:  client:    service-url:#      defaultZone: http://localhost:7001/eureka   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(单机版)      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(集群版)    prefer-same-zone-eureka: true  #访问路径可以显示IP地址  instance:#    instance-id: microservicecloud-dept8001       #自定义服务名称信息    instance-id: microservicecloud-dept8001-hystrix       #自定义服务名称信息info:  app.name: lt-microservicecloud    #app名称  company.name: www.baidu.com      #公司名称  build.artifactId: $project.artifactId$   #构建工程  build.version: $project.version$   #构建版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019205342391.png" alt="image-20221019205342391"></p><h6 id="4、修改DeptController"><a href="#4、修改DeptController" class="headerlink" title="4、修改DeptController"></a>4、修改DeptController</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4j@RequestMapping("/dept")public class DeptController {    @Autowired    private DeptService deptService;    @GetMapping("{deptno}")    //一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法    @HystrixCommand(fallbackMethod = "processHystrix_Get")    public Dept findById(@PathVariable Long deptno){        Dept dept = this.deptService.findById(deptno);        if (dept == null){            throw new RuntimeException("该ID：" + deptno + "没有对应的信息");        }        return dept;    }    public Dept processHystrix_Get(@PathVariable("deptno") Long deptno){        return new Dept().setDeptno(deptno)                .setDname("该ID："+deptno+"对应的信息，null---此方法被@HystrixCommand()的fallbackMethod调用")                .setDb_source("no this database in MySQL");    }    @GetMapping("list")    @HystrixCommand(fallbackMethod = "processHystrix_GetAll")    public List&lt;Dept&gt; findAll(){        List&lt;Dept&gt; all = this.deptService.findAll();        if (all == null){            throw new RuntimeException("数据库中没有数据");        }        return all;    }    public List&lt;Dept&gt; processHystrix_GetAll(){        List&lt;Dept&gt; depts = new ArrayList&lt;&gt;();        return depts;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019214155609.png" alt="image-20221019214155609"></p><h6 id="5、修改主启动类DeptProvider8001-Hystrix-App并添加新注解-EnableCircuitBreaker"><a href="#5、修改主启动类DeptProvider8001-Hystrix-App并添加新注解-EnableCircuitBreaker" class="headerlink" title="5、修改主启动类DeptProvider8001_Hystrix_App并添加新注解@EnableCircuitBreaker"></a>5、修改主启动类DeptProvider8001_Hystrix_App并添加新注解<code>@EnableCircuitBreaker</code></h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClient   //本服务启动后会自动注册进eureka服务中@EnableDiscoveryClient  //服务发现@EnableCircuitBreaker  //对hystrix熔断机制的支持public class DeptProvider8001_Hystrix_App {    public static void main(String[] args) {        SpringApplication.run(DeptProvider8001_Hystrix_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h6><p>第一步、3个eureka先启动，启动顺序:7001、7002、7003</p><p>第二步、主启动类DeptProvider8001_Hystrix_App</p><p>第三步、Consumer启动DeptConsumer80_Feign_App</p><p>最后访问 <a href="http://localhost/consumer/123">http://localhost/consumer/123</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019213626067.png" alt="image-20221019213626067"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019213703995.png" alt="image-20221019213703995"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019213725637.png" alt="image-20221019213725637"></p><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><p>整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来。</p><p>==服务降级处理是在客户端实现完成的，与服务端没有关系==</p><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><p><strong>修改microservicecloud-api工程</strong></p><p>1、根据已经有的DeptClientService接口新建一个实现FallbackFactory接口的类DeptClientServiceFallbackFactory</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019224246958.png" alt="image-20221019224246958"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component //必须加此注解public class DeptClientServiceFallbackFactory implements FallbackFactory&lt;DeptClientService&gt; {    @Override    public DeptClientService create(Throwable throwable) {        return new DeptClientService() {            @Override            public Dept get(long id) {                return new Dept().setDeptno(id)                        .setDname("该ID："+id+"对应的信息，Consumer客户端提供的降级信息，此刻服务Provider已经关闭")                        .setDb_source("no this database in MySQL");            }            @Override            public List&lt;Dept&gt; list() {                return null;            }            @Override            public boolean add(Dept dept) {                return false;            }        };    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、修改microservicecloud-api工程，在DeptClientService接口的注解@FeignClient中==添加fallbackFactory属性值==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019224408614.png" alt="image-20221019224408614"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//@FeignClient(value = "MICROSERVICECLOUD-DEPT")  //value的值为微服务的名称@FeignClient(value = "MICROSERVICECLOUD-DEPT",fallbackFactory = DeptClientServiceFallbackFactory.class)public interface DeptClientService {    @GetMapping("/dept/{id}")    public Dept get(@PathVariable("id") long id);    @GetMapping("/dept/list")    public List&lt;Dept&gt; list();    @PostMapping("/dept/add")    public boolean add(Dept dept);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、microservicecloud-api工程</p><p>4、microservicecloud-consumer-dept-feign工程修改YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80feign:  hystrix:    enabled : trueeureka:  client:    register-with-eureka: false    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(集群版)    prefer-same-zone-eureka: true  #访问路径可以显示IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019224725030.png" alt="image-20221019224725030"></p><p>5、测试</p><p>第一步、3个eureka先启动，顺序：7001、7002、7003</p><p>第二步、微服务microservicecloud-provider-dept-8001启动</p><p>第三步、microservicecloud-consumer-dept-feign启动</p><p>第四步、正常访问测试 <a href="http://localhost/consumer/8">http://localhost/consumer/8</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019225629146.png" alt="image-20221019225629146"></p><p>第五步、故意关闭微服务microservicecloud-provider-dept-8001，在访问 <a href="http://localhost/consumer/8">http://localhost/consumer/8</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019225856864.png" alt="image-20221019225856864"></p><p><strong>这就达到服务降级的处理</strong></p><p><strong>【总结】：</strong></p><p>【服务熔断】</p><p>一般是某个服务故障或者异常引起,类似现实世界中的“保险丝“，当某个异常条件被触发，直接熔断整个服务，而不是一直等到此服务超时。</p><p>【服务降级】</p><p>所谓降级，一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。<br>这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强。</p><h4 id="服务监控hystrixDashboard"><a href="#服务监控hystrixDashboard" class="headerlink" title="服务监控hystrixDashboard"></a>服务监控hystrixDashboard</h4><p>除了隔离依赖服务的调用以外，==Hystrix还提供了准实时的调用监控(Hystrix Dashboard)== ,Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。</p><p>Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><h5 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h5><p>1、新建工程microservicecloud-consumer-hystrix-dashboard</p><p>2、POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--引入自己定义的api通用包,可以使用Dept部门Entity--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservicecloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--动态获取版本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--hystrix和hystrix-dashboard相关依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 9001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、主启动类改名+新注解@EnableHystrixDashboard</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableHystrixDashboardpublic class DeptProviderConsumer_DashBoard_App {    public static void main(String[] args) {        SpringApplication.run(DeptProviderConsumer_DashBoard_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、所有Provider微服务提供类(8001/8002/8003)都需要监控依赖配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--actuator,监控信息完善--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、启动microservicecloud-consumer-hystrix-dashboard该微服务监控消费端</p><p>访问地址：<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a> ，出现如下图所示则配置启动成功</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019233318777.png" alt="image-20221019233318777"></p><p>7、启动3个eureka集群，顺序：7001、7002、7003</p><p>8、启动microservicecloud-provider-dept-hystrix-8001</p><p>访问：<a href="http://localhost:8001/dept/6">http://localhost:8001/dept/6</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019234102379.png" alt="image-20221019234102379"></p><p>访问：<a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019234143004.png" alt="image-20221019234143004"></p><p>9、启动的相关微服务工程</p><p><strong>eureka集群，顺序：7001、7002、7003、microservicecloud-provider-dept-hystrix-8001、microservicecloud-consumer-hystrix-dashboard</strong></p><p>10、监控测试</p><ul><li><p>多次刷新<a href="http://localhost:8001/dept/6">http://localhost:8001/dept/6</a></p></li><li><p>观察监控窗口</p><ul><li>填写监控地址 ：<a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a></li><li>监控结果</li><li>如何看?</li><li>搞懂一个才能看懂复杂的</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019235509139.png" alt="image-20221019235509139"></p><p> Delay：该参数用来控制服务器上轮询监控信息的延迟时间，默认为2000毫秒，可以通过配置该属性来降低客户端的网络和CPU消耗。</p><p>Title：该参数对应了头部标题Hystrix Stream之后的内容，默认会使用具体监控实例的URL，可以通过配置该信息来展示更合适的标题。</p><p><strong>监控结果</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020000357309.png" alt="image-20221020000357309"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221019235949369.png" alt="image-20221019235949369"></p><p><strong>如何看？</strong></p><p>7色、1圈、1线</p><p>实心圆:共有两种含义。它通过颜色的变化代表了实例的健康程度，它的健康度从碌色&lt;黄色&lt;橙色&lt;红色递减。</p><p>该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现==故障实例和高压力实例==。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020000200054.png" alt="image-20221020000200054"></p><h3 id="zuul路由网关"><a href="#zuul路由网关" class="headerlink" title="zuul路由网关"></a>zuul路由网关</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p>Zuul包含了对请求的路由和过滤两个最主要的功能:</p><p>其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础，Zuul和Eureka进行整合,将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他微服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。</p><p>==<strong>注意：Zuul服务最终还是会注册进Eureka</strong>==</p><p>==<strong>提供=代理+路由+过滤三大功能</strong>==</p><p><strong>官网资料：<a href="https://github.com/Netflix/zuul/wiki/Getting-Started">https://github.com/Netflix/zuul/wiki/Getting-Started</a></strong></p><h4 id="路由基本配置"><a href="#路由基本配置" class="headerlink" title="路由基本配置"></a>路由基本配置</h4><p>新建Module模块microservicecloud-zuul-gateway-9527</p><p>POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--zuul路由网关--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--actuator,监控信息完善--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--引入自己定义的api通用包,可以使用Dept部门Entity--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>microservicecloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--hystrix容错--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 9527spring:  application:    name: microservicecloud-zuul-gateway  #应用名称(即对外暴露的微服务名称)  eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(集群版)    prefer-same-zone-eureka: true  #访问路径可以显示IP地址  instance:    instance-id: gateway-9527.com       #自定义服务名称信息info:  app.name: lt-microservicecloud    #app名称  company.name: www.baidu.com      #公司名称  build.artifactId: $project.artifactId$   #构建工程  build.version: $project.version$   #构建版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hosts修改，添加一下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1    gateway-9527.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主启动类必须添加<code>@EnableZuulProxy </code>注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableZuulProxy   //开启Zuul网关注解支持public class Zuul_9527_StartSpringCloud_App {    public static void main(String[] args) {        SpringApplication.run(Zuul_9527_StartSpringCloud_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><p>第一步、三个eureka集群，顺序：7001、7002、7003</p><p>第二部、一个服务提供类microservicecloud-provider-dept-8001</p><p>第三步、—个路由即Zuul_9527_StartSpringCloud_App</p><p>测试</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020003308686.png" alt="image-20221020003308686"></p><p>第一种测试：不用路由，直接访问<a href="http://localhost:8001/dept/6">http://localhost:8001/dept/6</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020003507874.png" alt="image-20221020003507874"></p><p>第二测试：使用路由访问：<a href="http://localhost:9527/microservicecloud-dept/dept/6%E6%88%96http://gateway-9527.com:9527/microservicecloud-dept/dept/6">http://localhost:9527/microservicecloud-dept/dept/6或http://gateway-9527.com:9527/microservicecloud-dept/dept/6</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020003656802.png" alt="image-20221020003656802"></p><h4 id="路由访问映射规则"><a href="#路由访问映射规则" class="headerlink" title="路由访问映射规则"></a>路由访问映射规则</h4><p><strong>以工程microservicecloud-zuul-gateway-9527为例</strong></p><h5 id="代理名称"><a href="#代理名称" class="headerlink" title="代理名称"></a>代理名称</h5><p>YML </p><p>没有加代理名称之前的访问路径：<a href="http://localhost:9527/microservicecloud-dept/dept/6">http://localhost:9527/microservicecloud-dept/dept/6</a></p><p>添加代理名称</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">zuul:  routes:    mydept.serviceId: microservicecloud-dept    mydept.path : /mydept/**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020103133847.png" alt="image-20221020103133847"></p><p>添加代理名称之后的访问路径：<a href="http://localhost:9527/mydept/dept/6">http://localhost:9527/mydept/dept/6</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020103824140.png" alt="image-20221020103824140"></p><p><strong>此时问题</strong></p><p>路由的访问路径：<a href="http://localhost:9527/mydept/dept/6%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E3%80%81%E6%B2%A1%E6%9C%89%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E4%BB%A3%E7%90%86%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%9Ahttp://localhost:9527/microservicecloud-dept/dept/6%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E3%80%82%E8%A7%A3%E5%86%B3%E8%BF%99%E6%A0%B7%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98%EF%BC%8C%E9%9C%80%E8%A6%81%E5%BF%BD%E7%95%A5%E5%85%83%E7%9C%9F%E5%AE%9E%E6%9C%8D%E5%8A%A1%E5%90%8D%EF%BC%8C%E4%B8%8B%E9%9D%A2%E7%BB%99%E5%87%BA%E3%80%82">http://localhost:9527/mydept/dept/6可以访问、没有添加路由代理时的路径：http://localhost:9527/microservicecloud-dept/dept/6也可以访问。解决这样安全性问题，需要忽略元真实服务名，下面给出。</a></p><h5 id="原真实服务名忽略"><a href="#原真实服务名忽略" class="headerlink" title="原真实服务名忽略"></a>原真实服务名忽略</h5><p>在application.yaml配置文件添加如下的内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">ignored-services: microservicecloud-dept      #忽略真实服务名（单体的情况）ignored-services: "*"      #忽略真实服务名（多体，即集群的情况）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020104428938.png" alt="image-20221020104428938"></p><p>此时，没有添加路由代理时的路径：<a href="http://localhost:9527/microservicecloud-dept/dept/6%E5%B0%B1%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E4%BA%86">http://localhost:9527/microservicecloud-dept/dept/6就不能访问了</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020104951103.png" alt="image-20221020104951103"></p><h5 id="设置统一公共前缀"><a href="#设置统一公共前缀" class="headerlink" title="设置统一公共前缀"></a>设置统一公共前缀</h5><p>在application.yaml添加如下的内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">prefix: /cloud   #设置同意公共前缀，访问如：http://localhost:9527/cloud/mydept/dept/6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020105802685.png" alt="image-20221020105802685"></p><p>此时访问路径为：<a href="http://localhost:9527/cloud/mydept/dept/6%EF%BC%8Chttp://localhost:9527/mydept/dept/6%E5%B0%B1%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E4%BA%86">http://localhost:9527/cloud/mydept/dept/6，http://localhost:9527/mydept/dept/6就不能访问了</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020105657437.png" alt="image-20221020105657437"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020105900841.png" alt="image-20221020105900841"></p><p>最后完整的YML文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 9527spring:  application:    name: microservicecloud-zuul-gateway  #应用名称(即对外暴露的微服务名称)eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/   #客户端注册进eureka服务列表内(即服务端暴露出来的ip地址)(集群版)    prefer-same-zone-eureka: true  #访问路径可以显示IP地址  instance:    instance-id: gateway-9527.com       #自定义服务名称信息zuul:  ignored-services: microservicecloud-dept      #忽略真实服务名  routes:    mydept.serviceId: microservicecloud-dept    mydept.path : /mydept/**            #路由映射，如http://localhost:9527/mydept/dept/6  prefix: /cloud   #设置同意公共前缀，访问如：http://localhost:9527/cloud/mydept/dept/6info:  app.name: lt-microservicecloud    #app名称  company.name: www.baidu.com      #公司名称  build.artifactId: $project.artifactId$   #构建工程  build.version: $project.version$   #构建版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SpringCloud-Config分布式配置中心"><a href="#SpringCloud-Config分布式配置中心" class="headerlink" title="SpringCloud Config分布式配置中心"></a>SpringCloud Config分布式配置中心</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><h5 id="分布式系统面临的—配置问题"><a href="#分布式系统面临的—配置问题" class="headerlink" title="分布式系统面临的—配置问题"></a>分布式系统面临的—配置问题</h5><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理就面临这繁琐的操作</p><h5 id="是什么？-1"><a href="#是什么？-1" class="headerlink" title="是什么？"></a>是什么？</h5><p>是一个==中心化的外部配置==。SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为==各个不同微服务应用==的所有环境提供了一个==中心化的外部配置==。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020123430982.png" alt="image-20221020123430982"></p><p>SpringCloud Config分为==服务端==和==客户端==两部分。</p><p><strong>服务端</strong>也称为==分布式配置中心，它是一个独立的微服务应用==，用来配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</p><p><strong>客户端</strong>则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p><h5 id="能干嘛？-1"><a href="#能干嘛？-1" class="headerlink" title="能干嘛？"></a>能干嘛？</h5><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><h5 id="与GitHub整合配置"><a href="#与GitHub整合配置" class="headerlink" title="与GitHub整合配置"></a>与GitHub整合配置</h5><p>由于SpringCloud Config默认使用Git来存储配置文件(也有其它方式，比如支持SVN和本地文件)，但最推荐的还是Git，而且使用的是http/https访问的形式</p><h4 id="SpringCloud-Config服务端配置"><a href="#SpringCloud-Config服务端配置" class="headerlink" title="SpringCloud Config服务端配置"></a>SpringCloud Config服务端配置</h4><h5 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h5><p>第一步、用自己的GitHub账号在GitHub上新建一个名为microservicecloud-config的新Repository</p><p>第二步、由上一步获得SSH协议的git地址<a href="mailto:git@github.com">git@github.com</a>:rookiesnewbie/microservicecloud-config.git</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020125407171.png" alt="image-20221020125407171"></p><p>第三步、本地硬盘目录上新建git仓库（springcloud-microservicecloud-config目录）并clone</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https://github.com/rookiesnewbie/microservicecloud-config.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四步、在本地D:\Java\springcloud-microservicecloud-config里面新建一个application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  profiles:     active:    - dev    ---spring:  profiles: dev #开发环境  applcation:    name: microservicecloud-config-dev    ---    spring:  profiles: test #测试环境  applcation:    name: microservicecloud-config-test  #注意：编码必须是UTF-8的格式！！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步、将上一步的YML文件推送到github上</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020131242877.png" alt="image-20221020131242877"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add application.ymlgit commit -m "init file"git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第六步、新建Module模块microservicecloud-config-3344，它即为Cloud的配置中心模块</p><p>第七步、POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloudConfig server--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--避免Config的git插件报错--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.eclipse.jgit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>org.eclipse.jgit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.10.0.201712302008-r<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--图形监控--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--hystrix服务熔断依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第八步、编写YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 3344spring:  application:    name: microservicecloud-config  #应用名称(即对外暴露的微服务名称)  cloud:    config:      server:        git:#          uri: https://github.com/rookiesnewbie/microservicecloud-config.git  #GitHub上面的git仓库名字          uri: https://gitee.com/lisircode/microservicecloud-config.git  #Gitee上面的git仓库名字          username: lisircode      #Gitee用户名          password: liteng0220    #Gitee用户密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第九步、主启动类Config_3344_StartSpringCloudApp</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableConfigServer  //开启SpringCloud Config配置中心注解支持public class Config_3344_StartSpringCloudApp {    public static void main(String[] args) {        SpringApplication.run(Config_3344_StartSpringCloudApp.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第十步\windows下修改hosts文件，增加映射</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 config-3344.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第十一步、测试通过Config微服务是否可以从GitHub上获取配置内容</p><p>启动微服务3344</p><p><a href="http://localhost:3344/application-dev.yml">http://localhost:3344/application-dev.yml</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020143019801.png" alt="image-20221020143019801"></p><p><a href="http://localhost:3344/application-test.yml">http://localhost:3344/application-test.yml</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020142752594.png" alt="image-20221020142752594"></p><p><a href="http://config-3344.com:3344/application-xxx.yml(%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E9%85%8D%E7%BD%AE)">http://config-3344.com:3344/application-xxx.yml(不存在的配置)</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020143206687.png" alt="image-20221020143206687"></p><h5 id="配置读取规则"><a href="#配置读取规则" class="headerlink" title="配置读取规则"></a>配置读取规则</h5><p>官网<img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020144434685.png" alt="image-20221020144434685"></p><ul><li><p>/{application}-{profile}.yml，此方式就是上面的访问方式</p></li><li><p>/{application}/{profile}[/{label}]，例如：<a href="http://localhost:3344/application/dev/master%E3%80%81http://localhost:3344/application/test/master">http://localhost:3344/application/dev/master、http://localhost:3344/application/test/master</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020143720383.png" alt="image-20221020143720383"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020144015181.png" alt="image-20221020144015181"></p></li><li><p>/{label}/{application}-{profile}.yml，例如：<a href="http://localhost:3344/master/application-dev.yml%E3%80%81http://localhost:3344/master/application-test.yml">http://localhost:3344/master/application-dev.yml、http://localhost:3344/master/application-test.yml</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020144228800.png" alt="image-20221020144228800"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020144324004.png" alt="image-20221020144324004"></p></li></ul><p>成功实现了用SpringCloud Config通过GitHub获取配置信息</p><h4 id="SpringCloud-Config客户端配置与测试"><a href="#SpringCloud-Config客户端配置与测试" class="headerlink" title="SpringCloud Config客户端配置与测试"></a>SpringCloud Config客户端配置与测试</h4><p>在本地D:\Java\springcloud-microservicecloud-config路径下新建文件microservicecloud-config-client.yml</p><p>microservicecloud-config-client.yml内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  profiles:     active:    - dev    ---server:  port: 8201spring:  profiles: dev #开发环境  applcation:    name: microservicecloud-config-client    eureka:  client:    service-url:      defaultZone: http://eureka-dev.com:7001/eureka/---server:  port: 8202spring:  profiles: test #开发环境  applcation:    name: microservicecloud-config-client    eureka:  client:    service-url:      defaultZone: http://eureka-test.com:7001/eureka/      #注意：编码必须是UTF-8的格式！！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上一步的microservicecloud-config-client.yml文件提交到GitHub中</p><p>新建microservicecloud-config-client-3355</p><p>POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloudConfig server--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--避免Config的git插件报错--&gt;</span>    <span class="token comment">&lt;!--&lt;dependency&gt;        &lt;groupId&gt;org.eclipse.jgit&lt;/groupId&gt;        &lt;artifactId&gt;org.eclipse.jgit&lt;/artifactId&gt;        &lt;version&gt;4.10.0.201712302008-r&lt;/version&gt;    &lt;/dependency&gt;--&gt;</span>    <span class="token comment">&lt;!--图形监控--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--hystrix服务熔断依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bootstrap.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  cloud:    config:      name: microservicecloud-config-client #需要从github上读取的资源名称，注意没有yml后缀名      profile: dev #本次访问的配置项      label: master      uri: http://config-334.com:3344 #本微服务启动后先去找3344号服务，通过SpringCloudConfig获取GitHub的服务地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  application:    name: microservicecloud-config-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>windows下修改hosts文件，增加映射</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1    client-config.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建rest类，验证是否能从GitHub上读取配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class ConfigClientRest {    @Value("${spring.application.name}")    private String applicationName;    @Value("${eureka.client.service-url.defaultZone}")    private String eurekaServers;    @Value("${server.port}")    private String port;    @GetMapping("/config")    public String getConfig(){        String str = "applicationName：" + applicationName + "\t"                +"eurekaServers：" + eurekaServers +"\t" + "port："+port;        System.out.println("************str："+str);        return str;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类ConfigClient_3355_StartSpringCloudApp</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class ConfigClient_3355_StartSpringCloudApp {    public static void main(String[] args) {        SpringApplication.run(ConfigClient_3355_StartSpringCloudApp.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：先启动3344、在启动3355 访问：<a href="http://localhost:8201/config">http://localhost:8201/config</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020171131439.png" alt="image-20221020171131439"></p><p>成功实现了客户端3355访问SpringCloud Config3344通过GitHub获取配置信息</p><p>若启动3355报如下的错误，无法加载到bootstrap.yml配置文件</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020171725438.png" alt="image-20221020171725438"></p><p>这是springcloud的版本问题导致的</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020171843161.png" alt="image-20221020171843161"></p><p>解决方法，添加bootstrap的maven坐标即可，也有可能是3344请求超时导致的</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 自行修改相应版本--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>applicaiton. yml是用户级的资源配置项</strong></p><p><strong>bootstrap.yml是系统级的，==优先级更加高</strong>==</p><p>Spring Cloud会创建一个Bootstrap Context，作为Spring应用的<code>Application Context</code>的==父上下文==。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment'。</code>Bootstrap<code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。</code></p><p>Bootstrap context和Application Context有着不同的约定，所以新增了一个bootstrap.yml文件，保证<code>Bootstrap Context</code>和<code>Application Context</code>配置的分离。</p><h4 id="SpringCloud-Config配置实战"><a href="#SpringCloud-Config配置实战" class="headerlink" title="SpringCloud Config配置实战"></a>SpringCloud Config配置实战</h4><h5 id="Git配置文件本地配置"><a href="#Git配置文件本地配置" class="headerlink" title="Git配置文件本地配置"></a>Git配置文件本地配置</h5><p>第一步、在本地D:\Java\springcloud-microservicecloud-config路径下新建文件microservicecloud-config-eureka-client.yml</p><p>第二步、编写microservicecloud-config-eureka-client.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  profiles:     active:    - dev    ---server:  port: 7001spring:  profiles: dev #开发环境  application:    name: microservicecloud-config-eureka-client    eureka:  instance:    hostname: eureka7001.com  client:    register-with-eureka: false   #false表示7001不向注册中心注册自己。    fetch-registry: false   #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:       defaultZone: http://eureka7001.com:7001/eureka/---server:  port: 7001spring:  profiles: test #测试环境  application:    name: microservicecloud-config-eureka-client    eureka:  instance:    hostname: eureka7001.com  client:    register-with-eureka: false   #false表示7001不向注册中心注册自己。    fetch-registry: false   #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:       defaultZone: http://eureka7001.com:7001/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步、在本地D:\Java\springcloud-microservicecloud-config路径下新建文件microservicecloud-config-dept-client.yml</p><p>第四步、编写microservicecloud-config-dept-client.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  profiles:     active:    - dev    ---server:  port: 8001spring:  profiles: dev #开发环境  application:    name: microservicecloud-config-dept-client  datasource:    type: com.alibaba.druid.pool.DruidDataSource    #当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver      #MySQL驱动包    url: jdbc:mysql://localhost:3306/clouddb01?  #数据库名    username: root    password: liteng0220    dbcp2:      min-idle: 5          #数据库连接池的最小维持连接数      initial-size: 5     #初始化连接数      max-total: 5              #最大连接数      max-wait-millis: 200    #等待连接获取的最大超时时间  mybatis:  config-location: classpath:mybatis/mybatis.cfg.xml                            #mybatis配置文件  type-aliases-package: com.example.springcloud.entity                  #所有的entity别名类所在的位置  mapper-locations:    - classpath:mybatis/mapper/**/*.xml                                 #mapper映射文件  eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/    prefer-same-zone-eureka: true  #访问路径可以显示IP地址  instance:    instance-id: microservicecloud-dept8001       #自定义服务名称信息---server:  port: 8001spring:  profiles: test  #测试环境  application:    name: microservicecloud-config-dept-client  datasource:    type: com.alibaba.druid.pool.DruidDataSource    #当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver      #MySQL驱动包    url: jdbc:mysql://localhost:3306/clouddb02?  #数据库名    username: root    password: liteng0220    dbcp2:      min-idle: 5          #数据库连接池的最小维持连接数      initial-size: 5     #初始化连接数      max-total: 5              #最大连接数      max-wait-millis: 200    #等待连接获取的最大超时时间  mybatis:  config-location: classpath:mybatis/mybatis.cfg.xml                            #mybatis配置文件  type-aliases-package: com.example.springcloud.entity                  #所有的entity别名类所在的位置  mapper-locations:    - classpath:mybatis/mapper/**/*.xml                                 #mapper映射文件  eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/    prefer-same-zone-eureka: true  #访问路径可以显示IP地址  instance:    instance-id: microservicecloud-dept8001       #自定义服务名称信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Config版的eureka服务端"><a href="#Config版的eureka服务端" class="headerlink" title="Config版的eureka服务端"></a>Config版的eureka服务端</h5><h6 id="新建工程microservicecloud-config-eureka-client-7001"><a href="#新建工程microservicecloud-config-eureka-client-7001" class="headerlink" title="新建工程microservicecloud-config-eureka-client-7001"></a>新建工程microservicecloud-config-eureka-client-7001</h6><h6 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h6><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--eureka服务端--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springloaded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloudConfig 客户端--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h6><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  cloud:    config:      name: microservicecloud-config-eureka-client #需要从github上读取的资源名称，注意没有yml后缀名      profile: dev      label: master      uri: http://localhost:3344   #SpringCloudConfig获取的服务地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h6><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  application:    name: microservicecloud-config-eureka-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="主启动类Config-Git-EurekaServerApplication"><a href="#主启动类Config-Git-EurekaServerApplication" class="headerlink" title="主启动类Config Git EurekaServerApplication"></a>主启动类Config Git EurekaServerApplication</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaServer  //EurekaServer服务器端启动类,接受其它微服务注册进来public class Config_Git_EurekaServer7001_App {    public static void main(String[] args) {        SpringApplication.run(Config_Git_EurekaServer7001_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>先启动3344、再启动Config_Git_EurekaServer7001_App最后访问：<a href="http://localhost:7001/%EF%BC%8C%E5%87%BA%E7%8E%B0eureak%E4%B8%BB%E9%A1%B5%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%E5%90%AF%E5%8A%A8">http://localhost:7001/，出现eureak主页表示成功启动</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020215400293.png" alt="image-20221020215400293"></p><h5 id="Config版的dept微服务"><a href="#Config版的dept微服务" class="headerlink" title="Config版的dept微服务"></a>Config版的dept微服务</h5><h6 id="参考之前的8001拷贝后新建工程microservicecloud-config-dept-client-8001"><a href="#参考之前的8001拷贝后新建工程microservicecloud-config-dept-client-8001" class="headerlink" title="参考之前的8001拷贝后新建工程microservicecloud-config-dept-client-8001"></a>参考之前的8001拷贝后新建工程microservicecloud-config-dept-client-8001</h6><h6 id="POM-1"><a href="#POM-1" class="headerlink" title="POM"></a>POM</h6><h6 id="bootstrap-yml-1"><a href="#bootstrap-yml-1" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h6><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">spring:  cloud:    config:      name: microservicecloud-config-dept-client  #需要从github上读取的资源名称，注意没有yml后缀名      profile: test      label: master      uri: http://localhost:3344   #本微服务启动后先去找3344号服务，通过SpringCloudConfig获取GitHub的服务地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h6><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">spring:  application:    name: microservicecloud-config-dept-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="主启动类及其它一套业务逻辑代码（直接拷贝microservicecloud-provider-dept-8001）"><a href="#主启动类及其它一套业务逻辑代码（直接拷贝microservicecloud-provider-dept-8001）" class="headerlink" title="主启动类及其它一套业务逻辑代码（直接拷贝microservicecloud-provider-dept-8001）"></a>主启动类及其它一套业务逻辑代码（直接拷贝microservicecloud-provider-dept-8001）</h6><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootApplication@EnableEurekaClient   //本服务启动后会自动注册进eureka服务中@EnableDiscoveryClient  //服务发现public class Config_Git_DeptProvider8001_App {    public static void main(String[] args) {        SpringApplication.run(Config_Git_DeptProvider8001_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020213250397.png" alt="image-20221020213250397"></p><h6 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h6><p>先启动3344再启动Config_Git_EurekaServer7001_App，最后启动Config_Git_DeptProvider8001_App</p><p><strong>访问：<a href="http://localhost:8001/dept/list">http://localhost:8001/dept/list</a></strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020220218393.png" alt="image-20221020220218393"></p><h2 id="第二季"><a href="#第二季" class="headerlink" title="第二季"></a>第二季</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020235508032.png" alt="image-20221020235508032"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021000320182.png" alt="image-20221021000320182"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020235557797.png" alt="image-20221020235557797"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221020235807314.png" alt="image-20221020235807314"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021000116765.png" alt="image-20221021000116765"></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="springboot版本选择"><a href="#springboot版本选择" class="headerlink" title="springboot版本选择"></a>springboot版本选择</h4><h4 id="git源码地址：https-github-com-spring-projects-spring-boot-releases"><a href="#git源码地址：https-github-com-spring-projects-spring-boot-releases" class="headerlink" title="git源码地址：https://github.com/spring-projects/spring-boot/releases/"></a>git源码地址：<a href="https://github.com/spring-projects/spring-boot/releases/">https://github.com/spring-projects/spring-boot/releases/</a></h4><h4 id="Springboot2-0新特性：https-github-com-spring-projects-spring-boot-wiki-Spring-Boot-2-0-Release-Notes"><a href="#Springboot2-0新特性：https-github-com-spring-projects-spring-boot-wiki-Spring-Boot-2-0-Release-Notes" class="headerlink" title="Springboot2.0新特性：https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes"></a>Springboot2.0新特性：<a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes</a></h4><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221021001225496.png" alt="image-20221021001225496"></p><h4 id="Springcloud版本选择"><a href="#Springcloud版本选择" class="headerlink" title="Springcloud版本选择"></a>Springcloud版本选择</h4><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221021001539484.png" alt="image-20221021001539484"></p><h4 id="springcloud官网：https-spring-io-projects-spring-cloud"><a href="#springcloud官网：https-spring-io-projects-spring-cloud" class="headerlink" title="springcloud官网：https://spring.io/projects/spring-cloud"></a>springcloud官网：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></h4><h4 id="git源码地址：https-github-com-spring-projects-spring-cloud"><a href="#git源码地址：https-github-com-spring-projects-spring-cloud" class="headerlink" title="git源码地址：https://github.com/spring-projects/spring-cloud"></a>git源码地址：<a href="https://github.com/spring-projects/spring-cloud">https://github.com/spring-projects/spring-cloud</a></h4><h4 id="Springcloud和Springboot之间的依赖关系"><a href="#Springcloud和Springboot之间的依赖关系" class="headerlink" title="Springcloud和Springboot之间的依赖关系"></a>Springcloud和Springboot之间的依赖关系</h4><p>官网：<a href="https://spring.io/projects/spring-cloud#overview">https://spring.io/projects/spring-cloud#overview</a></p><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221021001955077.png" alt="image-20221021001955077"></p><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><p>Finchley 是基于 Spring Boot 2.0.x 构建的不再 Boot 1.5.x<br>        Dalston 和 Edgware 是基于 Spring Boot 1.5.x 构建的，不支持 Spring Boot 2.0.x<br>        Camden 构建于 Spring Boot 1.4.x，但依然能支持 Spring Boot 1.5.x</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021002023227.png" alt="image-20221021002023227"></p><p>​p><h5 id="springboot与spring-cloud版本对应关系"><a href="#springboot与spring-cloud版本对应关系" class="headerlink" title="springboot与spring cloud版本对应关系"></a>springboot与spring cloud版本对应关系</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021002516942.png" alt="image-20221021002516942"></p><p>本次版本选择</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021002820483.png" alt="image-20221021002820483"></p><h5 id="2-x版本常用的pom组件"><a href="#2-x版本常用的pom组件" class="headerlink" title="2.x版本常用的pom组件"></a>2.x版本常用的pom组件</h5><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>springcloud：<a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/">https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/</a></p><p>springcloud中文官网：<a href="https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md">https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md</a></p><p>springboot：<a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/">https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/</a></p><p><strong>更详细的版本对应查看方法<a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a></strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021002508031.png" alt="image-20221021002508031"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021003858579.png" alt="image-20221021003858579"></p><h3 id="微服务架构编码构建"><a href="#微服务架构编码构建" class="headerlink" title="微服务架构编码构建"></a>微服务架构编码构建</h3><p>==注意：约定&gt;配置&gt;编码==</p><h4 id="创建微服务整体父工程步骤："><a href="#创建微服务整体父工程步骤：" class="headerlink" title="创建微服务整体父工程步骤："></a>创建微服务整体父工程步骤：</h4><p>1、new project</p><p>2、聚合总父工程名字</p><p>3、maven版本选择</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021103254481.png" alt="image-20221021103254481"></p><p>4、工程名字</p><p>5、字符编码</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021102249602.png" alt="image-20221021102249602"></p><p>6、注解生效激活</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021102526930.png" alt="image-20221021102526930"></p><p>7、Java编译版本选择8</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021102656802.png" alt="image-20221021102656802"></p><p>8、FileType过滤</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021103118035.png" alt="image-20221021103118035"></p><h4 id="父工程pom"><a href="#父工程pom" class="headerlink" title="父工程pom"></a>父工程pom</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021103702365.png" alt="image-20221021103702365"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 统一管理jar包版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--spring boot 2.2.2--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reporting</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-project-info-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reporting</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Maven使用dependencyManagement元素来提供了一种管理依赖版本号的方式。==通常会在一个组织或者项目的最顶层的父POM中看到dependencyManagement元素.==</p><p>==dependencyManagement里只是声明依赖，<strong>并不实现引入</strong>，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom；如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。==</p><p>使用pom.xml 中的dependencyManagement 元素能让所有在子项目中引用一个依赖而不用显式的列出版本号。Maven 会沿着父子层次向上走，直到找到一个拥有dependencyManagement 元素的项目，然后它就会使用这个dependencyManagement 元素中指定的版本号。</p><p>这样做的好处就是：如果有多个子项目都引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要一个一个子项目的修改 ；另外如果某个子项目需要另外的一个版本，只需要声version就可。</p><ul><li><pre><code>dependencyManagement里只是声明依赖，==并不实现引入==，因此子项目需要显示的声明需要用的依赖。</code></pre></li><li><p>如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，<br> 才会从父项目中继承该项，并且version和scope都读取自父pom;</p></li><li><pre><code>如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</code></pre></li></ul><h4 id="maven中跳过单元测试"><a href="#maven中跳过单元测试" class="headerlink" title="maven中跳过单元测试"></a>maven中跳过单元测试</h4><p> 1、配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- maven中跳过单元测试 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、 IDEA工具支持(推荐)</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021112954897.png" alt="image-20221021112954897"></p><h5 id="父工程创建完成执行mvn-install将父工程发布到仓库方便子工程继承"><a href="#父工程创建完成执行mvn-install将父工程发布到仓库方便子工程继承" class="headerlink" title="父工程创建完成执行mvn:install将父工程发布到仓库方便子工程继承"></a>父工程创建完成执行mvn:install将父工程发布到仓库方便子工程继承</h5><h4 id="MySQL驱动说明"><a href="#MySQL驱动说明" class="headerlink" title="MySQL驱动说明"></a>MySQL驱动说明</h4><p>com.mysql.jdbc.Driver和mysql-connector-java 5一起用。</p><p>com.mysql.cj.jdbc.Driver和mysql-connector-java 6 一起用。</p><p>com.mysql.cj.jdbc.Driver是mysql-connector-java 6 中的特性，相比mysql-connector-java 5 多了一个时区：serverTimezone，把数据源配置的驱动改一下就好了</p><p>org.gjt.mm.mysql.Driver是当时最好的MySQL JDBC，但不是MySQL公司的，然后MySQL将MM的JDBC驱动 收为官方的JDBC驱动，所以将驱动的package也改了，但还保留了org.gjt.mm.mysql.Driver这个路径的引用，也就是你使用新版的JDBC驱动时还可以通过这个来引用，打开下载的新版JDBC驱动的jar文件可以看到，只有一个文件的目录是org.gjt.mm.mysql，就是为了兼容而设计的。</p><h3 id="Rest微服务工程构建"><a href="#Rest微服务工程构建" class="headerlink" title="Rest微服务工程构建"></a>Rest微服务工程构建</h3><h4 id="一、创建模块"><a href="#一、创建模块" class="headerlink" title="一、创建模块"></a>一、创建模块</h4><p>1、创建cloud-provider-payment8001微服务提供者支付Module模块</p><p>2、该pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql-connector-java--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--jdbc--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、写yml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> server:  port: 8001spring:  application:    name: cloud-payment-service  datasource:    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包 com.mysql.jdbc.Driver    url: jdbc:mysql://localhost:3306/cloud_mayment?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false    username: root    password: 123456mybatis:  mapperLocations: classpath:mapper/*.xml  type-aliases-package: com.example.entities    # 所有Entity别名类所在包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class MainApp8001{    public static void main(String[] args)    {        SpringApplication.run(MainApp8001.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、编写业务类"><a href="#二、编写业务类" class="headerlink" title="二、编写业务类"></a>二、编写业务类</h4><p>1、建表SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP DATABASE if EXISTS cloud_payment;CREATE DATABASE cloud_payment CHARACTER set utf8;use cloud_payment; CREATE TABLE `payment` (  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',  `serial` varchar(200) DEFAULT '',  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、entities</p><p>主实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class Payment implements Serializable{    private Long id;    private String serial;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Json封装体CommonResult</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class CommonResult&lt;T&gt;{    private Integer code;    private String  message;    private T data;    public CommonResult(Integer code, String message)    {        this(code,message,null);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、mapper</p><p>接口PaymentMapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapper  //import org.apache.ibatis.annotations.Mapper;public interface PaymentDao{    public int create(Payment payment);    public Payment getPaymentById(@Param("id") Long id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybaits的映射文件PaymentMapper.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.mapper.PaymentMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.entities.Payment<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serial<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serial<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Payment<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        INSERT INTO payment(SERIAL) VALUES(#{serial});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getPaymentById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Long<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>        SELECT * FROM payment WHERE id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、service</p><p>接口PaymentService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface PaymentService{    public int create(Payment payment);    public Payment getPaymentById(@Param("id") Long id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class PaymentServiceImpl implements PaymentService{    @Resource    private PaymentMapper paymentMapper;    @Override    public int create(Payment payment)    {        return paymentMapper.create(payment);    }    @Override    public Payment getPaymentById(Long id)    {        return paymentMapper.getPaymentById(id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4jpublic class PaymentController{    @Resource    private PaymentService paymentService;    @PostMapping(value = "/payment/create")    public CommonResult create(@RequestBody Payment payment)    {        int result = paymentService.create(payment);        log.info("*****插入操作返回结果:" + result);        if(result &gt; 0)        {            return new CommonResult(200,"插入数据库成功",result);        }else{            return new CommonResult(444,"插入数据库失败",null);        }    }    @GetMapping(value = "/payment/get/{id}")    public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable("id") Long id)    {        Payment payment = paymentService.getPaymentById(id);        log.info("*****查询结果:{}",payment);        if (payment != null) {            return new CommonResult(200,"查询成功",payment);        }else{            return new CommonResult(444,"没有对应记录,查询ID: "+id,null);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li><p>建module</p></li><li><p>改POM</p></li><li><p>写YML</p></li><li><p>主启动</p></li><li><p>业务类</p></li></ul><h4 id="三、热部署"><a href="#三、热部署" class="headerlink" title="三、热部署"></a>三、热部署</h4><h5 id="1、Adding-devtools-to-your-project"><a href="#1、Adding-devtools-to-your-project" class="headerlink" title="1、Adding devtools to your project"></a>1、Adding devtools to your project</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、Adding-plugin-to-your-pom-xml"><a href="#2、Adding-plugin-to-your-pom-xml" class="headerlink" title="2、Adding plugin to your pom.xml"></a>2、Adding plugin to your pom.xml</h5><p>下段配置我们粘贴进聚合父类总工程的pom.xml里</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>你自己的工程名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、Enabling-automatic-build"><a href="#3、Enabling-automatic-build" class="headerlink" title="3、Enabling automatic build"></a>3、Enabling automatic build</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021131656103.png" alt="image-20221021131656103"></p><h5 id="4、Update-the-value-of"><a href="#4、Update-the-value-of" class="headerlink" title="4、Update the value of"></a>4、Update the value of</h5><p>在idea按下快捷键<code>ctrl+shif+alt+/</code>，然后点开Registry</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021132047252.png" alt="image-20221021132047252"></p><h5 id="5、重启idea"><a href="#5、重启idea" class="headerlink" title="5、重启idea"></a>5、重启idea</h5><h4 id="cloud-consumer-order80微服务消费者订单Module模块"><a href="#cloud-consumer-order80微服务消费者订单Module模块" class="headerlink" title="cloud-consumer-order80微服务消费者订单Module模块"></a>cloud-consumer-order80微服务消费者订单Module模块</h4><p>pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud190805<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-consumer-order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class MainApp80{    public static void main(String[] args)    {        SpringApplication.run(MainApp80.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class Payment implements Serializable{    private Long id;    private String serial;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Json封装体CommonResult</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CommonResult&lt;T&gt;{    private Integer code;    private String message;    private T data;    public CommonResult()    {    }    public CommonResult(Integer code, String message, T data)    {        this.code = code;        this.message = message;        this.data = data;    }    public CommonResult( Integer code,String message) {        this( code, message,null);    }    public CommonResult(T data) {        this(200, "操作成功", data);    }    //setter--getter    public T getData() {        return data;    }    public void setData(T data) {        this.data = data;    }    public String getMessage() {        return message;    }    public void setMessage(String message) {        this.message = message;    }    public Integer getCode() {        return code;    }    public void setCode(Integer code) {        this.code = code;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RestTemplate提供了多种便捷访问远程Http服务的方法，<br>是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的==客户端模板工具集==</p><p>官网地址：<a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p><p>使用restTemplate访问restful接口非常的简单粗暴无脑。<br>(url, requestMap, ResponseBean.class)这三个参数分别代表<br>REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。</p><p>配置类</p><p>ApplicationContextConfig</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ApplicationContextConfig{    @Bean    public RestTemplate restTemplate()    {        return new RestTemplate();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class OrderController{    public static final String PaymentSrv_URL = "http://localhost:8001";    @Autowired    private RestTemplate restTemplate;    @GetMapping("/consumer/payment/create") //客户端用浏览器是get请求，但是底层实质发送post调用服务端8001    public CommonResult create(Payment payment)    {        return restTemplate.postForObject(PaymentSrv_URL + "/payment/create",payment,CommonResult.class);    }    @GetMapping("/consumer/payment/get/{id}")    public CommonResult getPayment(@PathVariable Long id)    {        return restTemplate.getForObject(PaymentSrv_URL + "/payment/get/"+id, CommonResult.class, id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h4><p>系统中有重复部分，重构</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021135010712.png" alt="image-20221021135010712"></p><p>新建cloud-api-commons模块</p><p>pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>entities包</p><p>Payment实体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class Payment implements Serializable{    private Long id;    private String serial;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CommonResult通用封装类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CommonResult&lt;T&gt;{    private Integer code;    private String message;    private T data;    public CommonResult()    {    }    public CommonResult(Integer code, String message, T data)    {        this.code = code;        this.message = message;        this.data = data;    }    public CommonResult( Integer code,String message) {        this( code, message,null);    }    public CommonResult(T data) {        this(200, "操作成功", data);    }    //setter--getter    public T getData() {        return data;    }    public void setData(T data) {        this.data = data;    }    public String getMessage() {        return message;    }    public void setMessage(String message) {        this.message = message;    }    public Integer getCode() {        return code;    }    public void setCode(Integer code) {        this.code = code;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>maven命令clean install</p><p>订单80和支付8001分别改造</p><p>1、删除各自的原先有过的entities文件夹</p><p>2、各自粘贴POM内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>80的pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-consumer-order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8001的pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql-connector-java--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--jdbc--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Eureka服务注册与发现-已经停更，弃用"><a href="#Eureka服务注册与发现-已经停更，弃用" class="headerlink" title="Eureka服务注册与发现(已经停更，弃用)"></a>Eureka服务注册与发现(已经停更，弃用)</h3><h4 id="Eureka基础知识"><a href="#Eureka基础知识" class="headerlink" title="Eureka基础知识"></a>Eureka基础知识</h4><h5 id="什么是服务治理？"><a href="#什么是服务治理？" class="headerlink" title="什么是服务治理？"></a>什么是服务治理？</h5><p>Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来==实现服务治理==</p><p> 在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p><h5 id="什么是服务注册？"><a href="#什么是服务注册？" class="headerlink" title="什么是服务注册？"></a>什么是服务注册？</h5><p>Eureka采用了CS的设计架构，Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。<br>        在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息 比如 服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021140424234.png" alt="image-20221021140424234"></p><h5 id="Eureka两组件"><a href="#Eureka两组件" class="headerlink" title="Eureka两组件"></a>Eureka两组件</h5><p>Eureka包含两个组件：==Eureka Server==和==Eureka Client==</p><p>Eureka Server提供服务注册服务<br>各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p><p>EurekaClient通过注册中心进行访问<br>是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒）</p><h4 id="单机Eureka构建步骤"><a href="#单机Eureka构建步骤" class="headerlink" title="单机Eureka构建步骤"></a>单机Eureka构建步骤</h4><h5 id="eurekaServer端服务注册中心"><a href="#eurekaServer端服务注册中心" class="headerlink" title="eurekaServer端服务注册中心"></a>eurekaServer端服务注册中心</h5><h6 id="1、创建模块cloud-eureka-server7001"><a href="#1、创建模块cloud-eureka-server7001" class="headerlink" title="1、创建模块cloud-eureka-server7001"></a>1、创建模块cloud-eureka-server7001</h6><h6 id="2、改pom文件"><a href="#2、改pom文件" class="headerlink" title="2、改pom文件"></a>2、改pom文件</h6><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-eureka-server7001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--eureka-server--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--boot web actuator--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--一般通用配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.x与2.x的对比说明</p><p>以前的老版本（当前使用2018）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在新版本（当前使用2020.2）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3、写yaml文件"><a href="#3、写yaml文件" class="headerlink" title="3、写yaml文件"></a>3、写yaml文件</h6><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7001eureka:  instance:    hostname: localhost #eureka服务端的实例名称  client:    #false表示不向注册中心注册自己。    register-with-eureka: false    #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    fetch-registry: false    service-url:    #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaServerpublic class EurekaMain7001{    public static void main(String[] args)    {        SpringApplication.run(EurekaMain7001.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：<a href="http://locahost:7001/">http://locahost:7001</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021141335400.png" alt="image-20221021141335400"></p><p>==注意==：必须在主启动类上加==@EnableEurekaServer==注解</p><h4 id="EurekaClient端cloud-provider-payment8001"><a href="#EurekaClient端cloud-provider-payment8001" class="headerlink" title="EurekaClient端cloud-provider-payment8001"></a>EurekaClient端cloud-provider-payment8001</h4><p>将注册进EurekaServer成为服务提供者provider，</p><h6 id="1、创建模块cloud-provider-payment8001"><a href="#1、创建模块cloud-provider-payment8001" class="headerlink" title="1、创建模块cloud-provider-payment8001"></a>1、创建模块cloud-provider-payment8001</h6><h6 id="2、改pom文件-1"><a href="#2、改pom文件-1" class="headerlink" title="2、改pom文件"></a>2、改pom文件</h6><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--eureka-client--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql-connector-java--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--jdbc--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.x与2.x的对比说明</p><p>以前老版本，别再使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在新版本,当前使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3、写yaml文件-1"><a href="#3、写yaml文件-1" class="headerlink" title="3、写yaml文件"></a>3、写yaml文件</h6><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001spring:  application:    name: cloud-payment-service  datasource:    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false    username: root    password: 123456eureka:  client:    #表示是否将自己注册进EurekaServer默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      defaultZone: http://localhost:7001/eurekamybatis:  mapperLocations: classpath:mapper/*.xml  type-aliases-package: com.atguigu.springcloud.entities    # 所有Entity别名类所在包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4、主启动类"><a href="#4、主启动类" class="headerlink" title="4、主启动类"></a>4、主启动类</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClientpublic class PaymentMain8001{    public static void main(String[] args)    {        SpringApplication.run(PaymentMain8001.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：先要启动EurekaServer <a href="http://localhost:7001/">http://localhost:7001/</a></p><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221021143213177.png" alt="image-20221021143213177"></p><h6 id="微服务注册名配置说明"><a href="#微服务注册名配置说明" class="headerlink" title="微服务注册名配置说明"></a>微服务注册名配置说明</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021143150576.png" alt="image-20221021143150576"></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="EurekaClient端cloud-consumer-order80"><a href="#EurekaClient端cloud-consumer-order80" class="headerlink" title="EurekaClient端cloud-consumer-order80"></a>EurekaClient端cloud-consumer-order80</h4><p>将注册进EurekaServer成为服务消费者consumer。</p><h6 id="1、创建模块cloud-consumer-order80"><a href="#1、创建模块cloud-consumer-order80" class="headerlink" title="1、创建模块cloud-consumer-order80"></a>1、创建模块cloud-consumer-order80</h6><h6 id="2、改pom文件-2"><a href="#2、改pom文件-2" class="headerlink" title="2、改pom文件"></a>2、改pom文件</h6><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-consumer-order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3、写yaml"><a href="#3、写yaml" class="headerlink" title="3、写yaml"></a>3、写yaml</h6><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80spring:    application:        name: cloud-order-serviceeureka:  client:    #表示是否将自己注册进EurekaServer默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      defaultZone: http://localhost:7001/eureka <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4、主启动类-1"><a href="#4、主启动类-1" class="headerlink" title="4、主启动类"></a>4、主启动类</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClientpublic class OrderMain80{    public static void main(String[] args)    {        SpringApplication.run(OrderMain80.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5、测试："><a href="#5、测试：" class="headerlink" title="5、测试："></a>5、测试：</h6><p>先要启动EurekaServer，7001服务，再要启动服务提供者provider，8001服务</p><p>eureka服务器</p><p><a href="http://localhost/consumer/3">http://localhost/consumer/3</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021143621024.png" alt="image-20221021143621024"></p><h4 id="集群Eureka构建步骤"><a href="#集群Eureka构建步骤" class="headerlink" title="集群Eureka构建步骤"></a>集群Eureka构建步骤</h4><h5 id="Eureka集群原理说明"><a href="#Eureka集群原理说明" class="headerlink" title="Eureka集群原理说明"></a>Eureka集群原理说明</h5><p>问题：微服务RPC远程服务调用最核心的是什么<br>       高可用，试想你的注册中心只有一个only one， 它出故障了那就会导致整个为服务环境不可用。</p><p>解决办法：搭建Eureka注册中心集群 ，实现负载均衡+故障容错</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220515142633983.png" alt="image-20220515142633983"></p><h5 id="EurekaServer集群环境构建步骤"><a href="#EurekaServer集群环境构建步骤" class="headerlink" title="EurekaServer集群环境构建步骤"></a>EurekaServer集群环境构建步骤</h5><p>参考cloud-eureka-server7001</p><h6 id="1、创建cloud-eureka-server7002"><a href="#1、创建cloud-eureka-server7002" class="headerlink" title="1、创建cloud-eureka-server7002"></a>1、创建cloud-eureka-server7002</h6><h6 id="2、改pom文件-3"><a href="#2、改pom文件-3" class="headerlink" title="2、改pom文件"></a>2、改pom文件</h6><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-eureka-server7002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--eureka-server--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--boot web actuator--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--一般通用配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3、主启动类"><a href="#3、主启动类" class="headerlink" title="3、主启动类"></a>3、主启动类</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaServerpublic class EurekaMain7002 {    public static void main(String[] args) {        SpringApplication.run(EurekaMain7002.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、写yaml文件</p><p>7001</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7001eureka:  instance:    hostname: eureka7001.com #eureka服务端的实例名称  client:    register-with-eureka: false     #false表示不向注册中心注册自己。    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:      defaultZone: http://eureka7002.com:7002/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7002</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7002eureka:  instance:    hostname: eureka7002.com #eureka服务端的实例名称  client:    register-with-eureka: false     #false表示不向注册中心注册自己。    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:      defaultZone: http://eureka7001.com:7001/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将支付服务8001微服务发布到上面2台Eureka集群配置中"><a href="#将支付服务8001微服务发布到上面2台Eureka集群配置中" class="headerlink" title="将支付服务8001微服务发布到上面2台Eureka集群配置中"></a>将支付服务8001微服务发布到上面2台Eureka集群配置中</h4><p>yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001spring:  application:    name: cloud-payment-service  datasource:    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false    username: root    password: 123456eureka:  client:    #表示是否将自己注册进EurekaServer默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      #defaultZone: http://localhost:7001/eureka      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版mybatis:  mapperLocations: classpath:mapper/*.xml  type-aliases-package: com.example.entities    # 所有Entity别名类所在包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将订单服务80微服务发布到上面2台Eureka集群配置中"><a href="#将订单服务80微服务发布到上面2台Eureka集群配置中" class="headerlink" title="将订单服务80微服务发布到上面2台Eureka集群配置中"></a>将订单服务80微服务发布到上面2台Eureka集群配置中</h4><p>yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80spring:    application:        name: cloud-order-serviceeureka:  client:    #表示是否将自己注册进EurekaServer默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      #defaultZone: http://localhost:7001/eureka      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h5><p>先要启动EurekaServer，7001/7002服务，再要启动服务提供者provider，8001，再要启动消费者，80</p><h4 id="支付服务提供者8001集群环境构建"><a href="#支付服务提供者8001集群环境构建" class="headerlink" title="支付服务提供者8001集群环境构建"></a>支付服务提供者8001集群环境构建</h4><p>参考cloud-provider-payment8001</p><h6 id="1、新建cloud-provider-payment8002"><a href="#1、新建cloud-provider-payment8002" class="headerlink" title="1、新建cloud-provider-payment8002"></a>1、新建cloud-provider-payment8002</h6><h6 id="2、改pom文件-4"><a href="#2、改pom文件-4" class="headerlink" title="2、改pom文件"></a>2、改pom文件</h6><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>comexample<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--eureka-client--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql-connector-java--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--jdbc--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3、写yaml-1"><a href="#3、写yaml-1" class="headerlink" title="3、写yaml"></a>3、写yaml</h6><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8002spring:  application:    name: cloud-payment-service  datasource:    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false    username: root    password: 123456eureka:  client:    #表示是否将自己注册进EurekaServer默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版      #defaultZone: http://localhost:7001/eureka  # 单机版mybatis:  mapperLocations: classpath:mapper/*.xml  type-aliases-package: com.example.entities    # 所有Entity别名类所在包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4、主启动类-2"><a href="#4、主启动类-2" class="headerlink" title="4、主启动类"></a>4、主启动类</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClientpublic class PaymentMain8002{    public static void main(String[] args)    {        SpringApplication.run(PaymentMain8002.class,args);    }} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5、业务类-直接从8001上粘贴即可"><a href="#5、业务类-直接从8001上粘贴即可" class="headerlink" title="5、业务类 直接从8001上粘贴即可"></a>5、业务类 直接从8001上粘贴即可</h6><h6 id="6、修改8001-x2F-8002的Controller"><a href="#6、修改8001-x2F-8002的Controller" class="headerlink" title="6、修改8001/8002的Controller"></a>6、修改8001/8002的Controller</h6><p>8001</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4jpublic class PaymentController{    @Value("${server.port}")    private String serverPort;    @Resource    private PaymentService paymentService;    @PostMapping(value = "/payment/create")    public CommonResult create(@RequestBody Payment payment)    {        int result = paymentService.create(payment);        log.info("*****插入操作返回结果:" + result);        if(result &gt; 0)        {            return new CommonResult(200,"插入成功,返回结果"+result+"\t 服务端口："+serverPort,payment);        }else{            return new CommonResult(444,"插入失败",null);        }    }    @GetMapping(value = "/payment/get/{id}")    public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable("id") Long id)    {        Payment payment = paymentService.getPaymentById(id);        log.info("*****查询结果:{}",payment);        if (payment != null) {            return new CommonResult(200,"查询成功"+"\t 服务端口："+serverPort,payment);        }else{            return new CommonResult(444,"没有对应记录,查询ID: "+id,null);        }    }} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8002</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4jpublic class PaymentController{    @Value("${server.port}")    private String serverPort;    @Resource    private PaymentService paymentService;    @PostMapping(value = "/payment/create")    public CommonResult create(@RequestBody Payment payment)    {        int result = paymentService.create(payment);        log.info("*****新增结果:" + result);        if(result &gt; 0)        {            return new CommonResult(200,"插入成功,返回结果"+result+"\t 服务端口："+serverPort,payment);        }else{            return new CommonResult(444,"插入失败",null);        }    }    @GetMapping(value = "/payment/get/{id}")    public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable("id") Long id)    {        Payment payment = paymentService.getPaymentById(id);        log.info("*****查询结果:{}",payment);        if (payment != null) {            return new CommonResult(200,"查询成功"+"\t 服务端口："+serverPort,payment);        }else{            return new CommonResult(444,"没有对应记录,查询ID: "+id,null);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>订单服务访问地址不能写死，所以要在订单模块修改部分代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//public static final String PAYMENT_SRV = "http://localhost:8001";// 通过在eureka上注册过的微服务名称调用public static final String PAYMENT_SRV = "http://CLOUD-PAYMENT-SERVICE";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用==@LoadBalanced==注解赋予RestTemplate负载均衡的能力</p><p>ApplicationContextConfig</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ApplicationContextConfig{    @Bean    @LoadBalanced //使用@LoadBalanced注解赋予RestTemplate负载均衡的能力    public RestTemplate getRestTemplate()    {        return new RestTemplate();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="actuator微服务信息完善"><a href="#actuator微服务信息完善" class="headerlink" title="actuator微服务信息完善"></a>actuator微服务信息完善</h4><p>当前问题：含有主机名称、访问信息有IP信息提示</p><p>修改cloud-provider-payment8001的yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001spring:  application:    name: cloud-payment-service  datasource:    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false    username: root    password: 123456eureka:  client:    #表示是否将自己注册进EurekaServer默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版      #defaultZone: http://localhost:7001/eureka  # 单机版  instance:    instance-id: payment8001prefer-ip-address: true     #访问路径可以显示IP地址mybatis:  mapperLocations: classpath:mapper/*.xml  type-aliases-package: com.example.entities    # 所有Entity别名类所在包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改之后</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021152311587.png" alt="image-20221021152311587"></p><h4 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h4><p>对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息</p><p>修改cloud-provider-payment8001的Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4jpublic class PaymentController{    @Value("${server.port}")    private String serverPort;    @Resource    private PaymentService paymentService;    @Resource    private DiscoveryClient discoveryClient;    @PostMapping(value = "/payment/create")    public CommonResult create(@RequestBody Payment payment)    {        int result = paymentService.create(payment);        log.info("*****插入操作返回结果:" + result);        if(result &gt; 0)        {            return new CommonResult(200,"插入成功,返回结果"+result+"\t 服务端口："+serverPort,payment);        }else{            return new CommonResult(444,"插入失败",null);        }    }    @GetMapping(value = "/payment/get/{id}")    public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable("id") Long id)    {        Payment payment = paymentService.getPaymentById(id);        log.info("*****查询结果:{}",payment);        if (payment != null) {            return new CommonResult(200,"查询成功"+"\t 服务端口："+serverPort,payment);        }else{            return new CommonResult(444,"没有对应记录,查询ID: "+id,null);        }    }    @GetMapping(value = "/payment/discovery")    public Object discovery()    {        List&lt;String&gt; services = discoveryClient.getServices();        for (String element : services) {            System.out.println(element);        }        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");        for (ServiceInstance element : instances) {            System.out.println(element.getServiceId() + "\t" + element.getHost() + "\t" + element.getPort() + "\t"                    + element.getUri());        }        return this.discoveryClient;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8001主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClient@EnableDiscoveryClient //服务发现public class PaymentMain8001{    public static void main(String[] args)    {        SpringApplication.run(PaymentMain8001.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==注意==：必须在主启动类上加==@EnableDiscoveryClient==注解</p><h4 id="eureka自我保护"><a href="#eureka自我保护" class="headerlink" title="eureka自我保护"></a>eureka自我保护</h4><h5 id="故障现象"><a href="#故障现象" class="headerlink" title="故障现象"></a>故障现象</h5><p>​保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，<br>Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式：</p><pre class="line-numbers language-none"><code class="language-none">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021153903170.png" alt="image-20221021153903170"></p><h4 id="导致原因"><a href="#导致原因" class="headerlink" title="导致原因"></a>导致原因</h4><p>为什么会产生Eureka自我保护机制？<br>为了防止EurekaClient可以正常运行，但是 与 EurekaServer网络不通情况下，EurekaServer不会立刻将EurekaClient服务剔除</p><p>什么是自我保护模式？<br>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021154032494.png" alt="image-20221021154032494"></p><p>==在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。==</p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留）也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</p><h4 id="怎么禁止自我保护"><a href="#怎么禁止自我保护" class="headerlink" title="怎么禁止自我保护"></a>怎么禁止自我保护</h4><h6 id="注册中心eureakeServer端7001修改yaml文件"><a href="#注册中心eureakeServer端7001修改yaml文件" class="headerlink" title="注册中心eureakeServer端7001修改yaml文件"></a>注册中心eureakeServer端7001修改yaml文件</h6><p>使用eureka.server.enable-self-preservation = false 可以禁用自我保护模式</p><h6 id="生产者客户端eureakeClient端8001修改yaml文件"><a href="#生产者客户端eureakeClient端8001修改yaml文件" class="headerlink" title="生产者客户端eureakeClient端8001修改yaml文件"></a>生产者客户端eureakeClient端8001修改yaml文件</h6><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001###服务名称(服务注册到eureka名称)spring:    application:        name: cloud-provider-paymenteureka:  client: #服务提供者provider注册进eureka服务列表内    service-url:      register-with-eureka: true      fetch-registry: true      # cluster version      #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka      # singleton version      defaultZone: http://eureka7001.com:7001/eureka#心跳检测与续约时间#开发时设置小些，保证服务关闭后注册中心能即使剔除服务  instance:  #Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)    lease-renewal-interval-in-seconds: 1  #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务    lease-expiration-duration-in-seconds: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eureka已经停更（弃用）<a href="https://github.com/Netflix/eureka/wiki">https://github.com/Netflix/eureka/wiki</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021155026574.png" alt="image-20221021155026574"></p><h3 id="Zookeeper服务注册与发现"><a href="#Zookeeper服务注册与发现" class="headerlink" title="Zookeeper服务注册与发现"></a>Zookeeper服务注册与发现</h3><p>==<strong>eureka已经停更（弃用），使用SpringCloud整合Zookeeper代替Eureka</strong>==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021183420440.png" alt="image-20221021183420440"></p><p>注册中心Zookeeper：</p><p>首先在CentOS系统安装zookeeper</p><ul><li>zookeeper是一个分布式协调工具，可以实现注册中心功能</li><li>关闭Linux服务器防火墙后启动zookeeper服务器<code>systemctl stop firewalld</code></li><li>zookeeper服务器取代Eureka服务器，zk作为服务注册中心</li></ul><h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p>新建cloud-provider-payment8004</p><p>改pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8004<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#8004表示注册到zookeeper服务器的支付服务提供者端口号server:  port: 8004#服务别名----注册zookeeper到注册中心名称spring:  application:    name: cloud-provider-payment  cloud:    zookeeper:      connect-string: 192.168.10.102:2181  #这里的IP是Linux上的IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableDiscoveryClient //该注解用于向使用consul或者zookeeper作为注册中心时注册服务public class PaymentMain8004{    public static void main(String[] args)    {        SpringApplication.run(PaymentMain8004.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class PaymentController{    @Value("${server.port}")    private String serverPort;    @RequestMapping(value = "/payment/zk")    public String paymentzk()    {        return "springcloud with zookeeper: "+serverPort+"\t"+ UUID.randomUUID().toString();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><p>先在Linux启动zookeeper服务端：命令为<code>./zkServer.sh start</code>，再启动zookeeper的客户端，命令：<code>./zkCli.sh</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021161415507.png" alt="image-20221021161415507"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021175518689.png" alt="image-20221021175518689"></p><p>启动8004注册进zookeeper，后的问题</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220515152738736.png" alt="image-20220515152738736"></p><p>解决zookeeper版本jar包冲突问题</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021162259560.png" alt="image-20221021162259560"></p><p>排出zk冲突后的新POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8004<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--添加zookeeper3.5.7版本--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试1:<a href="http://localhost:8004/payment/zk">http://localhost:8004/payment/zk</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021175752912.png" alt="image-20221021175752912"></p><p>测试2</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021180606974.png" alt="image-20221021180606974"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021180848988.png" alt="image-20221021180848988"></p><p>出现如上所示，表示成功将微服务入驻zookeeper服务器</p><h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><p>新建cloud-consumerzk-order80</p><p>改pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-consumerzk-order81<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--先排除自带的zookeeper--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--添加zookeeper3.5.7版本--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80spring:  application:    name: cloud-consumer-order  cloud:  #注册到zookeeper地址    zookeeper:      connect-string: 192.168.10.102:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class OrderZK80{    public static void main(String[] args)    {        SpringApplication.run(OrderZK80.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类</p><p>配置ApplicationContextConfig</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ApplicationContextConfig{    @Bean    @LoadBalanced    public RestTemplate getRestTemplate()    {        return new RestTemplate();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class OrderZKController{    public static final String INVOKE_URL = "http://cloud-provider-payment";    @Autowired    private RestTemplate restTemplate;    @RequestMapping(value = "/consumer/payment/zk")    public String paymentInfo()    {        String result = restTemplate.getForObject(INVOKE_URL+"/payment/zk", String.class);        System.out.println("消费者调用支付服务(zookeeper)---&gt;result:" + result);        return result;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试验证：cloud-zookeeper-consumer-order成功注册到zookeeper中</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021183049855.png" alt="image-20221021183049855"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021183233851.png" alt="image-20221021183233851"></p><h3 id="Consul服务注册与发现"><a href="#Consul服务注册与发现" class="headerlink" title="Consul服务注册与发现"></a>Consul服务注册与发现</h3><p>官网：<a href="https://www.consul.io/intro/index.html">https://www.consul.io/intro/index.html</a></p><p>下载地址：<a href="https://www.consul.io/downloads.html">https://www.consul.io/downloads.html</a></p><p>springcloudConsul官网：<a href="https://www.springcloud.cc/spring-cloud-consul.html">https://www.springcloud.cc/spring-cloud-consul.html</a></p><h4 id="Consul简介"><a href="#Consul简介" class="headerlink" title="Consul简介"></a>Consul简介</h4><p>Consul 是一套开源的分布式服务发现和配置管理系统，==由 HashiCorp 公司用 Go 语言开发。==</p><p>提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。</p><p>它具有很多优点。包括： 基于 raft 协议，比较简洁； 支持健康检查, 同时支持 HTTP 和 DNS 协议 支持跨数据中心的 WAN 集群 提供图形界面 跨平台，支持 Linux、Mac、Windows</p><p><strong>Consul的作用</strong></p><ul><li>服务发现：提供HTTP和DNS两种发现方式。</li><li>健康监测：支持多种方式，HTTP、TCP、Docker、Shell脚本定制化监控</li><li>KV存储：Key、Value的存储方式</li><li>多数据中心：Consul支持多数据中心</li><li>可视化Web界面</li></ul><h4 id="安装并运行Consul"><a href="#安装并运行Consul" class="headerlink" title="安装并运行Consul"></a>安装并运行Consul</h4><p>官网安装说明：<a href="https://learn.hashicorp.com/consul/getting-started/install.html">https://learn.hashicorp.com/consul/getting-started/install.html</a></p><p>下载完成后只有一个consul.exe文件，在consul.exe所在的目录输入cmd，接着输入consul指令，敲击回车安装consul、安装完成输入consul agent -dev指令，敲击回车启动consul（使用开发模式启动）。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021190727888.png" alt="image-20221021190727888"></p><p>通过以下地址可以访问Consul的首页：<a href="http://localhost:8500/">http://localhost:8500</a></p><p>页面结构：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021190932977.png" alt="image-20221021190932977"></p><h4 id="服务提供者-1"><a href="#服务提供者-1" class="headerlink" title="服务提供者"></a>服务提供者</h4><p>1、创建cloud-provider-payment8006模块</p><p>2、改pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8006<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud consul-server --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--日常通用jar包配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、写yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#consul服务端口号server:  port: 8006spring:  application:    name: cloud-consul-provider-payment  #    注册中心地址  cloud:    consul:      host: localhost #127.0.0.1      port: 8500      discovery:        service-name: ${spring.application.name}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableDiscoveryClientpublic class PaymentMain8006 {    public static void main(String[] args) {        SpringApplication.run(PaymentMain8006.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4jpublic class PaymentController {    @Value("${server.port}")    private String serverPort;    @RequestMapping(value = "/payment/consul")    public String paymentConsul(){        return "Springcloud with consul:"+serverPort+"\t"+ UUID.randomUUID().toString();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021192344737.png" alt="image-20221021192344737"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021192238909.png" alt="image-20221021192238909"></p><h4 id="服务消费者-1"><a href="#服务消费者-1" class="headerlink" title="服务消费者"></a>服务消费者</h4><p>1、创建cloud-consumerconsul-order80模块</p><p>2、改pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-consumerconsul-order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--        引入自己定义的api通用包，可以使用payment支付Entity--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud consul-server --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、写yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80spring:  application:    name: cloud-consumer-oder  cloud:    consul:      discovery:        service-name: ${spring.application.name}      host: localhost      port: 8500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableDiscoveryClientpublic class OrderMain80 {    public static void main(String[] args) {        SpringApplication.run(OrderMain80.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、ApplicationContextConfig</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ApplicationContextConfig {    @Bean    @LoadBalanced    public RestTemplate restTemplate(){        return new RestTemplate();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4jpublic class OderConsulController {    public static final String PAYMENT_URL="consul-provider-payment";    @Resource    private RestTemplate restTemplate;    @RequestMapping("/consumerconsul/payment")    public String getOrder(){        return restTemplate.getForObject(PAYMENT_URL+"/payment/consul",String.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：<a href="http://localhost/consumer/consul">http://localhost/consumer/consul</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021195107701.png" alt="image-20221021195107701"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021195136901.png" alt="image-20221021195136901"></p><h4 id="三个注册中心异同点"><a href="#三个注册中心异同点" class="headerlink" title="三个注册中心异同点"></a>三个注册中心异同点</h4><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>服务健康检查</th><th>对外暴露接口</th><th>Spring Cloud基础</th></tr></thead><tbody><tr><td>Eureka</td><td>Java</td><td>AP</td><td>可配支持</td><td>http</td><td>已集成</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>支持</td><td>http/DNS</td><td>已集成</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td>支持</td><td>客户端</td><td>已集成</td></tr></tbody></table><p>CAP指的是：</p><ul><li>C:Consistency（强一致性）</li><li>A:Availability（可用性）</li><li>P:Partition tolerance（分区容错性）</li></ul><p>CAP理论关注粒度是数据，而不是整体系统设计的策略</p><p>==最多只能同时较好的满足两个。==<br> CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，<br>因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：<br>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。<br>CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。<br>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021195512718.png" alt="image-20221021195512718"></p><p><strong>AP架构</strong></p><p>当网络分区出现后，为了<strong>保证可用性</strong>，系统B==可以返回旧值==，保证系统的可用性。</p><p>==结论：违背了一致性C的要求，只满足可用性和分区容错，即AP==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021195937208.png" alt="image-20221021195937208"></p><p><strong>CP架构</strong></p><p>当网络分区出现后，为了<strong>保证一致性</strong>，就必须拒接请求，否则无法保证一致性</p><p>==结论：违背了可用性A的要求，只满足一致性和分区容错，即CP==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021200348126.png" alt="image-20221021200348126"></p><h3 id="Ribbon负载均衡服务调用"><a href="#Ribbon负载均衡服务调用" class="headerlink" title="Ribbon负载均衡服务调用"></a>Ribbon负载均衡服务调用</h3><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><h5 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h5><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套==客户端负载均衡的工具==。</p><p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是==提供客户端的软件负载均衡算法和服务调用==。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p><p>官网资料：<a href="https://github.com/Netflix/ribbon/wiki/Getting-Started">https://github.com/Netflix/ribbon/wiki/Getting-Started</a></p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220516003831171.png" alt="image-20220516003831171"></p><p>将来替换方案：</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220516003740740.png" alt="image-20220516003740740"></p><h4 id="LB（负载均衡）"><a href="#LB（负载均衡）" class="headerlink" title="LB（负载均衡）"></a>LB（负载均衡）</h4><p>LB负载均衡(Load Balance)是什么？</p><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。</p><p>常见的负载均衡有软件Nginx，LVS，硬件 F5等。</p><h4 id="Ribbon本地负载均衡客户端-VS-Nginx服务端负载均衡区别"><a href="#Ribbon本地负载均衡客户端-VS-Nginx服务端负载均衡区别" class="headerlink" title="Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别"></a>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别</h4><p> <strong>Nginx是服务器负载均衡</strong>，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。</p><p> <strong>Ribbon本地负载均衡，</strong>在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</p><h5 id="集中式LB-1"><a href="#集中式LB-1" class="headerlink" title="集中式LB"></a>集中式LB</h5><p>即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方；</p><h5 id="进程内LB-1"><a href="#进程内LB-1" class="headerlink" title="进程内LB"></a>进程内LB</h5><p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p><p>==Ribbon就属于进程内LB==，它只是一个类库，==集成于消费方进程==，消费方通过它来获取到服务提供方的地址。</p><h4 id="Ribbon负载均衡演示"><a href="#Ribbon负载均衡演示" class="headerlink" title="Ribbon负载均衡演示"></a>Ribbon负载均衡演示</h4><h5 id="架构说明-1"><a href="#架构说明-1" class="headerlink" title="架构说明"></a>架构说明</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021201354524.png" alt="image-20221021201354524"></p><p><strong>Ribbon在工作时分成两步</strong><br>第一步先选择 EurekaServer ,它优先选择在同一个区域内负载较少的server.<br>第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。<br>其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。</p><p><strong>总结：</strong>Ribbon其实就是一个软负载均衡的客户端组件，<br>他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。</p><h5 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>spring-cloud-starter-netflix-eureka-client自带了spring-cloud-starter-ribbon引用，</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021210844837.png" alt="image-20221021210844837"></p><h5 id="RestTemplate的使用"><a href="#RestTemplate的使用" class="headerlink" title="RestTemplate的使用"></a>RestTemplate的使用</h5><p>官网：<a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p><h5 id="getForObject方法-x2F-getForEntity方法"><a href="#getForObject方法-x2F-getForEntity方法" class="headerlink" title="getForObject方法/getForEntity方法"></a>getForObject方法/getForEntity方法</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021212517474.png" alt="image-20221021212517474"></p><h5 id="getForObject方法-x2F-getForEntity方法-1"><a href="#getForObject方法-x2F-getForEntity方法-1" class="headerlink" title="getForObject方法/getForEntity方法"></a>getForObject方法/getForEntity方法</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021212917068.png" alt="image-20221021212917068"></p><h6 id="GET请求方法"><a href="#GET请求方法" class="headerlink" title="GET请求方法"></a>GET请求方法</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; T getForObject(URI url, Class&lt;T&gt; responseType); &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(URI var1, Class&lt;T&gt; responseType);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="POST请求方法"><a href="#POST请求方法" class="headerlink" title="POST请求方法"></a>POST请求方法</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; T postForObject(URI url, @Nullable Object request, Class&lt;T&gt; responseType); &lt;T&gt; ResponseEntity&lt;T&gt; postForEntity(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; postForEntity(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; postForEntity(URI url, @Nullable Object request, Class&lt;T&gt; responseType);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Ribbon核心组件IRule-1"><a href="#Ribbon核心组件IRule-1" class="headerlink" title="Ribbon核心组件IRule"></a>Ribbon核心组件IRule</h4><h5 id="IRule：根据特定算法中从服务列表中选取一个要访问的服务"><a href="#IRule：根据特定算法中从服务列表中选取一个要访问的服务" class="headerlink" title="IRule：根据特定算法中从服务列表中选取一个要访问的服务"></a>IRule：根据特定算法中从服务列表中选取一个要访问的服务</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021214323933.png" alt="image-20221021214323933"></p><ul><li>com.netflix.loadbalancer.RoundRobinRule   轮询</li><li>com.netflix.loadbalancer.RandomRule    随机</li><li>com.netflix.loadbalancer.RetryRule     先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务</li><li>WeightedResponseTimeRule   对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择</li><li>BestAvailableRule  会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li><li>AvailabilityFilteringRule  先过滤掉故障实例，再选择并发较小的实例</li><li>ZoneAvoidanceRule  默认规则,复合判断server所在区域的性能和server的可用性选择服务器</li></ul><h5 id="自定义Ribbon"><a href="#自定义Ribbon" class="headerlink" title="自定义Ribbon"></a>自定义Ribbon</h5><h6 id="1、修改cloud-consumer-order80"><a href="#1、修改cloud-consumer-order80" class="headerlink" title="1、修改cloud-consumer-order80"></a>1、修改cloud-consumer-order80</h6><p>注意配置细节：官方文档明确给出了警告，这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021214923941.png" alt="image-20221021214923941"></p><h6 id="2、新建package"><a href="#2、新建package" class="headerlink" title="2、新建package"></a>2、新建package</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021215124864.png" alt="image-20221021215124864"></p><h6 id="3、上面包下新建MySelfRule规则类"><a href="#3、上面包下新建MySelfRule规则类" class="headerlink" title="3、上面包下新建MySelfRule规则类"></a>3、上面包下新建MySelfRule规则类</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class MySelfRule{    @Bean    public IRule myRule()    {        return new RandomRule();//定义为随机    }} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4、主启动类添加-RibbonClient"><a href="#4、主启动类添加-RibbonClient" class="headerlink" title="4、主启动类添加@RibbonClient"></a>4、主启动类添加@RibbonClient</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClient@RibbonClient(name = "CLOUD-PAYMENT-SERVICE",configuration=MySelfRule.class)public class OrderMain80{    public static void main(String[] args)    {        SpringApplication.run(OrderMain80.class,args);    }} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Ribbon负载均衡算法"><a href="#Ribbon负载均衡算法" class="headerlink" title="Ribbon负载均衡算法"></a>Ribbon负载均衡算法</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>==<strong>负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标  ，每次服务重启动后rest接口计数从1开始。</strong>==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE"); 如：   List [0] instances = 127.0.0.1:8002　　　 List [1] instances = 127.0.0.1:8001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若8001+ 8002 组合成为两个集群，它们共计2台机器，集群总数为2， 按照轮询算法原理：</p><p>当总请求数为1时： 1 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001</p><p>当总请求数位2时： 2 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002</p><p>当总请求数位3时： 3 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001</p><p>当总请求数位4时： 4 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002</p><p>如此类推……</p><h4 id="试着写一个本地负载均衡器"><a href="#试着写一个本地负载均衡器" class="headerlink" title="试着写一个本地负载均衡器"></a>试着写一个本地负载均衡器</h4><h6 id="1、7001-x2F-7002集群启动"><a href="#1、7001-x2F-7002集群启动" class="headerlink" title="1、7001/7002集群启动"></a>1、7001/7002集群启动</h6><h6 id="2、8001-x2F-8002微服务改造"><a href="#2、8001-x2F-8002微服务改造" class="headerlink" title="2、8001/8002微服务改造"></a>2、8001/8002微服务改造</h6><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4jpublic class PaymentController{    @Value("${server.port}")    private String serverPort;    @Resource    private PaymentService paymentService;    @Resource    private DiscoveryClient discoveryClient;    @PostMapping(value = "/payment/create")    public CommonResult create(@RequestBody Payment payment)    {        int result = paymentService.create(payment);        log.info("*****插入操作返回结果:" + result);        if(result &gt; 0)        {            return new CommonResult(200,"插入成功,返回结果"+result+"\t 服务端口："+serverPort,payment);        }else{            return new CommonResult(444,"插入失败",null);        }    }    @GetMapping(value = "/payment/get/{id}")    public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable("id") Long id)    {        Payment payment = paymentService.getPaymentById(id);        log.info("*****查询结果:{}",payment);        if (payment != null) {            return new CommonResult(200,"查询成功"+"\t 服务端口："+serverPort,payment);        }else{            return new CommonResult(444,"没有对应记录,查询ID: "+id,null);        }    }    @GetMapping(value = "/payment/discovery")    public Object discovery()    {        List&lt;String&gt; services = discoveryClient.getServices();        for (String element : services) {            System.out.println(element);        }        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");        for (ServiceInstance element : instances) {            System.out.println(element.getServiceId() + "\t" + element.getHost() + "\t" + element.getPort() + "\t"                    + element.getUri());        }        return this.discoveryClient;    }    @GetMapping(value = "/payment/lb")    public String getPaymentLB()    {        return serverPort;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3、80订单微服务改造"><a href="#3、80订单微服务改造" class="headerlink" title="3、80订单微服务改造"></a>3、80订单微服务改造</h6><h6 id="3-1、ApplicationContextConfig去掉注解-LoadBalanced"><a href="#3-1、ApplicationContextConfig去掉注解-LoadBalanced" class="headerlink" title="3.1、ApplicationContextConfig去掉注解@LoadBalanced"></a>3.1、ApplicationContextConfig去掉注解@LoadBalanced</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ApplicationContextConfig{    @Bean    //@LoadBalanced    public RestTemplate getRestTemplate()    {        return new RestTemplate();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-2、LoadBalancer接口"><a href="#3-2、LoadBalancer接口" class="headerlink" title="3.2、LoadBalancer接口"></a>3.2、LoadBalancer接口</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface LoadBalancer{    ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-3、MyLB"><a href="#3-3、MyLB" class="headerlink" title="3.3、MyLB"></a>3.3、MyLB</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class MyLB implements LoadBalancer{    private AtomicInteger atomicInteger = new AtomicInteger(0);    public final int getAndIncrement()    {        int current;        int next;        do        {            current = this.atomicInteger.get();            next = current &gt;= 2147483647 ? 0 : current + 1;        } while(!this.atomicInteger.compareAndSet(current, next));        System.out.println("*****next: "+next);        return next;    }    @Override    public ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances)    {        int index = getAndIncrement() % serviceInstances.size();        return serviceInstances.get(index);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-4、OrderController"><a href="#3-4、OrderController" class="headerlink" title="3.4、OrderController"></a>3.4、OrderController</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class OrderController{    //public static final String PAYMENT_SRV = "http://localhost:8001";    public static final String PAYMENT_SRV = "http://CLOUD-PAYMENT-SERVICE";    @Resource    private RestTemplate restTemplate;    //可以获取注册中心上的服务列表    @Resource    private DiscoveryClient discoveryClient;    @Resource    private LoadBalancer loadBalancer;    @GetMapping("/consumer/payment/create")    public CommonResult&lt;Payment&gt; create(Payment payment)    {        return restTemplate.postForObject(PAYMENT_SRV+"/payment/create",payment,CommonResult.class);    }    @GetMapping("/consumer/payment/get/{id}")    public CommonResult&lt;Payment&gt; getPayment(@PathVariable("id") Long id)    {        return restTemplate.getForObject(PAYMENT_SRV+"/payment/get/"+id,CommonResult.class);    }    @GetMapping("/consumer/payment/getForEntity/{id}")    public CommonResult&lt;Payment&gt; getPayment2(@PathVariable("id") Long id)    {        ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_SRV+"/payment/get/"+id, CommonResult.class);        if(entity.getStatusCode().is2xxSuccessful()){            return entity.getBody();        }else {            return new CommonResult(444, "操作失败");        }    }      @Resource    private LoadBalancer loadBalancer;    @GetMapping("/consumer/payment/lb")    public String getPaymentLB()    {        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");        if(instances == null || instances.size()&lt;=0) {            return null;        }        ServiceInstance serviceInstance = loadBalancer.instances(instances);        URI uri = serviceInstance.getUri();        return restTemplate.getForObject(uri+"/payment/lb",String.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OpenFeign服务接口调用"><a href="#OpenFeign服务接口调用" class="headerlink" title="OpenFeign服务接口调用"></a>OpenFeign服务接口调用</h3><h4 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h4><h5 id="OpenFeign是什么？"><a href="#OpenFeign是什么？" class="headerlink" title="OpenFeign是什么？"></a>OpenFeign是什么？</h5><p>官网解释:  <a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/#spring-cloud-openfeign">https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/#spring-cloud-openfeign</a></p><p>Feign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单。它的==使用方法是定义一个服务接口然后在上面添加注解==。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡</p><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221021234030115.png" alt="image-20221021234030115"></p><p>Github地址：<a href="https://github.com/spring-cloud/spring-cloud-openfeign">https://github.com/spring-cloud/spring-cloud-openfeign</a></p><h5 id="OpenFeign能干嘛？"><a href="#OpenFeign能干嘛？" class="headerlink" title="OpenFeign能干嘛？"></a>OpenFeign能干嘛？</h5><p>Feign旨在使编写Java Http客户端变得更容易。</p><p>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了—套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，==往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用==。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，==我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)==，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p><p>Feign集成了Ribbon</p><p>利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，==通过feign只需要定义服务绑定接口且以声明式的方法==，优雅而简单的实现了服务调用</p><p>==Feign通过接口的方法调用Rest服务(之前是Ribbon+RestTemplate)== ,该请求发送给Eureka服务器(<a href="http://microservicecloud-dept/dept/list">http://MICROSERVICECLOUD-DEPT/dept/list</a>) ,<br>通过Feign直接找到服务接口，由于在进行服务调用的时候融合了Ribbon技术，所以也支持负载均衡作用。</p><h5 id="Feign和OpenFeign"><a href="#Feign和OpenFeign" class="headerlink" title="Feign和OpenFeign"></a>Feign和OpenFeign</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221021234454647.png" alt="image-20221021234454647"></p><h4 id="OpenFeign使用步骤"><a href="#OpenFeign使用步骤" class="headerlink" title="OpenFeign使用步骤"></a>OpenFeign使用步骤</h4><p>1、接口+注解                        微服务调用接口+==@FeignClient==</p><p>2、新建cloud-eureka-consumer-feign-order80，Feign要在消费端使用</p><p>3、pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--        引入自己定义的api通用包，可以使用payment支付Entity--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--eureka-client--&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、YML文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80eureka:  client:    register-with-eureka: false    service-url:      default: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableFeignClientspublic class OpenFeign_Order_Main_80 {    public static void main(String[] args) {        SpringApplication.run(OpenFeign_Order_Main_80.class,args);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、业务类</p><p>业务逻辑接口＋@FeignClient配置调用provider服务</p><p>新建PaymentFeignService接口并新增注解@FeignClient</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component@FeignClient(value = "CLOUD-PAYMENT-SERVICE") //value是服务名称public interface PaymentFeignService {    @PostMapping("/payment/add")    public CommonResult&lt;Payment&gt; getOrder(Payment payment);    //返回对象为响应体中数据转化成的对象，基本上可以理解为Json    @GetMapping("/payment/{id}")    public CommonResult&lt;Payment&gt; getOrder2(@PathVariable("id") Long id) ;    @GetMapping("/payment/list")    public CommonResult getOrderList() ;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制层Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4j@RequestMapping("/consumer")public class OrderFeignController {    @Autowired    private PaymentFeignService paymentFeignService;    @PostMapping("/add")    public CommonResult&lt;Payment&gt; getOrder(Payment payment){        return paymentFeignService.getOrder(payment);    }    //返回对象为响应体中数据转化成的对象，基本上可以理解为Json    @GetMapping("/{id}")    public CommonResult&lt;Payment&gt; getOrder2(@PathVariable("id") Long id) {       return paymentFeignService.getOrder2(id);    }    @GetMapping("/list")    public CommonResult getOrderList() {       return paymentFeignService.getOrderList();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、测试，启动顺序7001、7002、8001、8002、feign80，最后访问<a href="http://localhost/consumer/list%EF%BC%8C%E6%88%90%E5%8A%9F%E8%AE%BF%E9%97%AE">http://localhost/consumer/list，成功访问</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022003129676.png" alt="image-20221022003129676"></p><h4 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h4><p>==OpenFeign默认等待1秒钟，超时后报错==</p><h5 id="超时设置，故意设置超时演示出错情况"><a href="#超时设置，故意设置超时演示出错情况" class="headerlink" title="超时设置，故意设置超时演示出错情况"></a>超时设置，故意设置超时演示出错情况</h5><p>服务提供方8001故意写暂停程序，在cloud-eureka-provider-payment8001的controller添加内容如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/feign/timeout")public String paymentFeignTimeOut(){    try {        //调用此方法时，故意让OpenFeign访问超时        TimeUnit.SECONDS.sleep(3);    } catch (InterruptedException e) {        e.printStackTrace();    }    return port;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务消费方80添加超时方法，在cloud-eureka-consumer-feign-order80的PaymentFeignService添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/payment/feign/timeout")    public String paymentFeignTimeOut() ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>服务消费方80添加超时方法，在cloud-eureka-consumer-feign-order80的rderFeignController添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/feign/timeout")    public String OrderFeignTimeOut() {        // openfeign-ribbon，客户端一般默认等待1秒钟,这里故意让其等待3秒        return paymentFeignService.paymentFeignTimeOut();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：<a href="http://localhost/consumer/feign/timeout">http://localhost/consumer/feign/timeout</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022133324369.png" alt="image-20221022133324369"></p><p>==默认Felgn客户端只等待一秒钟==，但是服务端处理需要超过1秒钟，导致Feign客户端不想等待了，直接返回报错。为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。此时需要在yml文件中开启配置</p><p>==OpenFeign默认支持Ribbon==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022133839336.png" alt="image-20221022133839336"></p><p>YML文件里开启OpenFeign客户端超时控制</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#没置feign客户端超时时间(OpenFeign歉认支持ribbon)ribbon:  ReadTimeout: 5000    #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间  ConnectTimeout: 5000  #指的是建立连接后从服务器读取到可用资源所用的时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022134354206.png" alt="image-20221022134354206"></p><h4 id="OpenFeign日志打印功能"><a href="#OpenFeign日志打印功能" class="headerlink" title="OpenFeign日志打印功能"></a>OpenFeign日志打印功能</h4><p>Feign 提供了日志打打印功能，我们可以通过配置来调整日志级别，从而了解 Feign中 Http请求的细节。说白了就是==对Feign接口的调用情况进行监控和输出==</p><h5 id="日志级别有："><a href="#日志级别有：" class="headerlink" title="日志级别有："></a>日志级别有：</h5><ul><li>NONE：默认的，不显示任何日志;</li><li>BASIC：仅记录请求方法、URL、响应状态码及执行时间;</li><li>HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息;</li><li>FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据。</li></ul><h5 id="配置日志bean（在80端配置）"><a href="#配置日志bean（在80端配置）" class="headerlink" title="配置日志bean（在80端配置）"></a>配置日志bean（在80端配置）</h5><p>注意导包不要导错了，是feign下面的Logger包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class FeignConfig {    @Bean    Logger.Level feignLoggerLevel(){        return Logger.Level.FULL;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022140034958.png" alt="image-20221022140034958"></p><h5 id="YML文件里需要开启日志的Feign客户端"><a href="#YML文件里需要开启日志的Feign客户端" class="headerlink" title="YML文件里需要开启日志的Feign客户端"></a>YML文件里需要开启日志的Feign客户端</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">logging:  level:    com.example.springcloud.service.PaymentFeignService: debug  # feign日志以什么级别监控哪个接口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221022140415283.png" alt="image-20221022140415283"></p><h5 id="后台日志查看"><a href="#后台日志查看" class="headerlink" title="后台日志查看"></a>后台日志查看</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022140708264.png" alt="image-20221022140708264"></p><h3 id="Hystrix断路器（服务降级）"><a href="#Hystrix断路器（服务降级）" class="headerlink" title="Hystrix断路器（服务降级）"></a>Hystrix断路器（服务降级）</h3><h4 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h4><h5 id="分布式系统面临的问题-1"><a href="#分布式系统面临的问题-1" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h5><p>==<strong>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</strong>==</p><p><img src="/SpringCloud.assets/image-20221019203102958.png" alt="image-20221019203102958"></p><p>上图中的请求需要调用A, P, H,I四个服务，如果一切顺利则没有什么问题，关键是如果I服务超时会出现什么情况呢?</p><p>答案是：服务雪崩</p><p><strong>服务雪崩</strong></p><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C。微服务B和微服务C又调用其它的微服务，这就是所谓的==“扇出”==。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”﹒</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统</p><h5 id="是什么？-2"><a href="#是什么？-2" class="headerlink" title="是什么？"></a>是什么？</h5><p>Hystrix是一个用于处理分布式系统的==延迟==和==容错==的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，==Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性（高可用）。==</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝)，==向调用方返回一个符合预期的、可处理的备选响应(FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常==，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h5 id="能干嘛？-2"><a href="#能干嘛？-2" class="headerlink" title="能干嘛？"></a>能干嘛？</h5><ul><li>服务降级</li><li>服务熔断</li><li>服务限流</li><li>接近实时的监控等等</li></ul><h5 id="官网资料-2"><a href="#官网资料-2" class="headerlink" title="官网资料"></a>官网资料</h5><p><a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p><h5 id="x3D-x3D-Hystrix官宣，停更进维-x3D-x3D"><a href="#x3D-x3D-Hystrix官宣，停更进维-x3D-x3D" class="headerlink" title="==Hystrix官宣，停更进维=="></a>==Hystrix官宣，停更进维==</h5><p><a href="https://github.com/Netflix/Hystrix">https://github.com/Netflix/Hystrix</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022142047341.png" alt="image-20221022142047341"></p><h4 id="Hystrix重要概念"><a href="#Hystrix重要概念" class="headerlink" title="Hystrix重要概念"></a>Hystrix重要概念</h4><h5 id="服务降级（fallback）"><a href="#服务降级（fallback）" class="headerlink" title="服务降级（fallback）"></a>服务降级（fallback）</h5><p>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback</p><p><strong>哪些情况会出发降级?</strong></p><ul><li>程序运行导常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满也会导致服务降级</li></ul><h5 id="服务熔断-break"><a href="#服务熔断-break" class="headerlink" title="服务熔断  (break)"></a>服务熔断  (break)</h5><p>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后==调用服务降级的方法并返回友好提示==</p><p><strong>服务的降级 -&gt; 进而熔断 -&gt; 恢复调用链路</strong></p><h5 id="服务限流-flowlimit"><a href="#服务限流-flowlimit" class="headerlink" title="服务限流  (flowlimit)"></a><strong>服务限流  (flowlimit)</strong></h5><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p><h4 id="hystrix案例"><a href="#hystrix案例" class="headerlink" title="hystrix案例"></a>hystrix案例</h4><h5 id="案例构建"><a href="#案例构建" class="headerlink" title="案例构建"></a>案例构建</h5><h6 id="新建cloud-provider-hystrix-payment8001"><a href="#新建cloud-provider-hystrix-payment8001" class="headerlink" title="新建cloud-provider-hystrix-payment8001"></a>新建cloud-provider-hystrix-payment8001</h6><p>POM，在项目cloud-eureka-provider-payment8001的pom文件的基础上，添加如下的maven</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--hystrix--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001spring:  application:    name: cloud-hystrix-payment-serviceeureka:  client:    register-with-eureka: true  #表示是否将自己注册进Eurekaserver默认为true。    fetch-registry: true  #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡。    service-url:#       defaultZone: http://localhost:7001/eureka/  #单机方式      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/l,http://eureka7003.com:7003/eureka/  #集群方式  instance:    instance-id: payment8001  #不显示主机名称    prefer-ip-address: true  #访问路径可以显示IP地址    lease-renewal-interval-in-seconds: 1  #Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)    lease-expiration-duration-in-seconds: 2  #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClientpublic class Hystrix_PaymentMain_8001 {    public static void main(String[] args) {        SpringApplication.run(Hystrix_PaymentMain_8001.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类</p><p>​service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class PaymentService {    //正常访问    public String paymentInfo(Integer id){        return "线程池：" + Thread.currentThread().getName()+ "paymentInfo_OK,id=" +id +"\t" +"O(∩_∩)O哈哈~";    }    public String paymentInfo_TimeOut(Integer id){        int timeOut = 3;        try {            TimeUnit.SECONDS.sleep(timeOut);        } catch (InterruptedException e) {            e.printStackTrace();        }        return "线程池：" + Thread.currentThread().getName()+ "paymentInfo_OK,id=" +id +"\t" +"O(∩_∩)O哈哈~"+"超时了，耗时"+timeOut+"秒";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4j@RequestMapping("/payment")public class PaymentController {    @Autowired    private PaymentService paymentService;    @GetMapping("/hystrix/ok/{id}")    public  String paymentInfo_OK(@PathVariable("id") Integer id){        return paymentService.paymentInfo(id);    }    @GetMapping("/hystrix/timeout/{id}")    public  String paymentInfo_TimeOut(@PathVariable("id")Integer id){        String result = paymentService.paymentInfo_TimeOut(id);        log.info("result={}",result);        return result;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，启动顺序：7001、7002、7003、Hystrix_PaymentMain_8001</p><p>ok方法：<a href="http://localhost:8001/payment/hystrix/ok/31">http://localhost:8001/payment/hystrix/ok/31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022151016946.png" alt="image-20221022151016946"></p><p>耗时方法： <a href="http://localhost:8001/payment/hystrix/timeout/31">http://localhost:8001/payment/hystrix/timeout/31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022151031232.png" alt="image-20221022151031232"></p><p>以上案例为根基平台，从正确-→&gt;错误-&gt;降级熔断-&gt;恢复</p><h6 id="新建cloud-hystrix-consumer-feign-order80"><a href="#新建cloud-hystrix-consumer-feign-order80" class="headerlink" title="新建cloud-hystrix-consumer-feign-order80"></a>新建cloud-hystrix-consumer-feign-order80</h6><p>pom，在项目cloud-eureka-consumer-feign-order80的pom文件的基础上，添加如下的maven</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--hystrix--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80eureka:  client:    register-with-eureka: false    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/  #集群方式#没置feign客户端超时时间(OpenFeign歉认支持ribbon)ribbon:  ReadTimeout: 5000    #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间  ConnectTimeout: 5000  #指的是建立连接后从服务器读取到可用资源所用的时间logging:  level:    com.example.springcloud.service.PaymentFeignService: debug  # feign日志以什么级别监控哪个接口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableFeignClientspublic class Hystrix_Order_Main_80 {    public static void main(String[] args) {        SpringApplication.run(Hystrix_Order_Main_80.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类</p><p>​service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component@FeignClient(value = "CLOUD-HYSTRIX-PAYMENT-SERVICE") //value是服务名称public interface PaymentFeignService {    @GetMapping("/payment/hystrix/ok/{id}")    public String paymentInfo(@PathVariable("id") Integer id);    @GetMapping("/payment//hystrix/timeout/{id}")    public String paymentInfo_TimeOut(@PathVariable("id") Integer id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4j@RequestMapping("/consumer")public class OrderFeignController {    @Autowired    private PaymentFeignService paymentFeignService;    @GetMapping("/hystrix/ok/{id}")    public  String paymentInfo_OK(@PathVariable("id") Integer id){        return paymentFeignService.paymentInfo(id);    }    @GetMapping("/hystrix/timeout/{id}")    public  String paymentInfo_TimeOut(@PathVariable("id")Integer id){        String result = paymentFeignService.paymentInfo_TimeOut(id);        log.info("result={}",result);        return result;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class FeignConfig {    @Bean    Logger.Level feignLoggerLevel(){        return Logger.Level.FULL;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，启动顺序：7001、7002、7003、Hystrix_PaymentMain_8001、Hystrix_Order_Main_80</p><p>访问：<a href="http://localhost/consumer/hystrix/ok/31">http://localhost/consumer/hystrix/ok/31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022155438795.png" alt="image-20221022155438795"></p><p>访问：<a href="http://localhost/consumer/hystrix/timeout/31">http://localhost/consumer/hystrix/timeout/31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022155417832.png" alt="image-20221022155417832"></p><p>超时解决</p><ul><li>对方服务(8001)超时了，调用者(80)不能一直卡死等待，必须有服务降级</li><li>对方服务(8001)down机了，调用者(80)不能一直卡死等待，必须有服务降级</li><li>对方服务(8001)OK，调用者(80)自己出故障或有自我要求（自己的等待时间小于服务提供者）</li></ul><h5 id="服务降级-1"><a href="#服务降级-1" class="headerlink" title="服务降级"></a>服务降级</h5><p>降级配置，加==@HystrixCommand注解== </p><p>设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作服务降级==fallback==</p><h6 id="8001fallback"><a href="#8001fallback" class="headerlink" title="8001fallback"></a>8001fallback</h6><p>1、修改PaymentService，并在主启动类加==@EnableCircuitBreaker==注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 超时访问，演示降级 */@HystrixCommand(fallbackMethod = "paymentInfo_TimeOutHandler",        commandProperties = {@HystrixProperty(name = "execution.isolation.thread.timeoutInMillisecondes",value = "3000")})public String paymentInfo_TimeOut(@PathVariable("id")Integer id){    int second = 5;    try {        TimeUnit.SECONDS.sleep(second);    } catch (InterruptedException e) {        e.printStackTrace();    }    return  "线程池：" + Thread.currentThread().getName()+ "paymentInfo_TimeOut,id=" +id +"\t" +"O(∩_∩)O哈哈~"+"超时了，耗时"+second+"秒";}public String paymentInfo_TimeOutHandler(Integer id){    return "/(ToT)/调用支付接口超时或异常:\t"+"\t当前线程池名字"+Thread.currentThread().getName();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://localhost:8001/payment/hystrix/timeout/31">http://localhost:8001/payment/hystrix/timeout/31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022164433030.png" alt="image-20221022164433030"></p><h6 id="80fallback"><a href="#80fallback" class="headerlink" title="80fallback"></a>80fallback</h6><p>修改OrderFeignController，并在主启动类加==@EnableCircuitBreaker==注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/hystrix/timeout/{id}")@HystrixCommand(fallbackMethod = "paymentTimeOutFallbackMethod",commandProperties = {@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value = "1500")})public  String paymentInfo_TimeOut(@PathVariable("id")Integer id){    String result = paymentFeignService.paymentInfo_TimeOut(id);    log.info("result={}",result);    return result;}public String paymentTimeOutFallbackMethod(@PathVariable Integer id){    return "我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,o(-T)o";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://localhost/consumer/hystrix/timeout/31">http://localhost/consumer/hystrix/timeout/31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022170745610.png" alt="image-20221022170745610"></p><h6 id="Hystrix全局服务降级DefaultProperties"><a href="#Hystrix全局服务降级DefaultProperties" class="headerlink" title="Hystrix全局服务降级DefaultProperties"></a>Hystrix全局服务降级DefaultProperties</h6><p>@DefaultProperties(defaultFallback = “”)</p><p>1:1 每个方法配置一个服务降级方法，技术上可以，实际上很low</p><p>1:N 除了个别重要核心业务有专属，其它普通的可以通过@DefaultProperties(defaultFallack = “”)统一跳转到统一处理结果页面，通用的和独享的各自分开，==避免了代码膨胀，合理减少了代码量==</p><p>使用方式：在接口上使用==@DefaultProperties(defaultFallback = “”)注解==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022184123605.png" alt="image-20221022184123605"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022184207565.png" alt="image-20221022184207565"></p><h6 id="Hystrix通用服务降级FeignFallback"><a href="#Hystrix通用服务降级FeignFallback" class="headerlink" title="Hystrix通用服务降级FeignFallback"></a>Hystrix通用服务降级FeignFallback</h6><p>本次案例服务降级处理是在<strong>客户端80</strong>实现完成的，与服务端8001没有关系只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦</p><p>根据cloud-hystrix-consumer-feign-order80已经有的PaymentFeignService接口，重新新建一个类(==PaymentFallbackService==)实现该接口，==统一为接口里面的方法进行异常处理==</p><p>PaymentFallbackService类实现PaymentFeignService接口，并在PaymentFeignService的注解@FeignClient中添加fallback的属性值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class PaymentFallbackService implements PaymentFeignService {    @Override    public String paymentInfo(Integer id) {        return "PaymentFallbackService fall back,paymentInfo_Ok";    }    @Override    public String paymentInfo_TimeOut(Integer id) {        return "PaymentFallbackService fall back,paymentInfo_TimeOut";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022190208066.png" alt="image-20221022190208066"></p><p>YAML文件添加如下的内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#用于服务降级在注解@FeignClient中添加fallbackFactory属性值feign:  hystrix:    enabled: true  #在Feign中开启Hystrix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022190033207.png" alt="image-20221022190033207"></p><p>启动服务访问：<a href="http://localhost/consumer/hystrix/ok/31">http://localhost/consumer/hystrix/ok/31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022190636308.png" alt="image-20221022190636308"></p><p>故意关掉服务8001，再次访问<a href="http://localhost/consumer/hystrix/ok/31%EF%BC%8C%E6%AD%A4%E6%97%B6%E6%9C%8D%E5%8A%A1%E7%AB%AFprovider%E5%B7%B2%E7%BB%8Fdown%E4%BA%86%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%91%E4%BB%AC%E5%81%9A%E4%BA%86%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E5%A4%84%E7%90%86%EF%BC%8C%E8%AE%A9%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8D%E5%8F%AF%E7%94%A8%E6%97%B6%E4%B9%9F%E4%BC%9A%E8%8E%B7%E5%BE%97%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E8%80%8C%E4%B8%8D%E4%BC%9A%E6%8C%82%E8%B5%B7%E8%80%97%E6%AD%BB%E6%9C%8D%E5%8A%A1%E5%99%A8">http://localhost/consumer/hystrix/ok/31，此时服务端provider已经down了，但是我们做了服务降级处理，让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022190733585.png" alt="image-20221022190733585"></p><h5 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h5><p><a href="https://martinfowler.com/bliki/CircuitBreaker.html">https://martinfowler.com/bliki/CircuitBreaker.html</a></p><h6 id="什么是熔断？"><a href="#什么是熔断？" class="headerlink" title="什么是熔断？"></a>什么是熔断？</h6><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。==当检测到该节点微服务调用响应正常后，恢复调用链路。==</p><p>在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是@HystrixCommand。</p><h6 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h6><p>修改cloud-hystrix-provider-payment8001</p><p>在PaymentService添加如下的内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//服务熔断    @HystrixCommand(fallbackMethod = "paymentCircuitBreaker_fallback" ,commandProperties = {            @HystrixProperty(name = "circuitBreaker.enabled",value = "true"),  //是否开启断路器            @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold",value = "10"),  //请求次数            @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds",value = "10000"), //时间窗口期            @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage",value = "60"),  //失败率达到多少后跳闸    })    public String paymentCircuitBreaker(@PathVariable("id") Integer id){        if (id &lt; 0){            throw new RuntimeException("id 不能为负数");        }        String serialNumber = IdUtil.simpleUUID(); //相当于UUID.randomUUID().toString()        return Thread.currentThread().getName() + "\t" + "调用成功，流水号：" + serialNumber;    }    public String paymentCircuitBreaker_fallback(@PathVariable("id") Integer id){        return "id=" + id+ "不能为负数，请稍后再试.............";    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>why配置这些参数</p><p>在PaymentController调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/circuit/{id}")    public String paymentCircuitBreaker(@PathVariable("id") Integer id){        String result = paymentService.paymentCircuitBreaker(id);        log.info("result={}",result);        return result;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><ul><li><p>自测cloud-hystrix-provider-payment8001</p></li><li><p>正确 <a href="http://localhost:8001/payment/circuit/31">http://localhost:8001/payment/circuit/31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022201422777.png" alt="image-20221022201422777"></p></li><li><p>错误  <a href="http://localhost:8001/payment/circuit/-31">http://localhost:8001/payment/circuit/-31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022201534209.png" alt="image-20221022201534209"></p></li></ul><h6 id="原理（总结）"><a href="#原理（总结）" class="headerlink" title="原理（总结）"></a>原理（总结）</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022201915990.png" alt="image-20221022201915990"></p><p><strong>熔断的类型：</strong></p><ul><li>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态</li><li>熔断关闭：熔断关闭不会对服务进行熔断</li><li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li></ul><p>断路器在什么情况下开始起作用？</p><p>涉及到断路器的三个重要参数：==快照时间窗、请求总数阀值、错误百分比阀值==。</p><ul><li>1:快照时间窗:断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。</li><li>2∶请求总数阀值:在快照时间窗内，必须满足请求总数阀值才有资格熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次，即使所有的请求都超时或其他原因失败，断路器都不会打开。</li><li>3:错误百分比阀值:当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开。</li></ul><p><strong>断路器开启或者关闭的条件？</strong></p><ul><li>当满足一定的阀值的时候（默认10秒内超过20个请求次数)</li><li>当失败率达到一定的时候（默认10秒内超过50%的请求失败)到达以上阀值，断路器将会开启</li><li>当开启的时候，所有请求都不会进行转发</li><li>一段时间之后（默认是5秒)，这个时候断路器是半开状态，会让其中一个请求进行转发。</li><li>如果成功，断路器会关闭，若失败，继续开启。重复4和5</li></ul><h4 id="服务监控hystrixDashboard-1"><a href="#服务监控hystrixDashboard-1" class="headerlink" title="服务监控hystrixDashboard"></a>服务监控hystrixDashboard</h4><h5 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h5><p>除了隔离依赖服务的调用以外，Hystrix还提供了==准实时的调用监控(Hystrix Dashboard)==，Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><h5 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h5><p>新建cloud-consumer-hystrix-dashboard9001</p><p>pom</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--hystrix-dashboard--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 9001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Hystrix_Dashboard_Main_9001+新注解==@EnableHystrixDashboard==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableHystrixDashboardpublic class Hystrix_Dashboard_Main_9001 {    public static void main(String[] args) {        SpringApplication.run(Hystrix_Dashboard_Main_9001.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有Provider微服务提供类(8001/8002/8003)都需要监控依赖配置</p><p>启动cloud-consumer-hystrix-dashboard9001该微服务后续将监控微服务8001,访问地址：<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221022235003691.png" alt="image-20221022235003691"></p><h5 id="断路器演示"><a href="#断路器演示" class="headerlink" title="断路器演示"></a>断路器演示</h5><p>修改cloud-hystrix-provider-payment8001的主启动类，在主启动类添加如下的配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Beanpublic ServletRegistrationBean getServlet(){    HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet();    ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; registrationBean = new ServletRegistrationBean&lt;&gt;(streamServlet);    registrationBean.setLoadOnStartup(1);    registrationBean.addUrlMappings("/hystrix.stream");    registrationBean.setName("HystrixMetricsStreamServlet");    return registrationBean;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221022235902025.png" alt="image-20221022235902025"></p><h6 id="监控测试"><a href="#监控测试" class="headerlink" title="监控测试"></a>监控测试</h6><p>启动1个eureka或者3个eureka集群均可</p><p>观察监控窗口</p><p>9001监控8001</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023000308212.png" alt="image-20221023000308212"></p><p>测试，先启动9001、7001、7002、7003、Hystrix_PaymentMain_8001</p><p><a href="http://localhost:8001/payment/circuit/31%E3%80%81http://localhost:8001/payment/circuit/-31">http://localhost:8001/payment/circuit/31、http://localhost:8001/payment/circuit/-31</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023000945541.png" alt="image-20221023000945541"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023000842224.png" alt="image-20221023000842224"></p><h3 id="zuul路由网关（不建议使用）"><a href="#zuul路由网关（不建议使用）" class="headerlink" title="zuul路由网关（不建议使用）"></a>zuul路由网关（不建议使用）</h3><h4 id="第一季中有笔记和案例"><a href="#第一季中有笔记和案例" class="headerlink" title="第一季中有笔记和案例"></a>第一季中有笔记和案例</h4><h3 id="Gateway新一代网关"><a href="#Gateway新一代网关" class="headerlink" title="Gateway新一代网关"></a>Gateway新一代网关</h3><h4 id="概述简介"><a href="#概述简介" class="headerlink" title="概述简介"></a>概述简介</h4><h5 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h5><p>上一代zuul 1.X：<a href="https://github.com/Netflix/zuul/wiki">https://github.com/Netflix/zuul/wiki</a></p><p>当前gateway：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/</a></p><h5 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h5><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5,Spring Boot 2和 Project Reactor等技术。</p><p>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如：熔断、限流、重试等</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023002114590.png" alt="image-20221023002114590"></p><p>SpringCloud Gateway是Spring Cloud的一个全新项目，基于Spring 5.0+Spring Boot 2.0和Project Reactor等技术开发的网关，它旨在为微服务架构提供—种简单有效的统一的API路由管理方式。</p><p>SpringCloud Gateway作为Spring Cloud生态系统中的网关，目标是替代.Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul .0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty.</p><p>Spring Cloud Gateway的目标提供统一的路由方式且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p><p>==SpringCloud Gateway使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架。==</p><h5 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h5><ul><li>反向代理</li><li>鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控等等</li></ul><h5 id="微服务架构中网关在哪里"><a href="#微服务架构中网关在哪里" class="headerlink" title="微服务架构中网关在哪里"></a>微服务架构中网关在哪里</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023002702212.png" alt="image-20221023002702212"></p><h5 id="有Zuul了怎么又出来了gateway"><a href="#有Zuul了怎么又出来了gateway" class="headerlink" title="有Zuul了怎么又出来了gateway"></a>有Zuul了怎么又出来了gateway</h5><h6 id="我们为什么选择Gateway"><a href="#我们为什么选择Gateway" class="headerlink" title="我们为什么选择Gateway?"></a>我们为什么选择Gateway?</h6><p><strong>1.neflix不太靠谱，zuul2.0一直跳票，迟迟不发布</strong></p><p>Gateway是==基于异步非阻塞模型上==进行开发的，性能方面不需要担心。虽然Netflix早就发布了最新的Zuul 2.x，但Spring Cloud貌似没有整合计划。而且Netflix相关组件都宣布进入维护期</p><p><strong>2.SpringCloud Gateway具有如下特性</strong></p><ul><li>==基于Spring Framework 5, Project Reactor和Spring Boot 2.0进行构建;==</li><li>动态路由:能够匹配任何请求属性;</li><li>可以对路由指定Predicate(断言）和Filter (过滤器);</li><li>集成Hystrix的断路器功能;</li><li>集成Spring Cloud服务发现功能;</li><li>易于编写的Predicate(断言）和Filter (过滤器);</li><li>请求限流功能;</li><li>支持路径重写。</li></ul><p><strong>3.SpringCloud Gateway 与Zuul的区别</strong></p><p>在SpringCloud Finchley正式版之前，Spring Cloud推荐的网关是 Netflix提供的Zuul :</p><p>1、Zuul 1.x，是一个基于阻塞I/O的APl Gateway</p><p>2、Zuul 1.x==基于Servlet 2.5使用阻塞架构==它不支持任何长连接(如WebSocket) zuul的设计模式和Nginx较像，每次Ⅱ/O操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx用C++实现，Zuul用Java实现，而VM本身会有第一次加载较慢的情况，使得Zuul的性能相对较差。</p><p>3、Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。Zuul 2.x的性能较Zuul 1.x有较大提升。在性能方面，根据官方提供的基准测试, Spring Cloud Gateway的RPS(每秒请求数）是Zuul的1.6倍。</p><p>4、Spring Cloud Gateway建立在Spring Framework 5、Project Reactor和Spring Boot2之上，使用非阻塞API。</p><p>5、Spring Cloud Gateway还支持WebSocket，并且与Spring紧密集成拥有更好的开发体验</p><h6 id="Zuul1-x模型"><a href="#Zuul1-x模型" class="headerlink" title="Zuul1.x模型"></a>Zuul1.x模型</h6><p>Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Servlet lO处理模型。</p><p>container启动时构造servlet对象并调用servlet init()进行初始化;</p><p>container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程)然后调用service()。</p><p>container关闭时调用servlet destory0销毁servlet;</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023003928829.png" alt="image-20221023003928829"></p><p>缺点：servlet是一个简单的网络IO模型，当请求进入servlet container时，servlet container就会为其绑定一个线程，==在并发不高的场景下这种模型是适用的==。但是一旦高并发(比如抽风用jemeter压)，线程数量就会上涨，而线程资源代价是昂贵的(上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势</p><p>所以Zuul 1.X是==基于servlet之上的一个阻塞式处理模型==，即spring实现了处理所有request请求的一个servlet (Dispatcherservlet)并由该servlet阻塞式处理处理。所以Springcloud Zuul无法摆脱servlet模型的弊端</p><h6 id="GateWay模型"><a href="#GateWay模型" class="headerlink" title="GateWay模型"></a>GateWay模型</h6><p>WebFlux：官网 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web">https://docs.spring.io/spring/docs/current/spring-framework-reference/web</a></p><p>==在Servlet3.1之后有了异步非阻塞的支持==。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程(Spring5必须让你使用java8)</p><p>Spring WebFlux是Spring 5.0引入的新的响应式框架，区别于Spring MVC，它不需要依赖Servlet API，它是完全异步非阻塞的，并且基于Reactor来实现响应式流规范。</p><h4 id="三大核心概念"><a href="#三大核心概念" class="headerlink" title="三大核心概念"></a>三大核心概念</h4><p><strong>Route(路由)</strong></p><p>​路由是构建网关的基本模块，它由ID，目标URl，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p><p><strong>Predicate(断言）</strong></p><p>​开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，==如果请求与断言相匹配则进行路由==</p><p><strong>Filter(过滤)</strong></p><p>​指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p><p>总体</p><h4 id="Gateway工作流程"><a href="#Gateway工作流程" class="headerlink" title="Gateway工作流程"></a>Gateway工作流程</h4><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023120752835.png" alt="image-20221023120752835"></p><h4 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h4><h5 id="新建cloud-gateway-gateway9527模块"><a href="#新建cloud-gateway-gateway9527模块" class="headerlink" title="新建cloud-gateway-gateway9527模块"></a>新建cloud-gateway-gateway9527模块</h5><h5 id="POM-2"><a href="#POM-2" class="headerlink" title="POM"></a>POM</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：gateway不需要这两maven依赖，否则就会报错</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221023124916922.png" alt="image-20221023124916922"></p><h5 id="YML"><a href="#YML" class="headerlink" title="YML"></a>YML</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 9527spring:  application:    name: cloud-gatewayeureka:  instance:    hostname: cloud-gateway-service  client:    register-with-eureka: true    fetch-registry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/  #集群方式    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClientpublic class GateWay_Main_9527 {    public static void main(String[] args) {        SpringApplication.run(GateWay_Main_9527.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9527网关如何做路由映射那"><a href="#9527网关如何做路由映射那" class="headerlink" title="9527网关如何做路由映射那?? ?"></a>9527网关如何做路由映射那?? ?</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023123123733.png" alt="image-20221023123123733"></p><h5 id="YML新增网关配置（9527）"><a href="#YML新增网关配置（9527）" class="headerlink" title="YML新增网关配置（9527）"></a>YML新增网关配置（9527）</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  application:    name: cloud-gateway  cloud:    gateway:      routes:        - id: payment_routh        #payment_route  路由的ID，没有固定规则但要求唯一，建议配合服务名          uri: http://localhost:8001   #匹配后提供服务的路由地址          predicates:            - Path=/payment/get/**    #断言，路径相匹配的进行路由        - id: payment_routh2        #payment_route  路由的ID，没有固定规则但要求唯一，建议配合服务名          uri: http://localhost:8001   #匹配后提供服务的路由地址          predicates:            - Path=/payment/lb/**     #断言，路径相匹配的进行路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023123750440.png" alt="image-20221023123750440"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023132637013.png" alt="image-20221023132637013"></p><h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><p>启动顺序：7001、7002、7003、8001（cloud-eureka-provider-payment8001）、9527</p><p>访问说明</p><ul><li><p>添加网关前：<a href="http://localhost:8001/payment/1">http://localhost:8001/payment/1</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023125435937.png" alt="image-20221023125435937"></p></li><li><p>添加网关后：<a href="http://localhost:9527/payment/1">http://localhost:9527/payment/1</a></p></li></ul><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023125516094.png" alt="image-20221023125516094"></p><h5 id="YML配置说明"><a href="#YML配置说明" class="headerlink" title="YML配置说明"></a>YML配置说明</h5><p>Gateway网关路由有两种配置方式:</p><ul><li><p>在配置文件yml中配置，如上的配置</p></li><li><p>代码中注入RouteLocator的Bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class GateWayConfig {    /**     * 配置了一个id为route-name的路由规则，     * 当访问地址http://localhost:9527/guonei时会自动转发到地址: http://news.baidu.com/guonei     * @param builder     * @return     */    @Bean    public RouteLocator customRouteLocator1(RouteLocatorBuilder builder){        RouteLocatorBuilder.Builder routes = builder.routes();        routes.route("path_route_example1",r -&gt; r.path("/guonei").uri("http://news.baidu.com/guonei")).build();        return routes.build();    }    @Bean    public RouteLocator customRouteLocator2(RouteLocatorBuilder builder){        RouteLocatorBuilder.Builder routes = builder.routes();        routes.route("path_route_example2",r -&gt; r.path("/guoji").uri("http://news.baidu.com/guonji")).build();        return routes.build();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：<a href="http://localhost:9527/guonei">http://localhost:9527/guonei</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023131157338.png" alt="image-20221023131157338"></p><p><a href="http://localhost:9527/guoji">http://localhost:9527/guoji</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023131518807.png" alt="image-20221023131518807"></p></li></ul><h4 id="通过微服务名实现动态路由Predicate的使用"><a href="#通过微服务名实现动态路由Predicate的使用" class="headerlink" title="通过微服务名实现动态路由Predicate的使用"></a>通过微服务名实现动态路由Predicate的使用</h4><p>默认情况下Gateway会根据注册中心注册的服务列表，==以注册中心上微服务名为路泾创建动态路由进行转发，从而实现动态路由的功能==</p><p>启动:</p><h5 id="POM，添加如下的maven依赖"><a href="#POM，添加如下的maven依赖" class="headerlink" title="POM，添加如下的maven依赖"></a>POM，添加如下的maven依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="YML-1"><a href="#YML-1" class="headerlink" title="YML"></a>YML</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  application:    name: cloud-gateway  cloud:    gateway:      discovery:        locator:          enabled: true  #开启从注册中心动态创建路由的功能，利用微服务名进行路由      routes:        - id: payment_routh        #payment_route  路由的ID，没有固定规则但要求唯一，建议配合服务名          uri: lb://cloud-payment-service   #匹配后提供服务的路由地址          predicates:            - Path=/payment/**    #断言，路径相匹配的进行路由                    - id: payment_routh2        #payment_route  路由的ID，没有固定规则但要求唯一，建议配合服务名          uri: lb://cloud-payment-service   #匹配后提供服务的路由地址          predicates:            - Path=/payment/lb/**     #断言，路径相匹配的进行路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023134044697.png" alt="image-20221023134044697"></p><p>需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。</p><p>lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri</p><h5 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h5><p><a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023134236317.png" alt="image-20221023134236317"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023134311386.png" alt="image-20221023134311386"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023134328549.png" alt="image-20221023134328549"></p><h5 id="常用的Route-Predicate"><a href="#常用的Route-Predicate" class="headerlink" title="常用的Route Predicate"></a>常用的Route Predicate</h5><p>官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories</a></p><ul><li><p>After Route Predicate</p></li><li><p>Before Route Predicate</p></li><li><p>Between Route Predicat</p></li><li><p>Cookie Route Predicate</p><ul><li><p>cookie 路由谓词工厂有两个参数，cookie name和正则表达式。路由规则会通过获取对应的Cookie name值和正则表达式去匹配，如果匹配上就会执行路由，如果没有匹配上则不执行</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  cloud:    gateway:      routes:      - id: cookie_route        uri: https://example.org        predicates:        - Cookie=username,lt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带cookie访问<img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023141249232.png" alt="image-20221023141249232"></p></li><li><p>不要带cookie访问<img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023141318213.png" alt="image-20221023141318213"></p></li></ul></li><li><p>Header Route Predicate</p></li><li><p>Host Route Predicate</p></li><li><p>Method Route Predicate</p></li><li><p>Path Route Predicate</p></li><li><p>Query Route Predicate</p></li></ul><h4 id="Filter的使用"><a href="#Filter的使用" class="headerlink" title="Filter的使用"></a>Filter的使用</h4><p>官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories</a></p><h5 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h5><p>Route filters allow the modification of the incoming HTTP request or outgoing HTTP response in some manner. Route filters are scoped to a particular route. Spring Cloud Gateway includes many built-in GatewayFilter Factories.</p><p> For more detailed examples of how to use any of the following filters, take a look at the <a href="https://github.com/spring-cloud/spring-cloud-gateway/tree/master/spring-cloud-gateway-core/src/test/java/org/springframework/cloud/gateway/filter/factory">unit tests</a>.</p><p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。</p><p>Spring Cloud Gateway内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生</p><h5 id="Spring-Cloud-Gateway的Filter"><a href="#Spring-Cloud-Gateway的Filter" class="headerlink" title="Spring Cloud Gateway的Filter"></a>Spring Cloud Gateway的Filter</h5><p><strong>生命周期</strong></p><ul><li>pre</li><li>post</li></ul><p><strong>种类</strong></p><ul><li>GatewayFilter  <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories</a></li><li>GlobalFilter     <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#global-filters">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#global-filters</a></li></ul><h5 id="常用的GatewayFilter"><a href="#常用的GatewayFilter" class="headerlink" title="常用的GatewayFilter"></a>常用的GatewayFilter</h5><p>AddRequestParameter</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023143238760.png" alt="image-20221023143238760"></p><h5 id="自定义过滤器（重点）"><a href="#自定义过滤器（重点）" class="headerlink" title="自定义过滤器（重点）"></a>自定义过滤器（重点）</h5><h6 id="主要实现的两个接口"><a href="#主要实现的两个接口" class="headerlink" title="主要实现的两个接口"></a>主要实现的两个接口</h6><ul><li><strong>==GlobalFilter==</strong> </li><li><strong>Ordered</strong></li></ul><h6 id="能干嘛-1"><a href="#能干嘛-1" class="headerlink" title="能干嘛"></a>能干嘛</h6><ul><li>全局日志记录</li><li>统—网关鉴权等等</li></ul><h6 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component@Slf4jpublic class MyGateWayFilterConfig implements GlobalFilter, Ordered {    @Override    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {        log.info("come in MyLogGateWayFilter：" + new Date());        String uname = exchange.getRequest().getQueryParams().getFirst("uname");        if (uname == null){            log.warn("用户名为空，非法用户.....");            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);            return exchange.getResponse().setComplete();        }        return chain.filter(exchange);    }    @Override    public int getOrder() {        return 0;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 9527spring:  application:    name: cloud-gateway  cloud:    gateway:      discovery:        locator:          enabled: true  #开启从注册中心动态创建路由的功能，利用微服务名进行路由          lower-case-service-id: true  #使用小写服务名，默认是大写      routes:        - id: payment_routh        #payment_route  路由的ID，没有固定规则但要求唯一，建议配合服务名#          uri: http://localhost:8001   #匹配后提供服务的路由地址          uri: lb://cloud-payment-service   #匹配后提供服务的路由地址          predicates:            - Path=/payment/**    #断言，路径相匹配的进行路由            - Method=GET,post    #只对get和post请求有效        - id: payment_routh2        #payment_route  路由的ID，没有固定规则但要求唯一，建议配合服务名#          uri: http://localhost:8001   #匹配后提供服务的路由地址          uri: lb://cloud-payment-service   #匹配后提供服务的路由地址          predicates:            - Path=/payment/lb/**     #断言，路径相匹配的进行路由eureka:  instance:    hostname: cloud-gateway-service  client:    register-with-eureka: true    fetch-registry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/  #集群方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h6><p><strong>没有权限的情况</strong>：<a href="http://localhost:9527/payment/4">http://localhost:9527/payment/4</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023145249671.png" alt="image-20221023145249671"></p><p><strong>拥有权限后</strong>：<a href="http://localhost:9527/payment/4?uname=zs%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%BF%99%E5%B0%B1%E8%BE%BE%E5%88%B0%E7%9A%84%E8%BF%87%E6%BB%A4%E7%9A%84%E4%BD%9C%E7%94%A8">http://localhost:9527/payment/4?uname=zs，可以访问，这就达到的过滤的作用</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023145345334.png" alt="image-20221023145345334"></p><h3 id="SpringCloud-Config分布式配置中心-1"><a href="#SpringCloud-Config分布式配置中心-1" class="headerlink" title="SpringCloud Config分布式配置中心"></a>SpringCloud Config分布式配置中心</h3><h4 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h4><h5 id="分布式系统面临的—配置问题-1"><a href="#分布式系统面临的—配置问题-1" class="headerlink" title="分布式系统面临的—配置问题"></a>分布式系统面临的—配置问题</h5><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理就面临这繁琐的操作</p><h5 id="是什么？-3"><a href="#是什么？-3" class="headerlink" title="是什么？"></a>是什么？</h5><p>是一个==中心化的外部配置==。SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为==各个不同微服务应用==的所有环境提供了一个==中心化的外部配置==。</p><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/SpringCloud.assets/image-20221020123430982.png" alt="image-20221020123430982"></p><p>SpringCloud Config分为==服务端==和==客户端==两部分。</p><p><strong>服务端</strong>也称为==分布式配置中心，它是一个独立的微服务应用==，用来配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</p><p><strong>客户端</strong>则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p><h5 id="能干嘛？-3"><a href="#能干嘛？-3" class="headerlink" title="能干嘛？"></a>能干嘛？</h5><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><h5 id="与GitHub整合配置-1"><a href="#与GitHub整合配置-1" class="headerlink" title="与GitHub整合配置"></a>与GitHub整合配置</h5><p>由于SpringCloud Config默认使用Git来存储配置文件(也有其它方式，比如支持SVN和本地文件)，但最推荐的还是Git，而且使用的是http/https访问的形式</p><h4 id="Config服务端配置与测试"><a href="#Config服务端配置与测试" class="headerlink" title="Config服务端配置与测试"></a>Config服务端配置与测试</h4><h5 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h5><p>第一步、用自己的GitHub账号在GitHub上新建一个名为microservicecloud-config的新Repository</p><p>第二步、由上一步获得SSH协议的git地址<a href="mailto:git@github.com">git@github.com</a>:rookiesnewbie/microservicecloud-config.git</p><p><img src="D:\java笔记\笔记\SpringCloud.assets\image-20221020125407171.png" alt="image-20221020125407171"></p><p>第三步、本地硬盘目录上新建git仓库（springcloud-microservicecloud-config目录）并clone</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https://github.com/rookiesnewbie/microservicecloud-config.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四步、在本地D:\Java\springcloud-microservicecloud-config里面新建三个config-dev.yml、config-test.yml、config-prod.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">config:  info: "master branch , springcloud-config/ config-dev.yml version=1"#注意：编码必须是UTF-8的格式！！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">config:  info: "master branch , springcloud-config/ config-test.yml version=1"#注意：编码必须是UTF-8的格式！！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">config:  info: "master branch , springcloud-config/ config-prod.yml version=1"#注意：编码必须是UTF-8的格式！！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第五步、将上一步的YML文件推送到github上</p><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/SpringCloud.assets/image-20221020131242877.png" alt="image-20221020131242877"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add application.ymlgit commit -m "init file"git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第六步、新建Module模块servicecloud-config-3344，它即为Cloud的配置中心模块</p><p>第七步、POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloudConfig server--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--eureka-client--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--图形监控--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第八步、编写YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 3344spring:  application:    name: service-cloud-config-center  #应用名称(即对外暴露的微服务名称)  cloud:    config:      server:        git:          #          uri: https://github.com/rookiesnewbie/microservicecloud-config.git  #GitHub上面的git仓库名字          uri: https://gitee.com/lisircode/microservicecloud-config.git  #Gitee上面的git仓库名字          username: lisircode      #Gitee用户名          password: liteng0220    #Gitee用户密码          search-paths:            - springcloud-config  #搜索目录      label: master   #读取分支eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/l,http://eureka7003.com:7003/eureka/  #集群方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第九步、主启动类Config_3344_StartSpringCloudApp</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableConfigServer  //开启SpringCloud Config配置中心注解支持public class Config_3344_StartSpringCloudApp {    public static void main(String[] args) {        SpringApplication.run(Config_3344_StartSpringCloudApp.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第十步\windows下修改hosts文件，增加映射</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 config-3344.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第十一步、测试通过Config微服务是否可以从GitHub上获取配置内容</p><p>启动微服务3344</p><p><a href="http://localhost:3344/config-dev.yml">http://localhost:3344/config-dev.yml</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023163538186.png" alt="image-20221023163538186"></p><p><a href="http://localhost:3344/config-test.yml">http://localhost:3344/config-test.yml</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023163735683.png" alt="image-20221023163735683"></p><p><a href="http://localhost:3344/config-xxx.ymll">http://localhost:3344/config-xxx.ymll</a> (不存在的配置)</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023163820384.png" alt="image-20221023163820384"></p><h5 id="配置读取规则-1"><a href="#配置读取规则-1" class="headerlink" title="配置读取规则"></a>配置读取规则</h5><p>官网<img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/SpringCloud.assets/image-20221020144434685.png" alt="image-20221020144434685"></p><ul><li><p>/{application}-{profile}.yml，此方式就是上面的访问方式</p></li><li><p>/{application}/{profile}[/{label}]，例如：<a href="http://localhost:3344/config/dev/master%E3%80%81http://localhost:3344/config/test/master">http://localhost:3344/config/dev/master、http://localhost:3344/config/test/master</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023163903611.png" alt="image-20221023163903611"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023163932926.png" alt="image-20221023163932926"></p></li><li><p>/{label}/{application}-{profile}.yml，例如：<a href="http://localhost:3344/master/config-dev.yml%E3%80%81http://localhost:3344/master/config-test.yml">http://localhost:3344/master/config-dev.yml、http://localhost:3344/master/config-test.yml</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023163958198.png" alt="image-20221023163958198"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023164025099.png" alt="image-20221023164025099"></p></li></ul><p>成功实现了用SpringCloud Config通过GitHub获取配置信息</p><h4 id="Config客户端配置与测试"><a href="#Config客户端配置与测试" class="headerlink" title="Config客户端配置与测试"></a>Config客户端配置与测试</h4><p>新建microservicecloud-config-client-3355</p><p>POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloudConfig server--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--eureka-client--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--图形监控--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--热部署--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bootstrap.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 3355spring:  cloud:    config:      name: config #需要从github上读取的配置文件名称，注意没有yml后缀名      profile: dev #读取后级名称上述3个综合: master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml      label: master      uri: http://config-3344.com:3344 #本微服务启动后先去找3344号服务，通过SpringCloudConfig获取GitHub的服务地址eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/l,http://eureka7003.com:7003/eureka/  #集群方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  application:    name: service-cloud-config-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>windows下修改hosts文件，增加映射</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1    client-config.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建rest类，验证是否能从GitHub上读取配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class ConfigClientRest {    @Value("${spring.application.name}")    private String applicationName;    @Value("${eureka.client.service-url.defaultZone}")    private String eurekaServers;    @Value("${server.port}")    private String port;    @Value("${config.info}")    private String info;    @GetMapping("/config")    public String getConfig(){        String str = "applicationName：" + applicationName + "\t"                +"eurekaServers：" + eurekaServers +"\t" + "port："+port;        System.out.println("************str："+str);        return info;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类ConfigClient_3355_StartSpringCloudApp</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class ConfigClient_3355_Start_SpringCloud_App {    public static void main(String[] args) {        SpringApplication.run(ConfigClient_3355_Start_SpringCloud_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：先启动3344、在启动3355 访问：<a href="http://localhost:3355/config">http://localhost:3355/config</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023165023598.png" alt="image-20221023165023598"></p><p>成功实现了客户端3355访问SpringCloud Config3344通过GitHub获取配置信息</p><p><strong>applicaiton. yml是用户级的资源配置项</strong></p><p><strong>bootstrap.yml是系统级的，==优先级更加高==</strong></p><p>Spring Cloud会创建一个Bootstrap Context，作为Spring应用的<code>Application Context</code>的==父上下文==。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment'。</code>Bootstrap<code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。</code></p><p>Bootstrap context和Application Context有着不同的约定，所以新增了一个bootstrap.yml文件，保证<code>Bootstrap Context</code>和<code>Application Context</code>配置的分离。</p><p><strong>分布式配置的动态刷新问题</strong></p><p>Linux运维修改GitHub上的配置文件内容做调整，==刷新3344，发现ConfigServer配置中心立刻响应，刷新3355，发现ConfigClient客户端没有任何响应，3355没有变化除非自己重启或者重新加载==，避免每次更新配置都要重启客户端微服务3355，所以需要配置Config客户端动态刷新，下面给出</p><h4 id="Config客户端之动态刷新"><a href="#Config客户端之动态刷新" class="headerlink" title="Config客户端之动态刷新"></a>Config客户端之动态刷新</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>修改3355模块</p><p>POM引入actuator监控</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--图形监控--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改YML，暴露监控端口</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#暴露监控端点management:  endpoints:    web:      exposure:        include: "*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023170533039.png" alt="image-20221023170533039"></p><p>在业务类Controller添加==@RefreshScope==注解</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023170706094.png" alt="image-20221023170706094"></p><p>==此时修改github—&gt; 3344 —-&gt;3355，并没有生效==</p><h5 id="此时需要怎么做？"><a href="#此时需要怎么做？" class="headerlink" title="此时需要怎么做？"></a><strong>此时需要怎么做？</strong></h5><p>答：需要==运维人员==发送==Post请求刷新3355==，注意必须是post请求，curl -X POST “<a href="http://localhost:3355/actuator/refresh">http://localhost:3355/actuator/refresh</a>“</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023171436074.png" alt="image-20221023171436074"></p><p>再次访问：<a href="http://localhost:3355/config%EF%BC%8C%E5%8D%B3%E5%8F%AF">http://localhost:3355/config，即可</a></p><p>==目前还存在的问题就是，假如有多个微服务客户端3355/3366/3377，每个微服务都要执行—次post请求，手动刷新的问题，因此引入Bus消息总线==</p><h3 id="SpringCloud-Bus消息总线"><a href="#SpringCloud-Bus消息总线" class="headerlink" title="SpringCloud Bus消息总线"></a>SpringCloud Bus消息总线</h3><h4 id="概述-11"><a href="#概述-11" class="headerlink" title="概述"></a>概述</h4><p>==<strong>Spring Cloud Bus配合Spring Cloud Config使用可以实现配置的动态刷新。</strong>==</p><p><strong>SpringCloud Bus支持两种消息代理：RabbitMQ和Kafka</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023172925131.png" alt="image-20221023172925131"></p><p>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，==它整合了Java的事件处理机制和消息中间件的功能==。Spring Clud Bus目前支持RabbitMQ和Kafka。</p><p>Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023190941198.png" alt="image-20221023190941198"></p><p><strong>什么是总线？</strong></p><p>在微服务架构的系统中，通常会使用==轻量级的消息代理==来构建一个==共用的消息主题==，并让系统中所有微服务买例都建接上来。由于==该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线==。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p><p><strong>基本原理</strong><br>ConfigClient实例都监听MQ中同一个topic（默认是springCloudBus）。当一个服务刷新数据的的候，它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p><h4 id="RabbitMQ环境配置"><a href="#RabbitMQ环境配置" class="headerlink" title="RabbitMQ环境配置"></a>RabbitMQ环境配置</h4><p>安装Erlang，下载地址: <a href="http://erlang.org/download/otp_win64_21.3.exe">http://erlang.org/download/otp_win64_21.3.exe</a></p><p>安装RabbitMQ，下载地址:<a href="https://github.com//rabbitmq/rabbitmq-server/releases/download/v3.7.17-rc.2/rabbitmq-server-3.7.17-rc.2.exe">https://github.com//rabbitmq/rabbitmq-server/releases/download/v3.7.17-rc.2/rabbitmq-server-3.7.17-rc.2.exe</a></p><p>进入RabbitMQ安装目录下的sbin目录</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023201506433.png" alt="image-20221023201506433"></p><p>输入以下命令启动管理功能</p><p><code>rabbitmq-plugins enable rabbitmq_management</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023202222171.png" alt="image-20221023202222171"></p><p>可视化插件</p><p>访问地址查看是否安装成功: <a href="http://localhost:15672/">http://localhost:15672/</a></p><p>输入账号密码并登录: guest  guest</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023202425419.png" alt="image-20221023202425419"></p><h4 id="SpringCloud-Bus动态刷新全局广播"><a href="#SpringCloud-Bus动态刷新全局广播" class="headerlink" title="SpringCloud Bus动态刷新全局广播"></a>SpringCloud Bus动态刷新全局广播</h4><h5 id="演示广播效果，增加复杂度，以3355为模板再制作一个3366"><a href="#演示广播效果，增加复杂度，以3355为模板再制作一个3366" class="headerlink" title="演示广播效果，增加复杂度，以3355为模板再制作一个3366"></a>演示广播效果，增加复杂度，以3355为模板再制作一个3366</h5><p>新建service-cloud-config-client-3366</p><p>POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloudConfig server--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--eureka-client--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--图形监控--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 3366spring:  cloud:    config:      name: config #需要从github上读取的配置文件名称，注意没有yml后缀名      profile: dev #读取后级名称上述3个综合: master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml      label: master      uri: http://config-3344.com:3344 #本微服务启动后先去找3344号服务，通过SpringCloudConfig获取GitHub的服务地址#服务注册到eureka地址eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/l,http://eureka7003.com:7003/eureka/  #集群方式#暴露监控端点management:  endpoints:    web:      exposure:        include: "*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class ConfigClient_3366_Start_SpringCloud_App {    public static void main(String[] args) {        SpringApplication.run(ConfigClient_3366_Start_SpringCloud_App.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RefreshScopepublic class ConfigClientRest {    @Value("${spring.application.name}")    private String applicationName;    @Value("${eureka.client.service-url.defaultZone}")    private String eurekaServers;    @Value("${server.port}")    private String port;    @Value("${config.info}")    private String info;    @GetMapping("/config")    public String getConfig(){        String str = "applicationName：" + applicationName + "\t"                +"eurekaServers：" + eurekaServers +"\t" + "port："+port;        System.out.println("************str："+str);        return info +"\t"+ "端口：" + port;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设计思想</p><ul><li><p>利用消息总线触发一个==客户端==/bus/refresh，从而刷新所有客户端的配置</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023213458413.png" alt="image-20221023213458413"></p></li><li><p>利用消息总线触发一个==服务端==ConfigServer的/bus/refresh端点，从而刷新所有客户端的配置</p></li></ul><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023213930332.png" alt="image-20221023213930332"></p><p>给cloud-config-center-3344配置中心==服务端==添加消息总线支持</p><p>在pom文件添加如下的的maven</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--图形监控--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在yaml配置文件添加如下内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#rabbitmq相关配置  rabbitmq:    host: localhost    port: 5672    username: guest    password: guest    ##rabbitmq相关配置，暴露bus刷新配置的端点management:  endpoints:    #暴露bus刷新配置的端点    web:      exposure:        include: 'bus-refresh'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023220901246.png" alt="image-20221023220901246"></p><p>给cloud-config-client-3355==客户端==添加消息总线支持</p><p>在pom文件添加如下的的maven</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--添加消息总线RabbitMQ支持--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;&lt;/dependency&gt; &lt;!--图形监控--&gt;&lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在yaml配置文件添加如下内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#rabbitmq相关配置  rabbitmq:    host: localhost    port: 5672    username: guest    password: guest  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023220950840.png" alt="image-20221023220950840"></p><p>给cloud-config-client-3366==客户端==添加消息总线支持</p><p>在pom文件添加如下的的maven</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--添加消息总线RabbitMQ支持--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;&lt;/dependency&gt; &lt;!--图形监控--&gt;&lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在yaml配置文件添加如下内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#rabbitmq相关配置  rabbitmq:    host: localhost    port: 5672    username: guest    password: guest  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023220926690.png" alt="image-20221023220926690"></p><p>测试</p><p>1、修改Github_上配置文件增加版本号</p><p>2、发送post请求，curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh">http://localhost:3344/actuator/bus-refresh</a>“</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023223608059.png" alt="image-20221023223608059"></p><p>3、再次访问<a href="http://localhost:3344/master/config-dev.yml%E3%80%81http://localhost:3355/config%E3%80%81http://localhost:3366/config%EF%BC%8C%E6%AD%A4%E6%97%B6%E5%B0%B1%E8%BE%BE%E5%88%B0%E2%80%94%E6%AC%A1%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%B9%BF%E6%92%AD%E9%80%9A%E7%9F%A5%EF%BC%8C%E5%A4%84%E5%A4%84%E7%94%9F%E6%95%88%E7%9A%84%E6%95%88%E6%9E%9C%E4%BA%86">http://localhost:3344/master/config-dev.yml、http://localhost:3355/config、http://localhost:3366/config，此时就达到—次修改，广播通知，处处生效的效果了</a></p><h4 id="SpringCloud-Bus动态刷新定点通知"><a href="#SpringCloud-Bus动态刷新定点通知" class="headerlink" title="SpringCloud Bus动态刷新定点通知"></a>SpringCloud Bus动态刷新定点通知</h4><p>不想全部通知，只想定点通知。简单一句话，指定具体某一个实例生效而不是全部，公式：<code>http://localhost:配置中心端口号/actuator/bus-refresh/{destination}</code>，/bus/refresh请求不再发送到具体的服务实例上，而是发给config server通过destination参数类指定需要更新配置的服务或实例</p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>以刷新运行在3355端口上的config-client为例，只通知3355，不通知3366，curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh/service-cloud-config-client:3355">http://localhost:3344/actuator/bus-refresh/service-cloud-config-client:3355</a>“</p><p>==注意：curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh/service-cloud-config-client:3355%22%E4%B8%AD%E7%9A%84service-cloud-config-client%E6%98%AF%E6%8C%873355%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0==">http://localhost:3344/actuator/bus-refresh/service-cloud-config-client:3355"中的service-cloud-config-client是指3355的微服务名称==</a></p><h5 id="通知总结"><a href="#通知总结" class="headerlink" title="通知总结"></a>通知总结</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023225322016.png" alt="image-20221023225322016"></p><h3 id="SpringCloud-Stream消息驱动"><a href="#SpringCloud-Stream消息驱动" class="headerlink" title="SpringCloud Stream消息驱动"></a>SpringCloud Stream消息驱动</h3><h4 id="消息驱动概述"><a href="#消息驱动概述" class="headerlink" title="消息驱动概述"></a>消息驱动概述</h4><h5 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h5><p>屏蔽底层消息中间件的差异,降低切换成本，统一消息的编程模型</p><p>官网：<a href="https://spring.io/projects/spring-cloud-stream#overview">https://spring.io/projects/spring-cloud-stream#overview</a></p><p>​<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/</a></p><p>Spring Cloud Stream中文指导手册：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></p><p>==官方定义Spring Cloud Stream是一个构建消息驱动微服务的框架。==</p><p>应用程序通过inputs或者 outputs来与Spring Cloud Stream中binder对象交互。通过我们配置来binding(绑定)，而Spring Cloud Stream的 binder对象负责与消息中间件交互。所以，我们只需要搞清楚如何与Spring Cloud Stream交互就可以方便使用消息驱动的方式。通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。</p><p>Spring Cloud Stream为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。==目前仅支持RabbitMQ、Kafka。==</p><h5 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023231916085.png" alt="image-20221023231916085"></p><p>==通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离==。Stream中的消息通信方式遵循了发布-订阅模式，使用Topic主题进行广播，在RabbitMQ就是Exchange，在Kakfa中就是Topic</p><h5 id="Spring-Cloud-Stream标准流程套路"><a href="#Spring-Cloud-Stream标准流程套路" class="headerlink" title="Spring Cloud Stream标准流程套路"></a>Spring Cloud Stream标准流程套路</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023232308701.png" alt="image-20221023232308701"></p><h5 id="Stream编码API和常用注解"><a href="#Stream编码API和常用注解" class="headerlink" title="Stream编码API和常用注解"></a>Stream编码API和常用注解</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221023232435825.png" alt="image-20221023232435825"></p><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>Middleware</td><td>中间件，目前只支持RabbitMQ和Kafka</td></tr><tr><td>Binder</td><td>Binder是应用与消息中间件之间的封装，目前实行了Kafka和RabbitMQ的Binder，通过Binder可以很方便的连接中间件，可以动态的改变消息类型(对应于Kafka的topiRabbitMQ的exchange)，这些都可以通过配置文件来实现</td></tr><tr><td>@Input</td><td>注解标识输入通道，通过该输入通道接收到的消息进入应用程序</td></tr><tr><td>@Output</td><td>注解标识输出通道，发布的消息将通过该通道离开应用程序</td></tr><tr><td>@StreamListener</td><td>监听队列，用于消费者的队列的消息接收</td></tr><tr><td>@EnableBinding</td><td>指信道channel和exchange绑定在一起</td></tr></tbody></table><h4 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h4><p>工程中新建三个子模块</p><h5 id="消息驱动之生产者"><a href="#消息驱动之生产者" class="headerlink" title="消息驱动之生产者"></a>消息驱动之生产者</h5><p><strong>cloud-stream-rabbitmq-provider8801，作为生产者进行发消息模块</strong></p><p>pom文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloud stream--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--eureka-client--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--图形监控--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8801spring:  application:    name: cloud-stream-provider  cloud:    stream:      binders:  #在此处配置要绑定的rabbitmg的服务信息;        defaultRabbit:  #表示定义的名称，用于binding整合          type: rabbit   #消息组件类刑          environment:  #设置rabbitmq的相关的环境配置            spring:              rabbitmq:                host: localhost                port: 5672                username: guest                password: guest      bindings:  #服务的整合处理        output:  #这个名字是一个通道的名称          destination: studyExchange   #表示要使用的Exchange名称定义          content-type: application/json   #设置消息类型，本次为json，文本则设置“text/plain”          binder: defaultRabbit    #设置要绑定的消息服务的具体设置eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/l,http://eureka7003.com:7003/eureka/  #集群方式  instance:    lease-expiration-duration-in-seconds: 5  #如果现在超过5秒的间隔（默认是90秒)    lease-renewal-interval-in-seconds: 2  #设置心跳的时间间隔（默认是30秒)    instance-id: send-8801   #在信息列表时显示主机名称    prefer-ip-address: true  #访问的路径变为IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class Stream_Main_8801 {    public static void main(String[] args) {        SpringApplication.run(Stream_Main_8801.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类</p><p>service及其实现类，==注意：此时的实现类不用@Service注解，而是用@EnableBinding注解==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface IMessageProvider {    public String send();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@EnableBinding(Source.class)  //定义消息的推送管道@Slf4jpublic class IMessageProviderImpl implements IMessageProvider {    @Autowired    private MessageChannel output; //消息发送管道    @Override    public String send() {        String serial = UUID.randomUUID().toString();        output.send(MessageBuilder.withPayload(serial).build());        log.warn("serial={}",serial);        return serial;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class SendMessageController {    @Autowired    private IMessageProvider iMessageProvider;    @GetMapping("/sendMessage")    public String sendMessage(){        return iMessageProvider.send();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：启动7001、7002、7003、8801，启动rabbitmq，访问<a href="http://localhost:8801/sendMessage%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B8%8D%E6%96%AD%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%86%8D%E6%AC%A1%E8%AE%BF%E9%97%AEhttp://localhost:15672/">http://localhost:8801/sendMessage，并且不断刷新页面，再次访问http://localhost:15672/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024002321598.png" alt="image-20221024002321598"></p><h5 id="消息驱动之消费者"><a href="#消息驱动之消费者" class="headerlink" title="消息驱动之消费者"></a>消息驱动之消费者</h5><p><strong>cloud-stream-rabbitmq-consumer8802，作为消息接收模块</strong></p><p>pom文件，直接拷贝8801</p><p>YML文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8802spring:  application:    name: cloud-stream-provider  cloud:    stream:      binders:  #在此处配置要绑定的rabbitmg的服务信息;        defaultRabbit:  #表示定义的名称，用于binding整合          type: rabbit   #消息组件类刑          environment:  #设置rabbitmq的相关的环境配置            spring:              rabbitmq:                host: localhost                port: 5672                username: guest                password: guest      bindings:  #服务的整合处理        input:  #这个名字是一个通道的名称          destination: studyExchange   #表示要使用的Exchange名称定义（生产者与消费则必须相同）          content-type: application/json   #设置消息类型，本次为json，文本则设置“text/plain”          binder: defaultRabbit    #设置要绑定的消息服务的具体设置eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/l,http://eureka7003.com:7003/eureka/  #集群方式  instance:    lease-expiration-duration-in-seconds: 5  #如果现在超过5秒的间隔（默认是90秒)    lease-renewal-interval-in-seconds: 2  #设置心跳的时间间隔（默认是30秒)    instance-id: receive-8802.com   #在信息列表时显示主机名称    prefer-ip-address: true  #访问的路径变为IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class Stream_Main_8802 {    public static void main(String[] args) {        SpringApplication.run(Stream_Main_8802.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component@EnableBinding(Sink.class)@Slf4jpublic class ReceiveMessageController {    @Value("${server.port}")    private String serverPort;    @StreamListener(Sink.INPUT)    public void input(Message&lt;String&gt; message){        log.warn("消费者1号，-------&gt; 接收到消息：{}",message.getPayload()+"\t"+ "port："+ serverPort);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：启动7001、7002、7003、8801、8802，启动rabbitmq，访问<a href="http://localhost:8801/sendMessage%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B8%8D%E6%96%AD%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%86%8D%E6%AC%A1%E8%AE%BF%E9%97%AEhttp://localhost:15672/">http://localhost:8801/sendMessage，并且不断刷新页面，再次访问http://localhost:15672/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024123534189.png" alt="image-20221024123534189"></p><h5 id="分组消费与持久化"><a href="#分组消费与持久化" class="headerlink" title="分组消费与持久化"></a>分组消费与持久化</h5><p><strong>cloud-stream-rabbitmq-consumer8803作为消息接收模块</strong></p><p>pom文件，直接拷贝8802</p><p>YML文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8803spring:  application:    name: cloud-stream-provider  cloud:    stream:      binders:  #在此处配置要绑定的rabbitmg的服务信息;        defaultRabbit:  #表示定义的名称，用于binding整合          type: rabbit   #消息组件类刑          environment:  #设置rabbitmq的相关的环境配置            spring:              rabbitmq:                host: localhost                port: 5672                username: guest                password: guest      bindings:  #服务的整合处理        input:  #这个名字是一个通道的名称          destination: studyExchange   #表示要使用的Exchange名称定义（生产者与消费则必须相同）          content-type: application/json   #设置消息类型，本次为json，文本则设置“text/plain”          binder: defaultRabbit    #设置要绑定的消息服务的具体设置eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/l,http://eureka7003.com:7003/eureka/  #集群方式  instance:    lease-expiration-duration-in-seconds: 5  #如果现在超过5秒的间隔（默认是90秒)    lease-renewal-interval-in-seconds: 2  #设置心跳的时间间隔（默认是30秒)    instance-id: receive-8803.com   #在信息列表时显示主机名称    prefer-ip-address: true  #访问的路径变为IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class Stream_Main_8803 {    public static void main(String[] args) {        SpringApplication.run(Stream_Main_8803.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类，直接拷贝8002的业务类</p><p>测试：启动7001、7002、7003、8801、8802、8803，启动rabbitmq，访问<a href="http://localhost:8801/sendMessage%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B8%8D%E6%96%AD%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%86%8D%E6%AC%A1%E8%AE%BF%E9%97%AEhttp://localhost:15672/">http://localhost:8801/sendMessage，并且不断刷新页面，再次访问http://localhost:15672/</a></p><p>此时，存在的问题是存在重复消费的问题。</p><p>解决方法：==分组和持久化属性group==（要掌握）</p><p>例如：==如果一个订单同时被两个服务获取到==，那么就会造成数据错误，我们得避免这种情况。这时我们就==可以使用Stream中的消息分组来解决==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024125021975.png" alt="image-20221024125021975"></p><p>注意在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次。==不同组是可以全面消费的(重复消费)==，==同—组内会发生竞争关系，只有其中一个可以消费。==</p><p>以上案例8802、8803属于两个不同的组</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024125400645.png" alt="image-20221024125400645"></p><h6 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h6><p>以8802、8803为例，分成不同的两个组，分别在这两个工程的yml文件添加如下的内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">group: rabbitAgroup: rabbitB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024130242956.png" alt="image-20221024130242956"></p><p>分组后，==<strong>注意：如果不配分组，则默认的是分为两个不同的组</strong>==，这就导致重复消费的问题。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024130507598.png" alt="image-20221024130507598"></p><p>微服务应用放置于==同一个group==中，就能够保证消息只会被其中一个应用消费一次。==不同的组是可以消费的，同一个组内会发生竞争关系，只有其中一个可以消费。==</p><p>8802/8803实现了==轮询分组==，每次只有一个消费者，8801模块的发的消息只能被8802或8803其中一个接收到，这样避免了重复消费。</p><p>将8802、8803都变成相同组，group两个相同，分别在这两个工程的yml文件添加如下的内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">group: rabbitA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024131211172.png" alt="image-20221024131211172"></p><p>此时，就解决重复消费的问题了</p><h6 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h6><p><strong>通过上述，解决了重复消费问题，下面来看看持久化，先停止8802和8803并去除掉8802的分组 group: rabbitA，接着8801先发送4条消息到rabbitmq。</strong></p><p>再启动8802，无分组属性配置，后台没有打出来消息</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024132633192.png" alt="image-20221024132633192"></p><p>再启动8803，有分组属性配置，后台打出来了MQ上的消息</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024132934597.png" alt="image-20221024132934597"></p><h3 id="SpringCloud-Sleuth分布式请求链路跟踪"><a href="#SpringCloud-Sleuth分布式请求链路跟踪" class="headerlink" title="SpringCloud Sleuth分布式请求链路跟踪"></a>SpringCloud Sleuth分布式请求链路跟踪</h3><h4 id="概述-12"><a href="#概述-12" class="headerlink" title="概述"></a>概述</h4><p>在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的的服务节点调用来协同产生最后的请求结果，每一个前段请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024133253708.png" alt="image-20221024133253708"></p><p><strong>官网资料：<a href="https://github.com/spring-cloud/spring-cloud-sleuth">https://github.com/spring-cloud/spring-cloud-sleuth</a></strong></p><p>Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案，在分布式系统中提供追踪解决方案并且兼容支持了zipkin</p><h4 id="搭建链路监控步骤"><a href="#搭建链路监控步骤" class="headerlink" title="搭建链路监控步骤"></a>搭建链路监控步骤</h4><h5 id="1-zipkin"><a href="#1-zipkin" class="headerlink" title="1.zipkin"></a>1.zipkin</h5><p>下载</p><p>SpringCloud从F版起已不需要自己构建Zipkin Server了，只需调用jar包即可</p><p>下载地址：<a href="https://www.aliyundrive.com/s/SbFYKvxH3s8">https://www.aliyundrive.com/s/SbFYKvxH3s8</a></p><p>运行jar 命令：<code>java -jar zipkin-server-2.23.19-exec.jar </code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024145200761.png" alt="image-20221024145200761"></p><p>sleuth工作流程图</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024145339007.png" alt="image-20221024145339007"></p><h5 id="2-服务提供者"><a href="#2-服务提供者" class="headerlink" title="2.服务提供者"></a>2.服务提供者</h5><p>cloud-eureka-provider-payment8001</p><p>添加如下的maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--包含了sleuth和zipkin--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml添加如下内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">zipkin:  base-url: http://localhost:9411seluth:  sampler:    probability: 1  #来样率值介于0到1之间，1 则表示全部采集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024143937866.png" alt="image-20221024143937866"></p><p>controller添加如下内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/zipkin")public String paymentZipKin(){    return "Hi, I am paymentZipKin server fall back,welcome to lt，O(∩_∩)O";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-服务消费者-调用方"><a href="#3-服务消费者-调用方" class="headerlink" title="3.服务消费者(调用方)"></a>3.服务消费者(调用方)</h5><p>cloud-eureka-consumer-order8</p><p>添加如下的maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--包含了sleuth和zipkin--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml添加如下内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">zipkin:  base-url: http://localhost:9411seluth:  sampler:    probability: 1  #来样率值介于0到1之间，1 则表示全部采集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024144238733.png" alt="image-20221024144238733"></p><p>controller添加如下内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/zipkin")public String paymentZipKin(){    String result = restTemplate.getForObject(PAYMENT_URL+"/payment/zipkin/",String.class);    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-依次启动eureka7001、7002、7003、Eureka-PaymentMain-8001、Eureka-OrderMain-80"><a href="#4-依次启动eureka7001、7002、7003、Eureka-PaymentMain-8001、Eureka-OrderMain-80" class="headerlink" title="4.依次启动eureka7001、7002、7003、Eureka_PaymentMain_8001、Eureka_OrderMain_80"></a>4.依次启动eureka7001、7002、7003、Eureka_PaymentMain_8001、Eureka_OrderMain_80</h5><h5 id="5-打开浏览器访问-http-localhost-9411"><a href="#5-打开浏览器访问-http-localhost-9411" class="headerlink" title="5.打开浏览器访问: http://localhost:9411"></a>5.打开浏览器访问: <a href="http://localhost:9411/">http://localhost:9411</a></h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024145624880.png" alt="image-20221024145624880"></p><h3 id="SpringCloud-Alibaba入门简介"><a href="#SpringCloud-Alibaba入门简介" class="headerlink" title="SpringCloud Alibaba入门简介"></a>SpringCloud Alibaba入门简介</h3><p>为什么要引入SpringCloud Alibaba？</p><p>原因是：Spring Cloud Netflix项目进入维护模式</p><p> <a href="https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now">https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024150458957.png" alt="image-20221024150458957"></p><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><ul><li>服务限流降级</li><li>服务注册与发现</li><li>分布式配置管理</li><li>消息驱动能力</li><li>阿里云对象存储</li><li>分布式任务调度</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><p>服务限流降级：默认支持Servlet、Feign、RestTemplate、Dubbo和RocketMQ限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级Metrics 监控。</p><p>服务注册与发现：适配 Spring Cloud服务注册与发现标准，默认集成了Ribbon的支持</p><p>分布式配置管理：支持分布式系统中的外部化配置，配置更改时自动刷新。</p><p>消息驱动能力：基于Spring Cloud Stream为微服务应用构建消息驱动能力。</p><p>阿里云对象存储：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p>分布式任务调度：提供秒级、精准、高可靠、高可用的定时(基于Cron表达式)任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker (schedulerx-client)上执行。</p><p>下载地址：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>**<a href="https://github.com/alibaba/Sentinel">Sentinel</a>**：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>**<a href="https://github.com/alibaba/Nacos">Nacos</a>**：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>**<a href="https://rocketmq.apache.org/">RocketMQ</a>**：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p><p>**<a href="https://github.com/seata/seata">Seata</a>**：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p><p><strong><a href="https://www.aliyun.com/product/oss">Alibaba Cloud OSS</a></strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p><strong><a href="https://cn.aliyun.com/aliware/schedulerx">Alibaba Cloud SchedulerX</a></strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p><p><strong><a href="https://www.aliyun.com/product/sms">Alibaba Cloud SMS</a></strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p><h4 id="SpringCloud-Alibaba学习资料"><a href="#SpringCloud-Alibaba学习资料" class="headerlink" title="SpringCloud Alibaba学习资料"></a>SpringCloud Alibaba学习资料</h4><p>官网：<a href="https://spring.io/projects/spring-cloud-alibaba#overview">https://spring.io/projects/spring-cloud-alibaba#overview</a></p><p>英文：<a href="https://github.com/alibaba/spring-cloud-alibaba">https://github.com/alibaba/spring-cloud-alibaba</a></p><p>​<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></p><p>中文：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p><h3 id="SpringCloud-Alibaba-Nacos服务注册和配置中心"><a href="#SpringCloud-Alibaba-Nacos服务注册和配置中心" class="headerlink" title="SpringCloud Alibaba Nacos服务注册和配置中心"></a>SpringCloud Alibaba Nacos服务注册和配置中心</h3><h4 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h4><p>前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service。</p><h5 id="是什么？-4"><a href="#是什么？-4" class="headerlink" title="是什么？"></a>是什么？</h5><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>Nacos: Dynamic Naming and Configuration Service</p><p>Nacos就是注册中心＋配置中心的组合，<strong>即Nacos = Eureka+Config +Bus</strong></p><h5 id="能干嘛-2"><a href="#能干嘛-2" class="headerlink" title="能干嘛"></a>能干嘛</h5><ul><li><p><strong>替代Eureka做服务注册中心</strong></p></li><li><p><strong>替代Config做服务配置中心</strong></p></li></ul><h5 id="去哪下"><a href="#去哪下" class="headerlink" title="去哪下"></a>去哪下</h5><p>官网：<a href="https://github.com/alibaba/Nacos">https://github.com/alibaba/Nacos</a></p><p>官方文档：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html%E3%80%81https://nacos.io/zh-cn/index.html">https://nacos.io/zh-cn/docs/what-is-nacos.html、https://nacos.io/zh-cn/index.html</a></p><h5 id="各中注册中心比较"><a href="#各中注册中心比较" class="headerlink" title="各中注册中心比较"></a>各中注册中心比较</h5><table><thead><tr><th>服务注册与发现框架</th><th>CAP模型</th><th>控制台管理</th><th>社区活跃度</th></tr></thead><tbody><tr><td>Eureka</td><td>AP</td><td>支持</td><td>低(2.x版本闭源)</td></tr><tr><td>zookeeper</td><td>CP</td><td>不支持</td><td>中</td></tr><tr><td>Consul</td><td>CP</td><td>支持</td><td>高</td></tr><tr><td>Nacos</td><td>AP</td><td>支持</td><td>高</td></tr></tbody></table><h5 id="安装并运行Nacos"><a href="#安装并运行Nacos" class="headerlink" title="安装并运行Nacos"></a>安装并运行Nacos</h5><p>1、先从官网下载：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>2、解压安装包，再安装目录bin目录下进入命令行模式，输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">startup.cmd        #1.1.4的版本startup.cmd -m standalone  #2.0.4的版本 ，单机驱动命令，若使用startup.cmd 默认是集群的方式启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、命令运行成功后直接访问<a href="http://localhost:8848/nacos%EF%BC%8C%E5%B9%B6%E7%99%BB%E5%BD%95%EF%BC%8C%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFnacos">http://localhost:8848/nacos，并登录，账号和密码都是nacos</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024155513955.png" alt="image-20221024155513955"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024155645786.png" alt="image-20221024155645786"></p><h4 id="Nacos作为服务注册中心演示"><a href="#Nacos作为服务注册中心演示" class="headerlink" title="Nacos作为服务注册中心演示"></a>Nacos作为服务注册中心演示</h4><h5 id="官网文档"><a href="#官网文档" class="headerlink" title="官网文档"></a>官网文档</h5><p><a href="https://spring.io/projects/spring-cloud-alibaba#learn">https://spring.io/projects/spring-cloud-alibaba#learn</a></p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></p><h5 id="基于Nacos的服务提供者"><a href="#基于Nacos的服务提供者" class="headerlink" title="基于Nacos的服务提供者"></a>基于Nacos的服务提供者</h5><p>新建Module cloud-alibaba- provider-payment9001</p><p>POM</p><p>父工程添加</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本工程</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloud alibaba nacos--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 9001spring:  application:    name: nacos-cloud-payment-provider  cloud:    nacos:      discovery:        server-addr: localhost:8848  #配置nacos地址#暴露监控服务management:  endpoints:    web:      exposure:        include: "*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableDiscoveryClientpublic class Nacos_Provider_Main_9001 {    public static void main(String[] args) {        SpringApplication.run(Nacos_Provider_Main_9001.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RequestMapping("/payment")public class PaymentController {    @Value("${server.port}")    private String serverPort;    @GetMapping("/nacos/{id}")    public String getPayment(@PathVariable("id") Integer id){        return "nacos registry serverPort：" + serverPort +"\t id"+ id;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><p>启动9001，访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024164533564.png" alt="image-20221024164533564"></p><p>参照9001新建9002</p><h5 id="基于Nacos的服务消费者"><a href="#基于Nacos的服务消费者" class="headerlink" title="基于Nacos的服务消费者"></a>基于Nacos的服务消费者</h5><p>新建模块cloud-alibaba-order-83</p><p>POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloud alibaba nacos--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 83spring:  application:    name: nacos-cloud-order-consumer  cloud:    nacos:      discovery:        server-addr: localhost:8848  #配置nacos地址server-url:  nacos-user-service: http://nacos-cloud-payment-provider  #消费者将要去访问的微服务名称(注册成功进nacos,的微服务提供者)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableDiscoveryClientpublic class Nacos_Order_Main_83 {    public static void main(String[] args) {        SpringApplication.run(Nacos_Order_Main_83.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类</p><p>​配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ApplicationContextBean {    @Bean    @LoadBalanced  //负载均衡    public RestTemplate restTemplate(){        return new RestTemplate();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4j@RequestMapping("/consumer")public class OrderNacosController {    public static final String PATH_URL = "http://nacos-cloud-payment-provider ";    @Autowired    private RestTemplate restTemplate;    @Value("${server-url.nacos-user-service}")    private String URL;    @GetMapping("/nacos/{id}")    public String getOrder(@PathVariable("id") Integer id){//        return restTemplate.getForObject(PATH_URL+"/payment/nacos/"+id,String.class);        return restTemplate.getForObject(URL+"/payment/nacos/"+id,String.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><p><a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024180934326.png" alt="image-20221024180934326"></p><p><a href="http://localhost:83/consumer/nacos/4">http://localhost:83/consumer/nacos/4</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024180959762.png" alt="image-20221024180959762"></p><h5 id="服务注册中心对比"><a href="#服务注册中心对比" class="headerlink" title="服务注册中心对比"></a>服务注册中心对比</h5><h6 id="Nacos全景图"><a href="#Nacos全景图" class="headerlink" title="Nacos全景图"></a>Nacos全景图</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024181409963.png" alt="image-20221024181409963"></p><h6 id="Nacos和CAP"><a href="#Nacos和CAP" class="headerlink" title="Nacos和CAP"></a>Nacos和CAP</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024181547752.png" alt="image-20221024181547752"></p><h6 id="Nacos与其他注册中心特性对比"><a href="#Nacos与其他注册中心特性对比" class="headerlink" title="Nacos与其他注册中心特性对比"></a>Nacos与其他注册中心特性对比</h6><table><thead><tr><th></th><th>Nacos</th><th>Eureka</th><th>Consul</th><th>CoreDNS</th><th>zooKeeper</th></tr></thead><tbody><tr><td>一致性协议</td><td>CP+AP</td><td>AP</td><td>CP</td><td>／</td><td>CP</td></tr><tr><td>健康检查</td><td>TCP/HTTP/MySQL/Client Beat</td><td>Client Beat</td><td>TCP/HTTP/gRPC/Cmd</td><td>／</td><td>client Beat</td></tr><tr><td>负载均衡</td><td>权重/DSL/metadata/CMDB</td><td>Ribbon</td><td>Fabio</td><td>RR</td><td>／</td></tr><tr><td>雪崩保护</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr><td>自动注销实例</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>访问协议</td><td>HTTP/DNS/UDP</td><td>HTTP</td><td>HTTP/DNS</td><td>DNS</td><td>TCP</td></tr><tr><td>监听支持</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>多数据中心</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>跨注册中心</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>SpringCloud集成</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>Dubbo集成</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>K8s集成</td><td>支持</td><td>不支持</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h6 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h6><p>==Nacos支持AP和CP模式的切换==</p><p>==C 是所有节点在同一时间看到的数据是一致的，而A的定义是所有的请求都会收到响应。==</p><p>一般来说，如果不需要存储服务级别的信息且服务实例是通过nacos-client注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如Spring cloud 和Dubbo服务，都适用于AP模式，AP模式为了服务的可能性而减弱了一致性，因此AP模式下只支持注册临时实例。</p><p>如果需要在服务级别编辑或者存储配置信息，那么CP是必须，K8S服务和DNS服务则适用于CP模式。CP模式下则支持注册持久化实例，此时则是以Raft协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。</p><p>模式切换命令：curl -X PUT ‘$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP’</p><h4 id="Nacos作为服务配置中心演示"><a href="#Nacos作为服务配置中心演示" class="headerlink" title="Nacos作为服务配置中心演示"></a>Nacos作为服务配置中心演示</h4><h5 id="Nacos作为配置中心-基础配置"><a href="#Nacos作为配置中心-基础配置" class="headerlink" title="Nacos作为配置中心-基础配置"></a>Nacos作为配置中心-基础配置</h5><p>新建cloud-alibaba-config-nacos-client3377</p><p>POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloud alibaba nacos config--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloud alibaba nacos --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><p>applicatio.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  profiles:    active: dev #开发环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>bootstrap.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 3377spring:  application:    name: nacos-cloud-config-client  cloud:    nacos:      discovery:        server-addr: localhost:8848  #配置nacos地址      config:        server-addr: localhost:8848  #Nacos作为配置中心地址        file-extension: yaml  #指定yaml格式的配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableDiscoveryClientpublic class Nacos_Config_Client_Main_3377 {    public static void main(String[] args) {        SpringApplication.run(Nacos_Config_Client_Main_3377.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类，注意：必须加==<strong>@RefreshScope</strong>==注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@RefreshScope  //支持Nacos的动态刷新功能。@Slf4jpublic class ConfigClicentController {    @Value("${config.info}")    private String configInfo;    @GetMapping("/config/info")    public String getConfigInfo(){        return configInfo;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Nacos中添加配置信息</p><p>官网：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024185946496.png" alt="image-20221024185946496"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024190347431.png" alt="image-20221024190347431"></p><p>设置DataID的公式：${spring.application.name }-${spring .profiLe.active}. ${ spring.cloud.nacos.config.file-extension}</p><ul><li>prefix默认为spring.application.name的值·</li><li>spring.profile.active即为当前环境对应的 profile，可以通过配置项spring.profile.active 来配置。</li><li>file-exetension为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension来配置</li></ul><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024191131717.png" alt="image-20221024191131717"></p><p>==<strong>自带动态刷新</strong>==，没有象SpringCloud Config +  SpringCloud Bus那样繁琐的配置</p><h5 id="Nacos作为配置中心-分类配置"><a href="#Nacos作为配置中心-分类配置" class="headerlink" title="Nacos作为配置中心-分类配置"></a>Nacos作为配置中心-分类配置</h5><p>Nacos命名空间、分组（group）和DatalD三者的关系</p><p>最外层的namespace是可以用于区分部署环境的，Group和DatalID逻辑上区分两个目标对象。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024193154649.png" alt="image-20221024193154649"></p><p>==默认情况：Namespace=public，Group=DEFAULT_GROUP,默认Cluster是DEFAULT==</p><p>Nacos默认的命名空间是public，Namespace主要用来实现隔离。</p><p>比方说我们现在有三个环境:开发、测试、生产环境，我们就可以创建三个Namespace，不同的Namespace之间是隔离的。</p><p>Group默认是DEFAULT_GROUP，Group可以把不同的微服务划分到同一个分组里面去</p><p>Service就是微服务，一个Sevice可以包含多个Cluster(集群)，Nacos默认Cluster是DEFAULT，Cluster是对指定微服务的一个虚拟划分。比方说为了容灾，将Service微服务分别部署在了杭州机房和广州机房，这时就可以给杭州机房的Service微服务起一个集群名称(HZ)，给广州机房的Service微服务起一个集群名称(GZ)，还可以尽量让同一个机房的微服务互相调用，以提升性能。最后是Instance，就是微服务的实例。</p><h4 id="Nacos集群和持久化配置-重要"><a href="#Nacos集群和持久化配置-重要" class="headerlink" title="Nacos集群和持久化配置(重要)"></a>Nacos集群和持久化配置(重要)</h4><p>官网说明：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p><h5 id="集群模式部署"><a href="#集群模式部署" class="headerlink" title="集群模式部署"></a>集群模式部署</h5><p>这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。</p><h5 id="集群部署架构图"><a href="#集群部署架构图" class="headerlink" title="集群部署架构图"></a>集群部署架构图</h5><p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p><p><a href="http://ip1/">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p><p><a href="http://slb/">http://SLB</a>:port/openAPI 挂载SLB模式(内网SLB，不可暴露到公网，以免带来安全风险)，直连SLB即可，下面挂server真实ip，可读性不好。</p><p><a href="http://nacos.com/">http://nacos.com</a>:port/openAPI 域名 + SLB模式(内网SLB，不可暴露到公网，以免带来安全风险)，可读性好，而且换ip方便，推荐模式</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024201620729.png" alt="image-20221024201620729"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024201938467.png" alt="image-20221024201938467"></p><p>官网：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p><p>默认Nacos使用嵌入式数据库实现数据的存储。所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的。为了解决这个问题，Nacos采用了==集中式存储的方式来支持集群化部署，目前只支持MySQL的存储。==</p><p>Nacos支持三种部署模式</p><ul><li>单机模式-用于测试和单机试用。</li><li>==集群模式-用于生产环境，确保高可用。==</li><li>多集群模式-用于多数据中心场景。</li></ul><h5 id="Nacos持久化配置解释"><a href="#Nacos持久化配置解释" class="headerlink" title="Nacos持久化配置解释"></a>Nacos持久化配置解释</h5><p>官网：<a href="https://nacos.io/zh-cn/docs/deployment.html">https://nacos.io/zh-cn/docs/deployment.html</a></p><h6 id="Nacos默认自带的是嵌入式数据库derby"><a href="#Nacos默认自带的是嵌入式数据库derby" class="headerlink" title="Nacos默认自带的是嵌入式数据库derby"></a>Nacos默认自带的是嵌入式数据库derby</h6><p>官网说明：<a href="https://github.com/alibaba/nacos/blob/develop/config/pom.xml">https://github.com/alibaba/nacos/blob/develop/config/pom.xml</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024203225010.png" alt="image-20221024203225010"></p><h6 id="derby到mysql切换配置步骤"><a href="#derby到mysql切换配置步骤" class="headerlink" title="derby到mysql切换配置步骤"></a>derby到mysql切换配置步骤</h6><p>第一步：nacos-server-1.1.4\nacos\conf录下找到sql脚本（nacos-mysql.sql文件）</p><p>创建数据库，然后执行nacos-mysql.sql文件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">create database nacos_config;use nacos_config;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024203552137.png" alt="image-20221024203552137"></p><p>第二步、nacos-server-1.1.4\nacos\conf目录下找到application.properties，打开并在最后一行添加如下的内容</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024204459680.png" alt="image-20221024204459680"></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">spring.datasource.platform=mysqldb.num=1db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=truedb.user=root   #mysql用户名db.password=123456   #MySQL用户密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==<strong>注意：上面的db.url.0只对MySQL5.7及以下的版本生效，如果使用MySQL8.0以上的版本就必须在db.url.0后加上<code>&amp;serverTimezone=UTC</code>，要不然启动Nacos就会报<code>Caused by: java.lang.IllegalStateException: No DataSource set</code>的错误</strong>==</p><p>第三步、启动Nacos，可以看到是个全新的空记录界面，以前是记录进derby</p><h5 id="Linux版Nacos-MySQL生产环境配置"><a href="#Linux版Nacos-MySQL生产环境配置" class="headerlink" title="Linux版Nacos+ MySQL生产环境配置"></a>Linux版Nacos+ MySQL生产环境配置</h5><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>预计需要，1个Nginx+3个nacos注册中心+1个mysql</p><p>Nacos下载Linux版 :<a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></p><p>1、下载完成上传至Linux并解压，命令为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tar -zxvf nacos-server-1.1.4.tar.gz  -C /usr/local/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024214411342.png" alt="image-20221024214411342"></p><p>2、进入nacos的bin目录先复制一份 startup.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /usr/local/nacos/bin   #进入bin目录cp startup.sh startup.sh.bk  #复制一份 startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="集群配置步骤-重点"><a href="#集群配置步骤-重点" class="headerlink" title="集群配置步骤(重点)"></a>集群配置步骤(重点)</h6><p>1.Linux服务器上mysql数据库配置</p><p>数据库脚本与在windows的一致</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024225239935.png" alt="image-20221024225239935"></p><p>在linux系统的MySQL数据下运行nacos-mysql.sql文件</p><p>2.application.properties配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">spring.datasource.platform=mysqldb.num=1db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=truedb.user=root   #mysql用户名db.password=123456   #MySQL用户密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024230311400.png" alt="image-20221024230311400"></p><p>3.Linux服务器上nacos的集群配置cluster.conf</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024230908436.png" alt="image-20221024230908436"></p><p>梳理出3台nacos集器的不同服务端口号，复制出cluster.conf，cluster.conf的内容如下</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024231405760.png" alt="image-20221024231405760"></p><p>注意：上面的这个IP不能写127.0.0.1，必须是Linux命令<code>hostname -i</code>能够识别的IP</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024231454195.png" alt="image-20221024231454195"></p><p>4.编辑Nacos的启动脚本startup.sh，使它能够接受不同的启动端口</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024231715717.png" alt="image-20221024231715717"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024233103366.png" alt="image-20221024233103366"></p><p>集群启动，我们希望可以类似其它软件的shell命令，==传递不同的端口号启动不同的nacos实例。==</p><p>命令: <code>./startup.sh -p 3333</code>表示启动端口号为3333的nacos服务器实例，和上一步的cluster.conf配置的一致。</p><p>5.Nginx的配置，由它作为负载均衡器</p><p>修改nginx的配置文件</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024233321053.png" alt="image-20221024233321053"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024234613652.png" alt="image-20221024234613652"></p><p>启动nginx，命令<code> ./nginx -c /usr/local/nginx/conf/nginx.conf</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024234921443.png" alt="image-20221024234921443"></p><p>启动nacos，命令<code>./startup.sh -p 3333</code>、<code>./startup.sh -p 4444</code>、<code>./startup.sh -p 5555</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024235138812.png" alt="image-20221024235138812"></p><p><code>ps -ef|grep nacos | grep -v grep | wc -l</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024235443051.png" alt="image-20221024235443051"></p><p>6.截止到此处，1个Nginx+3个nacos注册中心＋1个mysq</p><p>测试访问是否成功<a href="http://192.168.10.102:1111/nacos/#/login">http://192.168.10.102:1111/nacos/#/login</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025123502581.png" alt="image-20221025123502581"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025123844290.png" alt="image-20221025123844290"></p><h6 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h6><p>将微服务cloud-alibaba-provider-payment9002启动注册进nacos集群，修改YML配置文件，并启动，访问<a href="http://192.168.10.102:1111/nacos/">http://192.168.10.102:1111/nacos/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025124055584.png" alt="image-20221025124055584"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025124228815.png" alt="image-20221025124228815"></p><h6 id="高可用小总结"><a href="#高可用小总结" class="headerlink" title="高可用小总结"></a>高可用小总结</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221024224203454.png" alt="image-20221024224203454"></p><h3 id="SpringCloud-Alibaba-Sentinel实现熔断与限流"><a href="#SpringCloud-Alibaba-Sentinel实现熔断与限流" class="headerlink" title="SpringCloud Alibaba Sentinel实现熔断与限流"></a>SpringCloud Alibaba Sentinel实现熔断与限流</h3><h4 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h4><p>Sentinel的介绍：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025210742173.png" alt="image-20221025210742173"></p><p>官网</p><p><a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p><p>中文官方文档：<a href="https://sentinelguard.io/zh-cn/docs/quick-start.html">https://sentinelguard.io/zh-cn/docs/quick-start.html</a></p><p>下载</p><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p>官网学习资料地址：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel</a></p><p>作用：</p><ul><li>服务雪崩</li><li>服务降级</li><li>服务熔断</li><li>服务限流</li></ul><h4 id="安装Sentinel控制台"><a href="#安装Sentinel控制台" class="headerlink" title="安装Sentinel控制台"></a>安装Sentinel控制台</h4><p>sentinel组件由2部分构成：后台、前台8080</p><ul><li>核心库(Java客户端）不依赖任何框架/库，能够运行于所有Java运行时环境，同时对Dubbo /Spring Cldd等框架也有较好的支持。</li><li>控制台(Dashboard)基于Spring Boot 开发，打包后可以直接运行，不需要额外的Tomcat等应用容器。</li></ul><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p>运行命令：<code>java -jar sentinel-dashboard-1.8.5.jar</code>，运行的前提，8080端口不能被占用，必须有java8的环境</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025130355471.png" alt="image-20221025130355471"></p><p>访问sentinel管理界面：<a href="http://localhost:8080，用户名和密码都是sentinel">http://localhost:8080，用户名和密码都是sentinel</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025130726811.png" alt="image-20221025130726811"></p><h4 id="初始化演示工程"><a href="#初始化演示工程" class="headerlink" title="初始化演示工程"></a>初始化演示工程</h4><p>启动Nacos8848成功</p><p>新建工程cloud-alibaba-sentinel-service8401</p><p>POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--nacos服务发现--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloud 后续做持久化用到--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--alibaba sentinel--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8401spring:  application:    name: cloud-alibaba-sentinel-service  cloud:    nacos:      discovery:        server-addr: localhost:8848  #nacos服务注册中心地址    sentinel:      transport:        dashboard: localhost:8080   #配置sentinel dashboard地址        port: 8719        #默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口#暴露监控服务management:  endpoints:    web:      exposure:        include: '*'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableDiscoveryClientpublic class Sentinel_Main_8401 {    public static void main(String[] args) {        SpringApplication.run(Sentinel_Main_8401.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类FlowLimitController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class FlowLimitController {    @GetMapping("/testA")    public String testA(){        return "-----------------testA";    }    @GetMapping("/testB")    public String testB(){        return "-----------------testB";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动Sentinel8080</p><p>启动微服务8401</p><p>启动8401微服务后查看sentienl控制台，第一次访问什么也没有<br><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025133202430.png" alt="image-20221025133202430"></p><p>原因：==Sentinel采用的懒加载机制==，所以，需要执行一次访问即可<a href="http://localhost:8401/testA%E3%80%81http://localhost:8401/testB">http://localhost:8401/testA、http://localhost:8401/testB</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025133558311.png" alt="image-20221025133558311"></p><h4 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h4><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><ul><li>资源名：唯一名称，默认请求路径</li><li>针对来源: Sentinel可以针对调用者进行限流，填写微服务名，默认default(不区分来源)</li><li>阈值类型/单机阈值：<ul><li>QPS(每秒钟的请求数量)︰当调用该api的QPS达到阈值的时候，进行限流。</li><li>线程数:当调用该api的线程数达到阈值的时候，进行限流</li></ul></li><li>是否集群：不需要集群</li></ul><h5 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h5><ul><li>直接：api达到限流条件时，直接限流</li><li>关联：当关联的资源达到阈值时，就限流自己</li><li>链路：只记录指定链路上的流量(指定资源从入口资源进来的流量，如果达到阈值，就进行限流)【api级别的针对来源】</li></ul><h5 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h5><ul><li>快速失败：直接失败，抛异常</li><li>Warm Up：根据codeFactor (冷加载因子，默认3）的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值</li><li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效</li></ul><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025134859336.png" alt="image-20221025134859336"></p><p>==表示1秒钟内查询1次就是OK，若超过次数1，就直接-快速失败，报默认错误==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025135024172.png" alt="image-20221025135024172"></p><p><strong>匀速排队</strong></p><p>匀速排队（ RuleConstant.CONTROL_BEHVIOR_RATE_LINITER ）方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。详细文档可以参考==流量控制–匀速器模式==，具体的例子可以参风 ==PaceFlowDemo==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025142106610.png" alt="image-20221025142106610"></p><p>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p><h4 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h4><p>官网：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></p><h5 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>RT(平均响应时间，秒级)</p><p>​平均响应时间 ==超出阈值且在时间窗口内通过的请求&gt;=5==，两个条件同时满足后触发降级窗口期过后关闭断路器</p><p>​RT最大4900(更大的需要通过-Dcsp.sentinel.statistic.max.rt=XXXX才能生效)</p><p>异常比列(秒级)</p><p>​QPS &gt;= 5且异常比例（秒级统计）超过阈值时，触发降级;时间窗口结束后，关闭降级</p><p>异常数(分钟级)<br>                异常数(分钟统计)超过阈值时，触发降级;时间窗口结束后，关闭降级</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025143001258.png" alt="image-20221025143001258"></p><p>Sentinel熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高)，对这个资源的调用进行限制,让请求快速失败，避免影响到其它的资源而导致级联错误。</p><p>当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException)。</p><p>==Sentinel的断路器是没有半开状态的==</p><h5 id="降级策略实战"><a href="#降级策略实战" class="headerlink" title="降级策略实战"></a>降级策略实战</h5><p>官网：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></p><h4 id="热点key限流"><a href="#热点key限流" class="headerlink" title="热点key限流"></a>热点key限流</h4><p>官网：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025164848680.png" alt="image-20221025164848680"></p><p>第一种方式：@SentinelResource(value)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/param")@SentinelResource(value = "abc") //value是资源名，可以任取,blockHandler为出错后的解决方案public String Params(@RequestParam(value = "param1",required = false) String param1,                     @RequestParam(value = "param2",required = false) String param2){    return "param1="+param1 +"\t" + "param2=" + param2 +"\t"+"O(∩_∩)O";}public String errMethod(String p1, String p2, BlockException exception){    return "对不起，出错了，请稍后再试  ┭┮﹏┭┮";   // sentinel系统默认的提示: BLocked by sentinel (flow limiting)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025173234545.png" alt="image-20221025173234545"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025173504274.png" alt="image-20221025173504274"></p><p>第二种方式、@SentinelResource(value，blockHandler)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/param")@SentinelResource(value = "abc",blockHandler = "errMethod") //value是资源名，可以任取,blockHandler为出错后的解决方案public String Params(@RequestParam(value = "param1",required = false) String param1,                     @RequestParam(value = "param2",required = false) String param2){    return "param1="+param1 +"\t" + "param2=" + param2 +"\t"+"O(∩_∩)O";}public String errMethod(String p1, String p2, BlockException exception){    return "对不起，出错了，请稍后再试  ┭┮﹏┭┮";   // sentinel系统默认的提示: BLocked by sentinel (flow limiting)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025174358751.png" alt="image-20221025174358751"></p><p>==注意：errMethod方法中的参数必须和Params方法中的参数要一致，不然errMethod方法不生效==</p><p>参数例外项</p><p>若期望param1参数当它是某个特殊值时，它的限流值和平时不样，假如当param1的值等于5时，它的阈值可以达到200</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025180105302.png" alt="image-20221025180105302"></p><p>@SentinelResource</p><p>​处理的是sentinel控制台配置的违规情况，有blockHandler方法配置的兜底处理;</p><p>RuntimeException</p><p>​int age = 10/0,这个是java运行时报出的运行时异常RunTimeException，@SentinelResource不管</p><p>总结<br>                ==SentinelResource主管配置出错，运行出错该走异常走异常==</p><h4 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h4><p>官网：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81</a></p><p>系统规则支持以下的模式：</p><ul><li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li><li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul><h4 id="SentinelResource"><a href="#SentinelResource" class="headerlink" title="@SentinelResource"></a>@SentinelResource</h4><h5 id="按资源名称限流-后续处理"><a href="#按资源名称限流-后续处理" class="headerlink" title="按资源名称限流+后续处理"></a>按资源名称限流+后续处理</h5><p>1、先启动nacos、sentinel</p><p>2、修改cloud-alibaba-sentinel-service8401</p><p>在pom文件添加如下的maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">dependency&gt;<span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写业务类RateLimitController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class RateLimitController {    @GetMapping("/byResource")    @SentinelResource(value = "byResource",blockHandler = "handleException")//value是资源名，可以任取,blockHandler为出错后的解决方案    public CommonResult ByResource(){        return new CommonResult(200,"按资源名称限流测试ok",new Payment(2022L,"serial001"));    }    //出错后的解决方案    public CommonResult handleException(BlockException exception){        return new CommonResult(444,exception.getClass().getCanonicalName()+"\t 服务不可用");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025182737020.png" alt="image-20221025182737020"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025185307243.png" alt="image-20221025185307243"></p><h5 id="按照Url地址限流-后续处理"><a href="#按照Url地址限流-后续处理" class="headerlink" title="按照Url地址限流+后续处理"></a>按照Url地址限流+后续处理</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/rateLimit/byUrl")@SentinelResource(value = "byResource",blockHandler = "handleException")//value是资源名，可以任取,blockHandler为出错后的解决方案public CommonResult ByUrl(){    return new CommonResult(200,"按资源名称限流测试ok",new Payment(2023L,"serial002"));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025184609731.png" alt="image-20221025184609731"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025185153133.png" alt="image-20221025185153133"></p><h5 id="上面兜底方案面临的问题"><a href="#上面兜底方案面临的问题" class="headerlink" title="上面兜底方案面临的问题"></a>上面兜底方案面临的问题</h5><p>1、系统默认的，没有体现我们自己的业务要求。</p><p>2、依照现有条件，我们自定义的处理方法又和业务代码耦合在一块，不直观。</p><p>3、 每个业务方法都添加一个兜底的，那代码膨胀加剧。</p><p>4、全局统—的处理方法没有体现。</p><h5 id="客户自定义限流处理逻辑"><a href="#客户自定义限流处理逻辑" class="headerlink" title="客户自定义限流处理逻辑"></a>客户自定义限流处理逻辑</h5><p>创建CustomerBlockHandler类用于自定义限流处理逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CustomerBlockHandler {    public static CommonResult handlerException1(BlockException exception){        return new CommonResult(400,"自定义限流处理逻辑,global handlerException------------1");    }    public static CommonResult handlerException2(BlockException exception){        return new CommonResult(400,"自定义限流处理逻辑,global handlerException------------2");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在RateLimitController添加如下的内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/rateLimit/customerBlockHandler")@SentinelResource(value = "customerBlockHandler",        blockHandler = "handlerException1",        blockHandlerClass = CustomerBlockHandler.class                    )public CommonResult customerBlockHandler(){    return new CommonResult(200,"自定义限流处理逻辑",new Payment(2024L,"serial003"));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动微服务后先调用一次</p><p>Sentinel控制台配置</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025205458033.png" alt="image-20221025205458033"></p><p>测试后我们自定义的出来了</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025205556444.png" alt="image-20221025205556444"></p><p>进一步说明</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221025210324107.png" alt="image-20221025210324107"></p><h4 id="服务熔断功能"><a href="#服务熔断功能" class="headerlink" title="服务熔断功能"></a>服务熔断功能</h4><h5 id="sentinel整合ribbon-openFeign-fallback"><a href="#sentinel整合ribbon-openFeign-fallback" class="headerlink" title="sentinel整合ribbon+openFeign+fallback"></a>sentinel整合ribbon+openFeign+fallback</h5><h5 id="Ribbon系列"><a href="#Ribbon系列" class="headerlink" title="Ribbon系列"></a>Ribbon系列</h5><p>启动nacos和sentinel</p><p>提供者9003/9004</p><p>pom都一样</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloud alibaba nacos--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML都一样，只需改端口就行</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 9003spring:  application:    name: nacos-cloud-payment-service  datasource:    type: com.alibaba.druid.pool.DruidDataSource  #当前的数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver  # MySQL驱动包    url: jdbc:mysql://localhost:3306/cloud_payment?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8    username: root    password: liteng0220  cloud:    nacos:      discovery:        server-addr: 192.168.10.102:1111    sentinel:      transport:        dashboard: localhost:8080   #配置sentinel dashboard地址        port: 8719mybatis:  typeAliasesPackage: com.example.springcloud.entities # 实体类所在包  mapper-locations: classpath:mapper/*.xml  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl                       #sql日志management:  endpoints:    web:      exposure:        include: '*'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类，都一样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4j@RequestMapping("/payment")public class PaymentController {    @Autowired    private PaymentService paymentService;    @Value("${server.port}")    private String port;    @Resource    private DiscoveryClient discoveryClient;    @PostMapping("/add")    public CommonResult&lt;Payment&gt; create(@RequestBody Payment payment){        int result = paymentService.create(payment);        log.info("result=",result);        if (result &gt; 0){            return new CommonResult(200,"插入成功,serverPort:"+ port,result);        }else {            return new CommonResult(400,"插入失败,serverPort:"+port,null);        }    }    @GetMapping("/{id}")    public CommonResult getPaymentById(@PathVariable("id") Long id){        Payment payment = paymentService.getPaymentById(id);        if (payment == null){            return new CommonResult(200,"查询成功,没有当前查询的记录,serverPort:"+port,null);        }        return new CommonResult(200,"查询成功,serverPort:"+port,payment);    }    @GetMapping("/list")    public CommonResult getPaymentList(){        List&lt;Payment&gt; list = paymentService.getPaymentList();        if (list == null){            return new CommonResult(200,"查询成功,没有当前查询的记录,serverPort:"+port,null);        }        return new CommonResult(200,"查询成功,serverPort:"+port,list);    }    @GetMapping(value = "/discovery")    public Object discovery()    {        List&lt;String&gt; services = discoveryClient.getServices();        for (String element : services) {            System.out.println(element);        }        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");        for (ServiceInstance element : instances) {            System.out.println(element.getServiceId() + "\t" + element.getHost() + "\t" + element.getPort() + "\t"                    + element.getUri());        }        return this.discoveryClient;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者84</p><p>pom</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--alibaba sentinel--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloud alibaba nacos--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 84spring:  application:    name: nacos-cloud-consumer-order  cloud:    nacos:      discovery:#        server-addr: localhost:8848  #配置nacos地址        server-addr: 192.168.10.102:1111  #linux中nginx反向代理的地址，1111为集群的端口server-url:  nacos-user-service: http://nacos-cloud-payment-service  #消费者将要去访问的微服务名称(注册成功进nacos,的微服务提供者)#暴露监控服务management:  endpoints:    web:      exposure:        include: "*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ApplicationContextConfig {    @Bean    @LoadBalanced  //负载均衡    public RestTemplate restTemplate(){        return new RestTemplate();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController@Slf4j@RequestMapping("/order/nacos")public class OrderNacosController {    @Autowired    private RestTemplate restTemplate;    @Value("${server-url.nacos-user-service}")    private String URL;    @GetMapping("/{id}")    public CommonResult getPaymentById(@PathVariable("id") Integer id){        CommonResult result =restTemplate.getForObject(URL+"/payment/"+id,CommonResult.class);        if (result == null){            return null;        }        return result;    }    @GetMapping("/list")    public CommonResult getPaymentAll(){        CommonResult result = restTemplate.getForObject(URL + "/payment/list", CommonResult.class);        if (result == null){            return null;        }        return result;    }    @PostMapping("/add")    public CommonResult addPayment(@RequestBody Payment payment){        return restTemplate.postForObject(URL+"/payment/add",payment,CommonResult.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三者的主启动类注解都相同，只需修改类名即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableDiscoveryClientpublic class Order_Nacos_Main_84 {    public static void main(String[] args) {        SpringApplication.run(Order_Nacos_Main_84.class,args);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Feign系列"><a href="#Feign系列" class="headerlink" title="Feign系列"></a>Feign系列</h5><p>修改84模块</p><p>在pom添加如下的内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">feign:  sentinel:    enabled: true  #激活sentinel对Feign的支持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026000456604.png" alt="image-20221026000456604"></p><p>主启动类，添加@EnableFeignClients注解</p><p>业务类</p><p>PaymenService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@FeignClient(value = "nacos-cloud-payment-provider",fallback = PaymentFallbackService.class)public interface PaymenService {    @GetMapping("/paymentSql/{id}")    public CommonResult paymentSQL(@PathVariable("id") Integer id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PaymenService实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class PaymentFallbackService implements PaymenService {    @Override    public CommonResult paymentSQL(Integer id) {        return new CommonResult(400,"服务降级返回，---------------PaymentFallBackService");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在controller调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//整合OpenFeign@Autowiredprivate PaymenService paymenService;@GetMapping("/paymentSql/{id}")public CommonResult paymentSQL(@PathVariable("id") Integer id){    return paymenService.paymentSQL(id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="熔断框架比较"><a href="#熔断框架比较" class="headerlink" title="熔断框架比较"></a>熔断框架比较</h5><table><thead><tr><th></th><th>Sentinel</th><th>Hystrix</th><th>resilience4j</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔高(并发线程数限流)</td><td>线程池隔裔/信号量隔</td><td>信号盘隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间、异常比率、异常数</td><td>基于异常比率</td><td>基于异常比率、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口(LeapArray)</td><td>滑动窗口(基于RxJava)</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>流量整形</td><td>支持预热模式、匀速器模式、预热排队模式</td><td>不支持</td><td>简单的Rate Limiter，模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配餐规则，查看秒级监控。机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><h4 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h4><p>当前问题：==一旦我们重启应用，sentinel规则将消失，生产环境需要将配置规则进行持久化==</p><p>将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址,sentinel控制台的流控规则就能看到，只要Nacos里面的配置不删除，针对8401上sentinel上的流控规则持续有效</p><p><strong>步骤</strong></p><p>1、修改cloud-alibaba-sentinel-service8401</p><p>2、在POM添加如下的maven</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--SpringCloud sentinel持久化--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、在YML添加如下的内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">datasource:  ds1:    nacos:      server-addr: localhost:8848      dataId: cloud-alibaba-sentinel-service      groupId: DEFAULT_GROUP      data-type: json      rule-type: flow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026134128574.png" alt="image-20221026134128574"></p><p>4、添加Nacos业务规则配置及内容解析</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026132907734.png" alt="image-20221026132907734"></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">[    {        "resource":"/rateLimit/byUrl",        "limitApp":"default",        "grade":1,        "count":1,        "strategy":0,        "controlBehavior":0,        "clousterModel":false    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>resource：资源名称;</li><li>limitApp：来源应用;</li><li>grade：阈值类型，0表示线程数，1表示QPS;</li><li>count：单机阈值;</li><li>strategy：流控模式，0表示直接，1表示关联，2表示链路;</li><li>controlBehavior：流控效果，0表示快速失败，1表示Warm Up，2表示排队等待;</li><li>clusterMode：是否集群。</li></ul><p>5、启动8401后刷新sentinel发现业务规则有了</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026134216206.png" alt="image-20221026134216206"></p><p>6、快速访问测试接口<a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026134335092.png" alt="image-20221026134335092"></p><p>7、停止8401再看sentinel</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026134414131.png" alt="image-20221026134414131"></p><p>8、重新启动8401，访问：<a href="http://localhost:8401/rateLimit/byUrl%EF%BC%8C%E5%86%8D%E7%9C%8Bsentinel">http://localhost:8401/rateLimit/byUrl，再看sentinel</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026134629400.png" alt="image-20221026134629400"></p><h3 id="SpringCloud-Alibaba-Seata处理分布式事务"><a href="#SpringCloud-Alibaba-Seata处理分布式事务" class="headerlink" title="SpringCloud Alibaba Seata处理分布式事务"></a>SpringCloud Alibaba Seata处理分布式事务</h3><h4 id="分布式事务问题"><a href="#分布式事务问题" class="headerlink" title="分布式事务问题"></a>分布式事务问题</h4><p>例如：</p><p>用户购买商品的业务逻辑。整个业务逻辑由3个微服务提供支持:</p><ul><li>仓储服务：对给定的商品扣除仓储数量。</li><li>订单服务：根据采购需求创建订单。</li><li>帐户服务：从用户帐户中扣除余额。</li></ul><p>将单体应用被拆分成微服务应用，==原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源==，业务操作需要调用三个服务来完成。此时==每个服务内部的数据一致性由<strong>本地</strong>事务来保证，但是<strong>全局</strong>的数据一致性问题没法保证==。</p><p>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026135533802.png" alt="image-20221026135533802"></p><h4 id="Seata简介"><a href="#Seata简介" class="headerlink" title="Seata简介"></a>Seata简介</h4><p>Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务</p><h5 id="官网："><a href="#官网：" class="headerlink" title="官网："></a>官网：</h5><p><a href="http://seata.io/zh-cn/">http://seata.io/zh-cn/</a></p><h5 id="典型的分布式事务过程"><a href="#典型的分布式事务过程" class="headerlink" title="典型的分布式事务过程"></a>典型的分布式事务过程</h5><p>分布式事务处理过程的一ID＋三组件模型</p><ul><li><p>Transaction lD XID：全局唯一的事务ID</p></li><li><p>三组件概念：官网：<a href="http://seata.io/zh-cn/docs/overview/terminology.html">http://seata.io/zh-cn/docs/overview/terminology.html</a></p><ul><li>Transaction Coordinator (TC)事务协调者：维护全局和分支事务的状态，驱动全局事务提交或回滚。</li><li>Transaction Manager (TM)事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li><li>Resource Manager (RM)资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul></li></ul><h5 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026141213019.png" alt="image-20221026141213019"></p><p>1.TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID;</p><p>2.XID在微服务调用链路的上下文中传播;</p><p>3.RM向TC注册分支事务，将其纳入XID对应全局事务的管辖;</p><p>4.TM向TC发起针对XID的全局提交或回滚决议;</p><p>5.TC调度XID下管辖的全部分支事务完成提交或回滚请求。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>本地==@Transactional==<br>        全局==@GlobalTransactional==</p><p>SEATA的分布式交易解决方案</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026142321576.png" alt="image-20221026142321576"></p><p>==我们只需要使用一个@GlobalTransactional注解在业务方法上==</p><h4 id="Seata-Server安装"><a href="#Seata-Server安装" class="headerlink" title="Seata-Server安装"></a>Seata-Server安装</h4><p>1、官网下载地址：<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><p>2、seata-server-1.0.0.zip解压到指定目录并修改conf但录下的file.conf配置文件</p><p>​主要修改：自定义事务组名称+事务日志存储模式为db+数据库连接信息</p><p>​service模块修改</p><p>​<img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026143445270.png" alt="image-20221026143445270"></p><p>​</p><p>​store模块修改</p><p>​<img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026144115998.png" alt="image-20221026144115998"></p><p>3、mysql5.7数据库新建库seata</p><p>4、在seata库里建表</p><p>​运行\seata\conf目录下db_store.sql文件</p><p>​<img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026145616491.png" alt="image-20221026145616491"></p><p>5、修改seata-server-1.0.0\seata\conf目录下的registry.conf配置文件</p><p>​<img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026145055846.png" alt="image-20221026145055846"></p><p>6、先启动Nacos端口号8848<code>startup.cmd -m standalone</code></p><p>7、再启动seata-server，在\seata\bin目录上双击seata-server.bat</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221026145847358.png" alt="image-20221026145847358"></p><h4 id="订单-x2F-库存-x2F-账户业务数据库准备"><a href="#订单-x2F-库存-x2F-账户业务数据库准备" class="headerlink" title="订单/库存/账户业务数据库准备"></a>订单/库存/账户业务数据库准备</h4><h5 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h5><p>安装号nacos和seata，并先启动nacos再启动seata</p><p>创建三个服务，一个订单服务，一个库存服务，一个账户服务。</p><p>==当用户下单时，会在订单服务中创建一个订单，然后通过远程调用库存服务来扣减下单商品的库存，再通过远程调用账户服务来扣减用户账户里面的余额，<br>最后在订单服务中修改订单状态为已完成。==</p><p>该操作跨越三个数据库，有两次远程调用，很明显会有分布式事务问题。</p><h5 id="创建业务数据库"><a href="#创建业务数据库" class="headerlink" title="创建业务数据库"></a>创建业务数据库</h5><p>seata_order：存储订单的数据库;</p><p>seata_storage：存储库存的数据库;</p><p>seata_account：存储账户信息的数据库。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">create database seata_order;create database seata_storage;create database seata_account;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="创建业务数据库对应的业务表"><a href="#创建业务数据库对应的业务表" class="headerlink" title="创建业务数据库对应的业务表"></a>创建业务数据库对应的业务表</h5><p>seata_order库下建t_order表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE `t_order` (  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',  `user_id` bigint DEFAULT NULL COMMENT '用户id',  `product_id` bigint DEFAULT NULL COMMENT '产品id',  `count` int DEFAULT NULL COMMENT '数量',  `money` decimal(11,0) DEFAULT NULL COMMENT '金额',  `status` int DEFAULT NULL COMMENT '订单状态：0：创建中，1：已完结',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;INSERT INTO `seata_order`.`t_order`(`id`, `user_id`, `product_id`, `count`, `money`, `status`) VALUES (1, 1, 1, 10, 100, 1);INSERT INTO `seata_order`.`t_order`(`id`, `user_id`, `product_id`, `count`, `money`, `status`) VALUES (2, 1, 1, 10, 100, 1);INSERT INTO `seata_order`.`t_order`(`id`, `user_id`, `product_id`, `count`, `money`, `status`) VALUES (3, 1, 1, 10, 100, 1);INSERT INTO `seata_order`.`t_order`(`id`, `user_id`, `product_id`, `count`, `money`, `status`) VALUES (4, 1, 1, 10, 100, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>seata_storage库下建t_storage表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE `t_storage` (  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',  `product_id` bigint DEFAULT NULL COMMENT '产品id',  `total` bigint DEFAULT NULL COMMENT '总库存',  `used` int DEFAULT NULL COMMENT '已用库存',  `residue` decimal(11,0) DEFAULT NULL COMMENT '剩余库存',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;INSERT INTO `seata_storage`.`t_storage`(`id`, `product_id`, `total`, `used`, `residue`) VALUES (1, 1, 100, 0, 100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>seata_account库下建t_account表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE `t_account` (  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',  `user_id` bigint DEFAULT NULL COMMENT '用户id',  `total` bigint DEFAULT NULL COMMENT '总额度',  `used` int DEFAULT NULL COMMENT '已用额度',  `residue` decimal(11,0) DEFAULT NULL COMMENT '剩余可用额度',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;INSERT INTO `seata_account`.`t_account`(`id`, `user_id`, `total`, `used`, `residue`) VALUES (1, 1, 1000, 0, 1000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="按照上述3库分别建对应的各自回滚日志表"><a href="#按照上述3库分别建对应的各自回滚日志表" class="headerlink" title="按照上述3库分别建对应的各自回滚日志表"></a>按照上述3库分别建对应的各自回滚日志表</h5><p>分别再这3个库中的3张表运行\seata\conf目录下的db_undo_log.sql文件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE `undo_log` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `branch_id` bigint(20) NOT NULL,  `xid` varchar(100) NOT NULL,  `context` varchar(128) NOT NULL,  `rollback_info` longblob NOT NULL,  `log_status` int(11) NOT NULL,  `log_created` datetime NOT NULL,  `log_modified` datetime NOT NULL,  `ext` varchar(100) DEFAULT NULL,  PRIMARY KEY (`id`),  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="订单-x2F-库存-x2F-账户业务微服务准备"><a href="#订单-x2F-库存-x2F-账户业务微服务准备" class="headerlink" title="订单/库存/账户业务微服务准备"></a>订单/库存/账户业务微服务准备</h4><p>==业务需求：下订单 -&gt; 减库存 -&gt; 扣余额 -&gt; 改订单状态==</p><h5 id="新建订单Order-Module"><a href="#新建订单Order-Module" class="headerlink" title="新建订单Order-Module"></a>新建订单Order-Module</h5><p>1.seata-order-service2001</p><p>2.POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--alibaba seata--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--alibaba sentinel--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SpringCloud alibaba nacos--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--feign--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--mysql-connector-java--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--jdbc--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--lombok--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--hutool--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.7.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 2001spring:  application:    name: seata-order-service  datasource:    type: com.alibaba.druid.pool.DruidDataSource  #当前的数据源操作类型    driver-class-name: org.gjt.mm.mysql.Driver  # MySQL驱动包    url: jdbc:mysql://localhost:3306/seata_order?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8    username: root    password: liteng0220  cloud:    nacos:      discovery:        server-addr: localhost:8848    alibaba:      seata:        tx-service-group: fsp_tx_group  #自定义事务组名称需要与seata-server中的对应    sentinel:      transport:        dashboard: localhost:8080   #配置sentinel dashboard地址        port: 8719mybatis:  typeAliasesPackage: com.example.springcloud.entities # 实体类所在包  mapper-locations: classpath:mapper/*.xml  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl                       #sql日志management:  endpoints:    web:      exposure:        include: '*'feign:  hystrix:    enabled: false    logging:  level:    io:      seata: info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.file.conf和\seata\conf的file.conf一致</p><p>5.registry.conf和\seata\conf的registry.conf一致</p><p>6.domain</p><p>7.Mapper接口及实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface OrderMapper {    //1 新建订单    void create(Order order);    //2 修改订单状态，从零改为1    void update(@Param("userId") Long userId, @Param("status") Integer status);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.springcloud.mapper.OrderMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.springcloud.doamin.Order<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into t_order (id,user_id,product_id,count,money,status)        values (null,#{userId},#{productId},#{count},#{money},0);    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update t_order set status = 1        where user_id=#{userId} and status = #{status};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.Service接口及实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@FeignClient(value = "seata-storage-service")public interface StorageService{    @PostMapping(value = "/storage/decrease")    CommonResult decrease(@RequestParam("productId") Long productId, @RequestParam("count") Integer count);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface OrderService {    void create(Order order);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@FeignClient(value = "seata-account-service")public interface AccountService{    @PostMapping(value = "/account/decrease")    CommonResult decrease(@RequestParam("userId") Long userId, @RequestParam("money") BigDecimal money);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service@Slf4jpublic class OrderServiceImpl implements OrderService{    @Resource    private OrderMapper orderMapper;    @Resource    private StorageService storageService;    @Resource    private AccountService accountService;    /**     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态     * 简单说：下订单-&gt;扣库存-&gt;减余额-&gt;改状态     */    @Override    @GlobalTransactional(name = "fsp-create-order")//name随意取，rollbackFor = Exception.class表示只有有异常就回滚    public void create(Order order)    {        log.info("-----&gt;开始新建订单");        //1 新建订单        orderMapper.create(order);        //2 扣减库存        log.info("-----&gt;订单微服务开始调用库存，做扣减Count");        storageService.decrease(order.getProductId(),order.getCount());        log.info("-----&gt;订单微服务开始调用库存，做扣减end");        //3 扣减账户        log.info("-----&gt;订单微服务开始调用账户，做扣减Money");        accountService.decrease(order.getUserId(),order.getMoney());        log.info("-----&gt;订单微服务开始调用账户，做扣减end");        //4 修改订单状态，从零到1,1代表已经完成        log.info("-----&gt;修改订单状态开始");        orderMapper.update(order.getUserId(),0);        log.info("-----&gt;修改订单状态结束");        log.info("-----&gt;下订单结束了，O(∩_∩)O哈哈~");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class OrderController{    @Resource    private OrderService orderService;    @GetMapping("/order/create")    public CommonResult create(Order order)    {        orderService.create(order);        return new CommonResult(200,"订单创建成功");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.Config配置</p><p>数据源配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class DataSourceProxyConfig {    @Value("${mybatis.mapperLocations}")    private String mapperLocations;    @Bean    @ConfigurationProperties(prefix = "spring.datasource")    public DataSource druidDataSource(){        return new DruidDataSource();    }    @Bean    public DataSourceProxy dataSourceProxy(DataSource dataSource) {        return new DataSourceProxy(dataSource);    }    @Bean    public SqlSessionFactory sqlSessionFactoryBean(DataSourceProxy dataSourceProxy) throws Exception {        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();        sqlSessionFactoryBean.setDataSource(dataSourceProxy);        sqlSessionFactoryBean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(mapperLocations));        sqlSessionFactoryBean.setTransactionFactory(new SpringManagedTransactionFactory());        return sqlSessionFactoryBean.getObject();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis mapper包扫描</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@MapperScan({"com.example.springcloud.mapper"})public class MyBatisConfig {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.主启动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@EnableDiscoveryClient@EnableFeignClients@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)//取消数据源的自动创建public class Seata_Order_Main_2001 {    public static void main(String[] args) {        SpringApplication.run(Seata_Order_Main_2001.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="新建库存Storage-Module"><a href="#新建库存Storage-Module" class="headerlink" title="新建库存Storage -Module"></a>新建库存Storage -Module</h5><p>1.seata-storage -service2002</p><p>2.POM和seata-order-service2001一样</p><p>3.YML和seata-order-service2001一样只需改端口即可</p><p>4.file.conf和\seata\conf的file.conf一致</p><p>5.registry.conf和\seata\conf的registry.conf一致</p><p>7.Mapper接口及实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface StorageMapper {    //扣减库存    void decrease(@Param("productId") Long productId, @Param("count") Integer count);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.springcloud.mapper.StorageMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.springcloud.doamin.Storage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrease<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        UPDATE            t_storage        SET            used = used + #{count},residue = residue - #{count}        WHERE            product_id = #{productId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.Service接口及实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface StorageService {    /**     * 扣减库存     */    void decrease(Long productId, Integer count);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class StorageServiceImpl implements StorageService {    private static final Logger LOGGER = LoggerFactory.getLogger(StorageServiceImpl.class);    @Autowired    private StorageMapper storageMapper;    /**     * 扣减库存     */    @Override    public void decrease(Long productId, Integer count) {        LOGGER.info("-------&gt;storage-service中扣减库存开始");        storageMapper.decrease(productId,count);        LOGGER.info("-------&gt;storage-service中扣减库存结束");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class StorageController {    @Autowired    private StorageService storageService;    /**     * 扣减库存     */    @RequestMapping("/storage/decrease")    public CommonResult decrease(Long productId, Integer count) {        storageService.decrease(productId, count);        return new CommonResult(200,"扣减库存成功！");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.Config配置seata-order-service2001一样</p><p>11.主启动</p><h5 id="新建账户Account-Module"><a href="#新建账户Account-Module" class="headerlink" title="新建账户Account-Module"></a>新建账户Account-Module</h5><p>1.seata-account-service2003</p><p>2.POM和seata-order-service2001一样</p><p>3.YML和seata-order-service2001一样只需改端口即可</p><p>4.file.conf和\seata\conf的file.conf一致</p><p>5.registry.conf和\seata\conf的registry.conf一致</p><p>6.domain</p><p>7.Mapper接口及实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface AccountMapper {    /**     * 扣减账户余额     */    void decrease(@Param("userId") Long userId, @Param("money") BigDecimal money);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.springcloud.mapper.AccountMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.springcloud.doamin.Account<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrease<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        UPDATE t_account        SET            residue = residue - #{money},used = used + #{money}        WHERE            user_id = #{userId};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.Service接口及实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface AccountService {    /**     * 扣减账户余额     * @param userId 用户id     * @param money 金额     */    void decrease(@RequestParam("userId") Long userId, @RequestParam("money") BigDecimal money);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class AccountServiceImpl implements AccountService {    private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);    @Autowired    private AccountMapper accountMapper;    /**     * 扣减账户余额     */    @Override    public void decrease(Long userId, BigDecimal money) {        LOGGER.info("-------&gt;account-service中扣减账户余额开始");        //模拟超时异常，全局事务回滚        //暂停几秒钟线程        /*try {            TimeUnit.SECONDS.sleep(20);        } catch (InterruptedException e) {            e.printStackTrace();        }*/        accountMapper.decrease(userId,money);        LOGGER.info("-------&gt;account-service中扣减账户余额结束");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class AccountController {    @Resource    private AccountService accountService;    /**     * 扣减账户余额     */    @RequestMapping("/account/decrease")    public CommonResult decrease(@RequestParam("userId") Long userId, @RequestParam("money") BigDecimal money){        accountService.decrease(userId,money);        return new CommonResult(200,"扣减账户余额成功！");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.Config配置seata-order-service2001一样</p><p>11.主启动</p><h4 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h4><h5 id="正常下单"><a href="#正常下单" class="headerlink" title="正常下单"></a>正常下单</h5><p><a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221027154145756.png" alt="image-20221027154145756"></p><h5 id="超时异常没加-GlobalTransactional"><a href="#超时异常没加-GlobalTransactional" class="headerlink" title="超时异常没加@GlobalTransactional"></a>超时异常没加@GlobalTransactional</h5><p>​<a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><p>​AccountServiceImpl添加超时</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221027154605202.png" alt="image-20221027154605202"></p><p>​<img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221027155324779.png" alt="image-20221027155324779"></p><h5 id="超时异常，添加-GlobalTransactional"><a href="#超时异常，添加-GlobalTransactional" class="headerlink" title="超时异常，添加@GlobalTransactional"></a>超时异常，添加@GlobalTransactional</h5><p><a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221027155607847.png" alt="image-20221027155607847"></p><p>此时就达到只有有异常就事务回滚了</p><h4 id="分布式事务的执行流程"><a href="#分布式事务的执行流程" class="headerlink" title="分布式事务的执行流程"></a>分布式事务的执行流程</h4><ul><li>TM开启分布式事务(TM向TC注册全局事务记录);</li><li>按业务场景，编排数据库、服务等事务内资源（RM向TC汇报资源准备状态） ;</li><li>TM结束分布式事务，事务一阶段结束（TM通知TC提交/回滚分布式事务);</li><li>TC汇总事务信息，决定分布式事务是提交还是回滚;</li><li>TC通知所有RM提交/回滚资源，事务二阶段结束。</li></ul><h4 id="如何做到对业务的无侵入"><a href="#如何做到对业务的无侵入" class="headerlink" title="如何做到对业务的无侵入"></a>如何做到对业务的无侵入</h4><h5 id="一阶段加载"><a href="#一阶段加载" class="headerlink" title="一阶段加载"></a>一阶段加载</h5><p>在一阶段，Seata 会拦截“业务SQL”</p><p>1、解析SQL语义，找到“业务SQL”要更新的业务数据，在业务数据被更新前，将其保存成“before image”,</p><p>2、执行“业务SQL”更新业务数据，在业务数据更新之后，</p><p>3、其保存成“after image”，最后生成行锁。</p><p>以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221027161302393.png" alt="image-20221027161302393"></p><h5 id="二阶段提交"><a href="#二阶段提交" class="headerlink" title="二阶段提交"></a>二阶段提交</h5><p>二阶段如是顺利提交的话，因为“业务SQL”在一阶段已经提交至数据库，所以Seata框架只需将==一阶段保存的快照数据和行锁删掉，完成数据清理即可==。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221027161437489.png" alt="image-20221027161437489"></p><h5 id="二阶段回滚"><a href="#二阶段回滚" class="headerlink" title="二阶段回滚"></a>二阶段回滚</h5><p>二阶段如果是回滚的话，Seata就需要回滚一阶段已经执行的“业务SQL”，还原业务数据。回滚方式便是用“before image”还原业务数据;但在还原前要首先要校验脏写，对比“数据库当前业务数据”和“after image”，如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221027161708493.png" alt="image-20221027161708493"></p><p>补充</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221027163557304.png" alt="image-20221027163557304"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2023/03/03/springsecurity/"/>
      <url>/2023/03/03/springsecurity/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><h2 id="1-1概要"><a href="#1-1概要" class="headerlink" title="1.1概要"></a>1.1概要</h2><p>Spring是非常流行和成功的Java应用开发框架，Spring Security正是Spring家族中的成员。Spring Security基于Spring框架，提供了一套Web应用安全性的完整解决方案。|<br>        正如你可能知道的关于安全方面的两个主要区域是“==认证==”和“==授权==”（或者访问控制），一般来说，Web应用的安全性包括==用户认证(Authentication)==和==用户授权(Authorization)==两个部分，这两点也是Spring Security重要核心功能。s<br>( 1）用户认证指的是:验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。==通俗点说就是系统认为用户是否能登录==<br>( 2）用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。==通俗点讲就是系统判断用户是否有权限去做某些事情。==</p><h2 id="1-2历史"><a href="#1-2历史" class="headerlink" title="1.2历史"></a>1.2历史</h2><p>Spring Security开始于2003年年底.“spring的acegi安全系统”。起因是Spring开发者邮件列表中的一个问题有人提问是否考虑提供一个基于spring的安全实现。</p><p>Spring Security以“The Acegi Secutity System for Spring”的名字始于2013年晚些时候。一个问题提交到Spring开发者的邮件列表，询问是否已经有考虑一个机遇Spring的安全性社区实现。那时候Spring 的社区相对较小(相对现在)。实际上Spring自己在2013年只是一个存在于ScourseForge的项目，这个问题的回答是一个值得研究的领域，虽然目前时间的缺乏组织了我们对它的探索。</p><p>考虑到这一点，一个简单的安全实现建成但是并没有发布。几周后，Spring 社区的其他成员询问了安全性，这次这个代码被发送给他们。其他几个请求也跟随而来。到2014年一月大约有20万人使用了这个代码。这些创业者的人提出一个 SourceForge项目加入是为了，这是在2004三月正式成立。</p><p>在早些时候，这个项目没有任何自己的验证模块，身份验证过程依赖于容器管理的安全性和Acegi安全性。而不是专注于授权。开始的时候这很适合，但是越来越多的用户请求额外的容器支持。容器特定的认证领域接口的基本限制变得清晰。还有一个相关的问题增加新的容器的路径，这是最终用户的困惑和错误配置的常见问题。</p><p>Acegi安全特定的认证服务介绍。大约一年后，Acegi安全正式成为了Spring框架的子项目。1.0.0最终版本是出版于2006 -在超过两年半的大量生产的软件项目和数以百计的改进和积极利用社区的贡献。</p><p>Acegi安全2007年底正式成为了Spring组合项目，更名为”Spring Security”。</p><h2 id="1-3-同款产品对比"><a href="#1-3-同款产品对比" class="headerlink" title="1.3 同款产品对比"></a><strong>1.3</strong> <strong>同款产品对比</strong></h2><h3 id="1-3-1SpringSecurity特点"><a href="#1-3-1SpringSecurity特点" class="headerlink" title="1.3.1SpringSecurity特点:"></a>1.3.1SpringSecurity特点:</h3><p>官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p><ul><li>和Spring无缝整合。“</li><li>全面的权限控制。</li><li>专门为Web开发而设计。<ul><li>旧版本不能脱离Web环境使用。</li><li>新版本对整个框架进行了分层抽取，分成了核心模块和Web模块。单独引入核心模块就可以脱离Web环境。</li></ul></li><li>重是级。</li></ul><h3 id="1-3-2-Shiro"><a href="#1-3-2-Shiro" class="headerlink" title="1.3.2 Shiro"></a><strong>1.3.2 Shiro</strong></h3><p>Apache 旗下的轻量级权限控制框架。</p><p>特点：</p><ul><li><p>轻量级。Shiro 主张的理念是把复杂的事情变简单。针对对性能有更高要求的互联网应用有更好表现。</p></li><li><p>通用性。</p><ul><li>好处：不局限于 Web 环境，可以脱离 Web 环境使用。</li><li>缺陷：在 Web 环境下一些特定的需求需要手动编写代码定制。</li></ul></li></ul><p>Spring Security是Spring家族中的一个安全管理框架，实际上，在Spring Boot出现之前，Spring Security就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是Shiro的天下。</p><p>相对于Shiro，在SSM中整合Spring Security都是比较麻烦的操作，所以，SpringSecurity虽然功能比Shiro强大，但是使用反而没有Shiro多( Shiro虽然功能没有Spring Security多，但是对于大部分项目而言，Shiro 也够用了）。</p><p>自从有了Spring Boot之后，Spring Boot对于Spring Security提供了自动化配置方案，可以使用更少的配置来使用Spring Security。</p><p>因此，一般来说，常见的安全管理技术栈的组合是这样的:</p><ul><li>SSM + Shiro</li><li>Spring Boot/Spring Cloud + Spring Security</li></ul><p>以上只是一个推荐的组合而已，如果单纯从技术上来说，无论怎么组合，都是可以运行的。</p><h2 id="1-4-模块划分"><a href="#1-4-模块划分" class="headerlink" title="1.4 模块划分"></a><strong>1.4</strong> <strong>模块划分</strong></h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808093104015.png" alt="image-20220808093104015"></p><h2 id="2、-SpringSecurity-入门案例"><a href="#2、-SpringSecurity-入门案例" class="headerlink" title="2、 SpringSecurity 入门案例"></a><strong>2、 SpringSecurity</strong> <strong>入门案例</strong></h2><p><strong>SpringSecurity本质是一个过滤器链，有很多过滤器。</strong></p><p><strong>2.1</strong> <strong>创建一个项目</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808093209089.png" alt="image-20220808093209089"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808093559647.png" alt="image-20220808093559647"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808093251068.png" alt="image-20220808093251068"></p><p>账号：user</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808094735817.png" alt="image-20220808094735817"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808094713921.png" alt="image-20220808094713921"></p><h3 id="2-1两个重要的接口"><a href="#2-1两个重要的接口" class="headerlink" title="2.1两个重要的接口"></a>2.1两个重要的接口</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101737127.png" alt="image-20220808101737127"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101821726.png" alt="image-20220808101821726"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101652394.png" alt="image-20220808101652394"></p><p><strong>2.1.1、UserDetailsService</strong> <strong>接口</strong></p><p>当什么也没有配置的时候，账号和密码是由 Spring Security 定义生成的。而在实际项目中</p><p>账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制认证逻辑。</p><p>如果需要自定义逻辑时，只需要实现 UserDetailsService 接口即可。接口定义如下：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101030793.png" alt="image-20220808101030793"></p><p><strong>返回值</strong> <strong>UserDetails</strong> </p><p>这个类是系统默认的用户“<strong>主体</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101054691.png" alt="image-20220808101054691"></p><p>以下是 UserDetails 实现类</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101125745.png" alt="image-20220808101125745"></p><p>以后我们只需要使用 User 这个实体类即可！</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101154544.png" alt="image-20220808101154544"></p><p><strong>方法参数</strong> <strong>username</strong></p><p>表示用户名。此值是客户端表单传递过来的数据。默认情况下必须叫 username，否则无</p><p>法接收</p><p><strong>2.1.2、PasswordEncoder</strong> <strong>接口</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101222576.png" alt="image-20220808101222576"></p><p>接口实现类</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101252613.png" alt="image-20220808101252613"></p><p>BCryptPasswordEncoder 是 Spring Security 官方推荐的密码解析器，平时多使用这个解析器。</p><p>BCryptPasswordEncoder 是对 bcrypt 强散列方法的具体实现。是基于 Hash 算法实现的单向加密。可以通过 strength 控制加密强度，默认 10.</p><p><strong>查用方法演示</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808101354648.png" alt="image-20220808101354648"></p><h3 id="2-2-SpringBoot-对-Security-的自动配置"><a href="#2-2-SpringBoot-对-Security-的自动配置" class="headerlink" title="2.2 SpringBoot 对 Security 的自动配置"></a>2.2 <strong>SpringBoot</strong> <strong>对</strong> <strong>Security</strong> <strong>的自动配置</strong></h3><p>官网：<a href="https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/#servlet-hello">https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/#servlet-hello</a></p><h2 id="3、springsecurity-web权限"><a href="#3、springsecurity-web权限" class="headerlink" title="3、springsecurity-web权限"></a>3、springsecurity-web权限</h2><h3 id="3-1用户认证"><a href="#3-1用户认证" class="headerlink" title="3.1用户认证"></a>3.1用户认证</h3><p>设置登录密码的用户名和密码</p><ul><li><p>第一种方式:通过配置文件</p></li><li><p>第二种方式:通过配置类</p></li><li><p>第三种方式:自定义编写实现类</p></li></ul><h4 id="方式一：在application-properties"><a href="#方式一：在application-properties" class="headerlink" title="方式一：在application.properties"></a>方式一：在application.properties</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#用户名spring.security.user.name=zhangsan #密码spring.security.user.password=123456  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式二：编写类实现接口"><a href="#方式二：编写类实现接口" class="headerlink" title="方式二：编写类实现接口"></a>方式二：编写类实现接口</h4><p>创建一个配置类去继承WebSecurityConfigurerAdapter类，重写configure</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();        String password = bCryptPasswordEncoder.encode("123");//对密码进行加密        auth.inMemoryAuthentication().withUser("Lucy").password(password).roles("admin");    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方式不推荐使用</p><h4 id="方式三：编写自定义实现类实现接口"><a href="#方式三：编写自定义实现类实现接口" class="headerlink" title="方式三：编写自定义实现类实现接口"></a>方式三：编写自定义实现类实现接口</h4><p>1、创建一个配置类去继承WebSecurityConfigurerAdapter类，重写configure</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service("userDetailsService")public class MyUserDetailsService  implements UserDetailsService {    @Override    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList("role");        return new User("mary",new BCryptPasswordEncoder().encode("123"),auths);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="整合MybatisPlus查询数据库登录"><a href="#整合MybatisPlus查询数据库登录" class="headerlink" title="整合MybatisPlus查询数据库登录"></a>整合MybatisPlus查询数据库登录</h5><p>引入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--mybatis-plus--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--mysql--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--lombok 用来简化实体类--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.properties配置文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"># 应用名称spring.application.name=SpringSecurity# 应用服务 WEB 访问端口server.port=8080##用户名#spring.security.user.name=zhangsan##密码#spring.security.user.password=123456spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/demo?serverTimezone=GMT%2B8 spring.datasource.username=rootspring.datasource.password=liteng0220mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImplmybatis-plus.mapper-locations=classpath:com/example/user/mapper/xml/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、创建一个配置类去继承WebSecurityConfigurerAdapter类，重写configure</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service("userDetailsService")public class MyUserDetailsService  implements UserDetailsService {    @Autowired    private UserMapper userMapper;    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        //调用userMapper方法，根据用户名查询数据库        QueryWrapper&lt;com.example.entity.User&gt; wrapper = new QueryWrapper&lt;&gt;();        wrapper.eq("username",username);        com.example.entity.User user = userMapper.selectOne(wrapper);        //判断用户名是否存在        if (user == null){ //数据库没有用户名，认证失败            throw new UsernameNotFoundException("用户名不存在");        }        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList("role");        //从查询数据库返回user对象，得到用户名和密码，返回        return new User(user.getUsername(),new BCryptPasswordEncoder().encode(user.getPassword()),auths);    }}@Service("userDetailsService")public class MyUserDetailsService  implements UserDetailsService {    @Override    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList("role");        return new User("mary",new BCryptPasswordEncoder().encode("123"),auths);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface UserMapper extends BaseMapper&lt;User&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class User {    private Integer id;    private String username;    private String password;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库表语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">/* Navicat Premium Data Transfer Source Server         : 本地MySQL Source Server Type    : MySQL Source Server Version : 80028 Source Host           : localhost:3306 Source Schema         : demo Target Server Type    : MySQL Target Server Version : 80028 File Encoding         : 65001 Date: 08/08/2022 12:58:37*/SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for menu-- ----------------------------DROP TABLE IF EXISTS `menu`;CREATE TABLE `menu`  (  `id` bigint(0) NOT NULL AUTO_INCREMENT,  `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,  `url` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,  `parentid` bigint(0) NULL DEFAULT NULL,  `permission` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of menu-- ----------------------------INSERT INTO `menu` VALUES (1, '系统管理', '', 0, 'menu:system');INSERT INTO `menu` VALUES (2, '用户管理', '', 0, 'menu:user');-- ------------------------------ Table structure for role-- ----------------------------DROP TABLE IF EXISTS `role`;CREATE TABLE `role`  (  `id` bigint(0) NOT NULL AUTO_INCREMENT,  `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of role-- ----------------------------INSERT INTO `role` VALUES (1, '管理员');INSERT INTO `role` VALUES (2, '普通用户');-- ------------------------------ Table structure for role_menu-- ----------------------------DROP TABLE IF EXISTS `role_menu`;CREATE TABLE `role_menu`  (  `mid` bigint(0) NULL DEFAULT NULL,  `rid` bigint(0) NULL DEFAULT NULL) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of role_menu-- ----------------------------INSERT INTO `role_menu` VALUES (1, 1);INSERT INTO `role_menu` VALUES (2, 1);INSERT INTO `role_menu` VALUES (2, 2);-- ------------------------------ Table structure for role_user-- ----------------------------DROP TABLE IF EXISTS `role_user`;CREATE TABLE `role_user`  (  `uid` bigint(0) NULL DEFAULT NULL,  `rid` bigint(0) NULL DEFAULT NULL) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of role_user-- ----------------------------INSERT INTO `role_user` VALUES (1, 1);INSERT INTO `role_user` VALUES (2, 2);-- ------------------------------ Table structure for user-- ----------------------------DROP TABLE IF EXISTS `user`;CREATE TABLE `user`  (  `id` bigint(0) NOT NULL AUTO_INCREMENT,  `username` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE,  UNIQUE INDEX `username`(`username`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of user-- ----------------------------INSERT INTO `user` VALUES (1, 'zhangsan', '123');INSERT INTO `user` VALUES (2, 'lisi', '123');SET FOREIGN_KEY_CHECKS = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义设置登录页面：==注意在input标签的name属性值必须是username，否则登录不成功==。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>security配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                .defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证                .anyRequest().authenticated()                .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2用户授权"><a href="#3-2用户授权" class="headerlink" title="3.2用户授权"></a>3.2用户授权</h3><h4 id="基于角色或权限进行访问控制"><a href="#基于角色或权限进行访问控制" class="headerlink" title="基于角色或权限进行访问控制"></a>基于角色或权限进行访问控制</h4><p>方式一：<strong>hasAuthority</strong> <strong>方法</strong></p><p>如果当前的主体具有指定的权限，则返回 true,否则返回 false</p><p>security配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                .defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证            .antMatchers("/test/index").hasAuthority("admin") //只有拥有单个权限（admin）才能访问/test/index路径                .anyRequest().authenticated()                .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：<strong>hasAnyAuthority</strong> <strong>方法</strong></p><p>如果当前的主体有任何提供的角色（给定的作为一个逗号分隔的字符串列表）的话，返回true.</p><p>security配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                .defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证            //.antMatchers("/test/index").hasAuthority("admin") //只有拥有单个权限（admin）才能访问/test/index路径                //只有拥有admin或role权限才能访问/test/index路径                    .antMatchers("/test/index")                    .hasAnyAuthority("admin","role")                .anyRequest().authenticated()                .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式三：<strong>hasRole</strong> <strong>方法</strong></p><p>如果用户具备给定角色就允许访问,否则出现 403。</p><p>如果当前主体具有指定的角色，则返回 true。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808162628334.png" alt="image-20220808162628334"></p><p>底层源码</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220808162255935.png" alt="image-20220808162255935"></p><p>security配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                .defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证                    //.antMatchers("/test/index").hasAuthority("admin") //只有拥有单个权限（admin）才能访问/test/index路径                    //只有拥有admin或role权限才能访问/test/index路径                    //.antMatchers("/test/index")                    //.hasAnyAuthority("admin","role")                    .antMatchers("/test/index")                    .hasRole("admin")                .anyRequest().authenticated()                .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式四：<strong>hasAnyRole</strong></p><p>表示用户具备任何一个条件都可以访问。</p><p>security配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                .defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证                    //.antMatchers("/test/index").hasAuthority("admin") //只有拥有单个权限（admin）才能访问/test/index路径                    //只有拥有admin或role权限才能访问/test/index路径                    //.antMatchers("/test/index")                    //.hasAnyAuthority("admin","role")                    //.antMatchers("/test/index")                    //.hasRole("admin")            .antMatchers("/test/index")                .hasAnyRole("admin","sale")                .anyRequest().authenticated()                .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义403没有权限页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>权限不足<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>您没有访问此页面的权限<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在security配置类配置如下就可以了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        //配置没有权限访问跳转的自定义页面        http.exceptionHandling().accessDeniedPage("/403.html");        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                .defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证                    //.antMatchers("/test/index").hasAuthority("admin") //只有拥有单个权限（admin）才能访问/test/index路径                    //只有拥有admin或role权限才能访问/test/index路径                    //.antMatchers("/test/index")                    //.hasAnyAuthority("admin","role")                    //.antMatchers("/test/index")                    //.hasRole("admin")                .antMatchers("/test/index")                .hasAnyRole("admin","sale")                .anyRequest().authenticated()                .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a><strong>注解使用</strong></h4><h5 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a><strong>@Secured</strong></h5><p>判断是否具有角色，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE_“。</p><p>使用注解先要开启注解功能！</p><p>**@EnableGlobalMethodSecurity(securedEnabled=true)**在启动类或配置配上加此注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@EnableGlobalMethodSecurity(securedEnabled=true)@SpringBootApplicationpublic class SpringSecurityApplication {    public static void main(String[] args) {        SpringApplication.run(SpringSecurityApplication.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在控制器方法上添加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">// 测试注解：@RequestMapping("testSecured")@ResponseBody@Secured({"ROLE_normal","ROLE_admin"})public String helloUser() {return "hello,user"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/SpringSecurity.assets/image-20220809092711309.png" alt="image-20220809092711309"></p><h5 id="PreAuthorize"><a href="#PreAuthorize" class="headerlink" title="@PreAuthorize"></a><strong>@PreAuthorize</strong></h5><p>先开启注解功能：</p><p>@EnableGlobalMethodSecurity(prePostEnabled = <strong>true</strong>)</p><p>@PreAuthorize：注解适合进入方法前的权限验证， </p><p>@PreAuthorize 可以将登录用户的 roles/permissions 参数传到方法中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/preAuthorize")@ResponseBody//@PreAuthorize("hasRole('ROLE_管理员')")@PreAuthorize("hasAnyAuthority('menu:system')")public String preAuthorize(){ System.out.println("preAuthorize");return "preAuthorize"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a><strong>@PostAuthorize</strong></h5><p>先开启注解功能：</p><p>@EnableGlobalMethodSecurity(prePostEnabled = <strong>true</strong>)</p><p>@PostAuthorize 注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/testPostAuthorize")@ResponseBody@PostAuthorize("hasAnyAuthority('menu:system')")public String preAuthorize(){ System.out.println("test--PostAuthorize");return "PostAuthorize"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="PostFilter"><a href="#PostFilter" class="headerlink" title="@PostFilter"></a><strong>@PostFilter</strong></h5><p>@PostFilter ：权限验证之后对数据进行过滤 留下用户名是 admin1 的数据</p><p>表达式中的 filterObject 引用的是方法返回值 List 中的某一个元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("getAll")@PreAuthorize("hasRole('ROLE_管理员')")@PostFilter("filterObject.username == 'admin1'")@ResponseBodypublic List&lt;UserInfo&gt; getAllUser(){ ArrayList&lt;UserInfo&gt; list = new ArrayList&lt;&gt;(); list.add(new UserInfo(1l,"admin1","6666")); list.add(new UserInfo(2l,"admin2","888"));return list;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="PreFilter"><a href="#PreFilter" class="headerlink" title="@PreFilter"></a><strong>@PreFilter</strong></h5><p>@PreFilter: 进入控制器之前对数据进行过滤</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("getTestPreFilter")@PreAuthorize("hasRole('ROLE_管理员')")@PreFilter(value = "filterObject.id%2==0")@ResponseBodypublic List&lt;UserInfo&gt; getTestPreFilter(@RequestBody List&lt;UserInfo&gt; list){ list.forEach(t-&gt; { System.out.println(t.getId()+"\t"+t.getUsername()); });return list;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==<strong>注意：若使用注解授权，如果在同一路径下，配置类的权限与注解的不同，则注解的优先级更高。</strong>==</p><h4 id="基于数据库实现权限认证"><a href="#基于数据库实现权限认证" class="headerlink" title="基于数据库实现权限认证"></a><strong>基于数据库实现权限认证</strong></h4><p>实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Role {    private Integer id;    private String name;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class RoleUser {    private Integer uid;    private Integer rid;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Menu {    private Integer id;    private String name;    private String url;    private Integer parentId;    private String permission;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写mapper接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface UserInfoMapper {    /**     * 根据用户 Id 查询用户角色     * @param userId     * @return     */    List&lt;Role&gt; selectRoleByUserId(Integer userId);    /**     * 根据用户 Id 查询菜单     * @param userId     * @return     */    List&lt;Menu&gt; selectMenuByUserId(Integer userId);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写UserDetailsService实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service("userDetailsService")public class MyUserDetailsService  implements UserDetailsService {    @Autowired    private UserMapper userMapper;    @Autowired    private UserInfoMapper userInfoMapper;    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        //调用userMapper方法，根据用户名查询数据库        QueryWrapper&lt;com.example.entity.User&gt; wrapper = new QueryWrapper&lt;&gt;();        wrapper.eq("username",username);        com.example.entity.User user = userMapper.selectOne(wrapper);        //判断用户名是否存在        if (user == null){ //数据库没有用户名，认证失败            throw new UsernameNotFoundException("用户名不存在");        }       // List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList("admin,ROLE_sale");        /**         * 从数据库中查询用户权限         */        //声明一个List集合存储角色与菜单        List&lt;GrantedAuthority&gt; grantedAuthorityArrayList = new ArrayList&lt;&gt;();        //获取用户角色，菜单列表        List&lt;Role&gt; roles = userInfoMapper.selectRoleByUserId(user.getId());        List&lt;Menu&gt; menus = userInfoMapper.selectMenuByUserId(user.getId());        //处理角色        for (Role role : roles) {            SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + role.getName());            grantedAuthorityArrayList.add(authority);        }        //处理菜单        for (Menu menu : menus) {            SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(menu.getName());            grantedAuthorityArrayList.add(simpleGrantedAuthority);        }        //从查询数据库返回user对象，得到用户名和密码，返回        return new User(user.getUsername(),new BCryptPasswordEncoder().encode(user.getPassword()),grantedAuthorityArrayList);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写security配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        //退出功能        http.logout().logoutUrl("/logout.html").logoutSuccessUrl("/test/hello").permitAll();        //配置没有权限访问跳转的自定义页面        http.exceptionHandling().accessDeniedPage("/403.html");        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                //.defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .defaultSuccessUrl("/success.html").permitAll()                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证                    //.antMatchers("/test/index").hasAuthority("admin") //只有拥有单个权限（admin）才能访问/test/index路径                    //只有拥有admin或role权限才能访问/test/index路径                    //.antMatchers("/test/index")                    //.hasAnyAuthority("admin","role")                    //.antMatchers("/test/index")                    //.hasRole("admin")                .antMatchers("/test/index")                .hasAnyRole("admin","sale")                .antMatchers("/test/user")                .hasRole("管理员")                .anyRequest().authenticated()                .and().rememberMe()     //开启记住我功能                .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3退出功能"><a href="#3-3退出功能" class="headerlink" title="3.3退出功能"></a>3.3退出功能</h3><p>security配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        //退出功能        http.logout().logoutUrl("/logout.html").logoutSuccessUrl("/test/hello").permitAll();        //配置没有权限访问跳转的自定义页面        http.exceptionHandling().accessDeniedPage("/403.html");        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                //.defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .defaultSuccessUrl("/success.html").permitAll()                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证                    //.antMatchers("/test/index").hasAuthority("admin") //只有拥有单个权限（admin）才能访问/test/index路径                    //只有拥有admin或role权限才能访问/test/index路径                    //.antMatchers("/test/index")                    //.hasAnyAuthority("admin","role")                    //.antMatchers("/test/index")                    //.hasRole("admin")                .antMatchers("/test/index")                .hasAnyRole("admin","sale")                .antMatchers("/test/user")                .hasAnyRole("admin","sale")                .anyRequest().authenticated()                .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/SpringSecurity.assets/image-20220809100648666.png" alt="image-20220809100648666"></p><p>succeess.html页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>登录成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    登录成功！！！    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/logout.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4自动登录（记住我功能）"><a href="#3-4自动登录（记住我功能）" class="headerlink" title="3.4自动登录（记住我功能）"></a>3.4自动登录（记住我功能）</h3><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220809101247536.png" alt="image-20220809101247536"></p><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/SpringSecurity.assets/image-20220809101326759.png" alt="image-20220809101326759"></p><p>1、创建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE `persistent_logins` (  `username` varchar(64) COLLATE utf8mb4_general_ci NOT NULL,  `series` varchar(64) COLLATE utf8mb4_general_ci NOT NULL,  `token` varchar(64) COLLATE utf8mb4_general_ci NOT NULL,  `last_used` timestamp NOT NULL,  PRIMARY KEY (`series`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、在security配置类添加配置</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220809125234910.png" alt="image-20220809125234910"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220809125329126.png" alt="image-20220809125329126"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    //注入数据源    @Autowired    private DataSource dataSource;    @Bean    public PersistentTokenRepository persistentTokenRepository(){        JdbcTokenRepositoryImpl jdbcTokenRepository = new JdbcTokenRepositoryImpl();        jdbcTokenRepository.setDataSource(dataSource);        jdbcTokenRepository.setCreateTableOnStartup(true);//自动创建表        return jdbcTokenRepository;    }    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        //退出功能        http.logout().logoutUrl("/logout.html").logoutSuccessUrl("/test/hello").permitAll();        //配置没有权限访问跳转的自定义页面        http.exceptionHandling().accessDeniedPage("/403.html");        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                //.defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .defaultSuccessUrl("/success.html").permitAll()                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证                    //.antMatchers("/test/index").hasAuthority("admin") //只有拥有单个权限（admin）才能访问/test/index路径                    //只有拥有admin或role权限才能访问/test/index路径                    //.antMatchers("/test/index")                    //.hasAnyAuthority("admin","role")                    //.antMatchers("/test/index")                    //.hasRole("admin")                .antMatchers("/test/index")                .hasAnyRole("admin","sale")                .antMatchers("/test/user")                .hasAnyRole("admin","sale")                .anyRequest().authenticated()                .and().rememberMe()     //开启记住我功能                .tokenRepository(persistentTokenRepository())                .tokenValiditySeconds(60) //单位为秒，60秒后过期                .userDetailsService(userDetailsService)                .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、在login页面添加记住我复选框</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>记住我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：==<input type="checkbox" name="remember-me">记住我中的name属性必须是remember-me==</p><h3 id="3-5CSRF-理解"><a href="#3-5CSRF-理解" class="headerlink" title="3.5CSRF 理解"></a>3.5<strong>CSRF</strong> <strong>理解</strong></h3><p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click</strong> </p><p><strong>attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已</p><p>登录的 Web 应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，<strong>XSS</strong></p><p>利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p><p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个</p><p>自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买</p><p>商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。</p><p>这利用了 web 中用户身份验证的一个漏洞：<strong>简单的身份验证只能保证请求发自某个用户的</strong></p><p><strong>浏览器，却不能保证请求本身是用户自愿发出的</strong>。 </p><p>从 Spring Security 4.0 开始，默认情况下会启用 CSRF 保护，以防止 CSRF 攻击应用程序，Spring Security CSRF 会针对 <strong>PATCH，POST，PUT 和 DELETE</strong> 方法进行防护。</p><p>测试：</p><p>引入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--对Thymeleaf添加加Spring Security标签支持--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf-extras-springsecurity5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>csrfTest.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>用户修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uodate_token<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${_csrf.parameterName}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${_csrf.token}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>csrf_token.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>修改用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${_csrf.token}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>security配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    //注入数据源    @Autowired    private DataSource dataSource;    @Bean    public PersistentTokenRepository persistentTokenRepository(){        JdbcTokenRepositoryImpl jdbcTokenRepository = new JdbcTokenRepositoryImpl();        jdbcTokenRepository.setDataSource(dataSource);//        jdbcTokenRepository.setCreateTableOnStartup(true);//自动创建表        return jdbcTokenRepository;    }    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }    @Bean    PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        //退出功能        http.logout().logoutUrl("/logout.html").logoutSuccessUrl("/test/hello").permitAll();        //配置没有权限访问跳转的自定义页面        http.exceptionHandling().accessDeniedPage("/403.html");        http.formLogin().  //自定义的登录页面                loginPage("/login.html")  //登录页面设置                .loginProcessingUrl("/user/login")  //登录访问路径                //.defaultSuccessUrl("/test/index").permitAll()  //登录成功后，跳转的路径                .defaultSuccessUrl("/success.html").permitAll()                .and().authorizeRequests()                    .antMatchers("/","/test/hello","/user/login").permitAll()  //设置哪些路径可以直接访问不需要认证                    //.antMatchers("/test/index").hasAuthority("admin") //只有拥有单个权限（admin）才能访问/test/index路径                    //只有拥有admin或role权限才能访问/test/index路径                    //.antMatchers("/test/index")                    //.hasAnyAuthority("admin","role")                    //.antMatchers("/test/index")                    //.hasRole("admin")                .antMatchers("/test/index")                .hasAnyRole("admin","sale")                .antMatchers("/test/user")                .hasAnyRole("admin","sale")                .anyRequest().authenticated()                .and().rememberMe()     //开启记住我功能                .tokenRepository(persistentTokenRepository())                .tokenValiditySeconds(60) //单位为秒，60秒后过期                .userDetailsService(userDetailsService);               // .and().csrf().disable(); //关闭csrf防护    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要是把==csrf().disable()==注释掉</p><h2 id="4、SpringSecurity-微服务权限方案"><a href="#4、SpringSecurity-微服务权限方案" class="headerlink" title="4、SpringSecurity 微服务权限方案"></a>4、<strong>SpringSecurity</strong> <strong>微服务权限方案</strong></h2><h3 id="4-1微服务认证与授权实现思路"><a href="#4-1微服务认证与授权实现思路" class="headerlink" title="4.1微服务认证与授权实现思路"></a>4.1<strong>微服务认证与授权实现思路</strong></h3><h4 id="4-1-1、认证授权过程分析"><a href="#4-1-1、认证授权过程分析" class="headerlink" title="4.1.1、认证授权过程分析"></a>4.1.1、认证授权过程分析</h4><p>（1）如果是基于 Session，那么 Spring-security 会对 cookie 里的 sessionid 进行解析，找到服务器存储的 session 信息，然后判断当前用户是否符合请求的要求。</p><p>（2）如果是 token，则是解析出 token，然后将当前请求加入到 Spring-security 管理的权限信息中去</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220809150926766.png" alt="image-20220809150926766"></p><p>如果系统的模块众多，每个模块都需要进行授权与认证，所以我们选择基于 token 的形式进行授权与认证，用户根据用户名密码认证成功，然后获取当前用户角色的一系列权限值，并以用户名为 key，权限列表为 value 的形式存入 redis 缓存中，根据用户名相关信息生成 token 返回，浏览器将 token 记录到 cookie 中，每次调用 api 接口都默认将 token 携带到 header 请求头中，Spring-security 解析 header 头获取 token 信息，解析 token 获取当前用户名，根据用户名就可以从 redis 中获取权限列表，这样 Spring-security 就能够判断当前请求是否有权限访问</p><h4 id="4-1-2权限管理数据模型"><a href="#4-1-2权限管理数据模型" class="headerlink" title="4.1.2权限管理数据模型"></a>4.1.2<strong>权限管理数据模型</strong></h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220809151056151.png" alt="image-20220809151056151"></p><h2 id="5、登录校验"><a href="#5、登录校验" class="headerlink" title="5、登录校验"></a>5、登录校验</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220810145100539.png" alt="image-20220810145100539"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220810144123671.png" alt="image-20220810144123671"></p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>登录：</p><p>①自定义登录接口：调用providerManager的方法进行认证，认证通过生成jwt，然后把用户信息存入redis中</p><p>②自定义UserDetailsService在这个实现类中查询数据库</p><p>校验：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220810144705060.png" alt="image-20220810144705060"></p><p>①定义jwt认证过滤器</p><ul><li>获取token</li><li>解析token获取其中的userid</li><li>从redis中获取用户信息</li><li>存入SecurityContextHolder中</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2023/03/03/nginx/"/>
      <url>/2023/03/03/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h2><p>Nginx是一款轻量级的web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx的网站有:百度、京东、新浪、网易、腾讯、淘宝等。</p><p>Nginx是由<strong>伊戈尔·赛索耶夫</strong>为俄罗斯访问量第二的Rambler .ru站点（俄文: Pam6nep)开发的，第一个公开版本0.1.0发布于2004年10月4日。</p><p>官网下载链接：<a href="http://nginx.org/en/download.html">nginx: download</a></p><h2 id="nginx的安装（windows）"><a href="#nginx的安装（windows）" class="headerlink" title="nginx的安装（windows）"></a>nginx的安装（windows）</h2><p>1、下载压缩包</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615134642514.png" alt="image-20220615134642514"></p><p>2、解压</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615134730759.png" alt="image-20220615134730759"></p><p>查看nginx.conf配置文件</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615135051602.png" alt="image-20220615135051602"></p><p>3、启动nginx</p><p>双击nginx.exe文件或使用命令提示符（cmd）启动</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615135259767.png" alt="image-20220615135259767"></p><p>查看启动是否成功，出现如下页面说明安装并启动成功</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615135449028.png" alt="image-20220615135449028"></p><h2 id="nginx的安装（Linux）"><a href="#nginx的安装（Linux）" class="headerlink" title="nginx的安装（Linux）"></a>nginx的安装（Linux）</h2><p>1、下载安装包</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615135556322.png" alt="image-20220615135556322"></p><p>2、将安装包上传到Linux中</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615135729726.png" alt="image-20220615135729726"></p><p>3、解压安装包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tar -zxvf nginx-1.22.0.tar.gz -C /opt/module/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615135939308.png" alt="image-20220615135939308"></p><p>4、安装nginx，在nginx目录下执行下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 nginx-1.22.0]#  ./configure <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若出现如下的问题</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615140518093.png" alt="image-20220615140518093"></p><p>解决方法：</p><p>先执行如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y install gccyum -y install make zlib-devel gcc-c++ libtool openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、再执行下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、最后在执行如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看安装是否成功</p><pre class="line-numbers language-none"><code class="language-none">whereis nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现如下说明安装成功</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615141144799.png" alt="image-20220615141144799"></p><p>启动nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615141503867.png" alt="image-20220615141503867"></p><p>启动成功如下</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220615142032289.png" alt="image-20220615142032289"></p><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /usr/local/bin/sbin/./nginx     #启动./nginx -s stop        #停止./nginx -s quit        #安全退出./nginx -s reload    #重新加载配置文件ps aux|grep nginx    #查看nginx进程./nginx -c /usr/local/nginx/conf/nginx.conf  #重新加载配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>若使用阿里云或腾讯云服务器则需要在安全组开启对应的端口号，nginx默认端口号80，于是可以开启80端口，看需求使用</p><p>配置文件</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">#全局配置events {    worker_connections  1024;}http {   http配置      upstream liteng{   //负载均衡配置   server 127.0.0.1:8080 weight = 1;   server 127.0.0.1:8081 weight = 2;   }     server {        listen       80;        server_name  localhost;//代理location / {  //反向代理            root   html;            index  index.html index.htm;            proxy_pass http://liteng;        }      }          server {        listen       443;        server_name  localhost;//代理location / {            root   html;            index  index.html index.htm;        }      }     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在Linux系统下载与安装Nginx"><a href="#在Linux系统下载与安装Nginx" class="headerlink" title="在Linux系统下载与安装Nginx"></a>在Linux系统下载与安装Nginx</h2><p>安装过程：</p><p>1、安装依赖</p><pre class="line-numbers language-none"><code class="language-none">yum -y install gcc pcre-devel zlib-devel openssl opensll-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、下载Nginx安装包</p><pre class="line-numbers language-none"><code class="language-none">yum install wgetwget https://nginx.org/download/nginx-1.16.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、解压</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf nginx-1.16.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、cd nginx-1.16.1</p><p>5、</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p /usr/local/nginx./configure --prefix=/usr/local/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6、make &amp;&amp; make install</p><h3 id="Nginx目录结构"><a href="#Nginx目录结构" class="headerlink" title="Nginx目录结构"></a>Nginx目录结构</h3><p>重点目录/文件:</p><ul><li>conf/nginx.conf       nginx配置文件</li><li>html                          存放静态文件(html、css、Js等)</li><li>logs                           日志目录，存放日志文件</li><li>sbin/nginx               二进制文件，用于启动、停止Nginx服务</li></ul><p>若要显示如下的树形结构，需要安装tree命令：<code>yum install tree</code></p><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010193751602.png" alt="image-20221010193751602"></p><h3 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h3><p>查看版本号：在/usr/local/nginx/sbin目录下输入下面的命令</p><pre class="line-numbers language-none"><code class="language-none">./nginx -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010194310639.png" alt="image-20221010194310639"></p><p>检查配置文件正确性</p><p>在启动Nginx服务之前，可以先检查一下conf/nginx.conf文件配置的是否有错误，在/usr/local/nginx/sbin目录下输入下面的命令:</p><pre class="line-numbers language-none"><code class="language-none">./nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010194544074.png" alt="image-20221010194544074"></p><p>启动和停止</p><p>启动Nginx服务，在/usr/local/nginx/sbin目录下使用如下命令:</p><pre class="line-numbers language-none"><code class="language-none">./nginx  或在任何目录下使用： /usr/local/nginx/sbin/nginx 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010194940424.png" alt="image-20221010194940424"></p><p>停止Nginx服务，在/usr/local/nginx/sbin目录下使用如下命令:</p><pre class="line-numbers language-none"><code class="language-none">./nginx -s stop  或在任何目录下使用： /usr/local/nginx/sbin/nginx -s stop 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动完成后可以查看Nginx进程:</p><pre class="line-numbers language-none"><code class="language-none">ps -ef | grep nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010195037460.png" alt="image-20221010195037460"></p><p>访问nginx的默认页面</p><p>首先关闭Linux的防火墙，命令如下</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010195426931.png" alt="image-20221010195426931"></p><p>重新加载配置文件</p><p>当修改Nginx配置文件后，需要重新加载才能生效，可以在/usr/local/nginx/sbin目录下使用下面命令重新加载配置文件:</p><pre class="line-numbers language-none"><code class="language-none">./nginx -s reload  或在任何目录下使用： /usr/local/nginx/sbin/nginx -s reload 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置nginx环境，方便在任何目录下都可以使用nginx命令<code>vim /etc/profile</code>，添加如下的内容</p><pre class="line-numbers language-none"><code class="language-none">PATH=/usr/local/nginx/sbin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后让配置文件生效，使用命令：<code>source /etc/profile</code></p><p>生效后，nginx启动和停止命令为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#启动nginx#停止nginx -s stop#重新加载nginx -s reload#查看Nginx进程ps -ef | grep nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h3><p>Nginx配置文件(conf/nginx.conf)整体分为三部分:</p><ul><li>全局块                         和nginx运行相关的全局配置</li><li>Events块                     和网络连接相关的配置</li><li>Http块                         代理、缓存、日志记录、虚拟主机配置<ul><li>http 全局块</li><li>==server 块==<ul><li>server 全局块</li><li>location 块</li></ul></li></ul></li></ul><p><strong>==注意: http块中可以配置多个Server块，每个Server块中可以配置多个location块。==</strong></p><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010203123256.png" alt="image-20221010203123256"></p><h2 id="Nginx具体应用"><a href="#Nginx具体应用" class="headerlink" title="Nginx具体应用"></a>Nginx具体应用</h2><h3 id="部署静态资源"><a href="#部署静态资源" class="headerlink" title="部署静态资源"></a>部署静态资源</h3><p>Nginx可以作为静态web服务器来部署静态资源。<strong>静态资源</strong>指在服务端真实存在并且能够直接展示的一些文件，比如常见的html页面、css文件、js文件、图片、视频等资源。</p><p>相对于Tomcat，Nginx处理静态资源的能力更加高效，所以在生产环境下，一般都会将静态资源部署到Nginx中。将静态资源部署到Nginx非常简单，只需要将文件复制到Nginx安装目录下的html目录中即可。</p><p> server {<br>        listen       80;<br>        server_name  localhost;<br>        //代理</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">server{    listen 80;  #监听端口    server_name localhost; #服务器名称，若项目，上线则是服务器的域名            location /{   #匹配客户端请求的url        root   html;  #指定静态资源根目录        index  index.html index.htm;   #指定默认首页，若有多个默认首页，则用空格分隔，以分号结束    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a><strong>正向代理</strong></h4><p>是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p><p>正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。</p><p>正向代理<strong>一般是在客户端设置代理服务器</strong>，通过代理服务器转发请求，最终访问到目标服务器。</p><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010211431192.png" alt="image-20221010211431192"></p><h4 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a><strong>反向代理</strong></h4><p>反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源，反向代理服务器负责将请求转发给目标服务器。</p><p>用户不需要知道目标服务器的地址，也无须在用户端作任何设定。</p><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010211625962.png" alt="image-20221010211625962"></p><h4 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">server{    listen 82;  #监听端口    server_name localhost; #服务器名称，若项目，上线则是服务器的域名            location / {   #匹配客户端请求的url        root   html;  #指定静态资源根目录        index  index.html index.htm;   #指定默认首页，若有多个默认首页，则用空格分隔，以分号结束        proxy_pass http://192.168.138.101:8080; #反向代理配置，将请求转发到指定服务器    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010212206107.png" alt="image-20221010212206107"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>早期的网站流量和业务功能都比较简单，单台服务器就可以满足基本需求，但是随着互联网的发展，业务流量越来越大并且业务逻辑也越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器组成应用集群，进行性能的水平扩展以及避免单点故障出现。</p><p><strong>应用集群：</strong>将同一应用部署到多台机器上，组成应用集群，接收负载均衡器分发的请求，进行业务处理并返回响应<br>数据</p><p><strong>负载均衡器：</strong>将用户请求根据对应的负载均衡算法分发到应用集群中的一台服务器进行处理</p><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/Nginx.assets/image-20221010213152052.png" alt="image-20221010213152052"></p><h4 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">upstream targetserver{  #upstream指令可以定义一组服务器    server 192.168.101:8080;    server 192.168.102:8081;}server{    listen 8080;  #监听端口    server_name localhost; #服务器名称，若项目，上线则是服务器的域名            location / {   #匹配客户端请求的url        proxy_pass http://targetserver; #反向代理配置，将请求转发到指定服务器    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h4><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>轮询</td><td>默认方式</td></tr><tr><td>weight</td><td>权重方式(默认为1)，权重越大分发的给它的机会就越高</td></tr><tr><td>ip_hash</td><td>依据ip分配方式</td></tr><tr><td>least_conn</td><td>依据最少连接方式</td></tr><tr><td>url_hash</td><td>依据url分配方式</td></tr><tr><td>fair</td><td>依据响应时间方式</td></tr></tbody></table><p>例如：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">upstream targetserver{  #upstream指令可以定义一组服务器    server 192.168.101:8080 weight=10; #权重越大分发的给它的机会就越高    server 192.168.102:8081 weight=5; #权重越小分发的给它的机会就越低}server{    listen 8080;  #监听端口    server_name localhost; #服务器名称，若项目，上线则是服务器的域名            location / {   #匹配客户端请求的url        proxy_pass http://targetserver; #反向代理配置，将请求转发到指定服务器    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221027235953387.png" alt="image-20221027235953387"></p><h3 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h3><h4 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h4><p>从配置文件开始到events 块之间的内容，主要会设置一些影响nginx服务器整体运行的配置指令，主要包括配置运行Nginx服务器的用户(组)、允许生成的worker process 数，进程PID存放路径、日志存放路径和类型以及配置文件的引入等。</p><p>例如：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">worker_processes  1;  #这是Nginx服务器并发处理服务的关键配置，worker_processes值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028002037312.png" alt="image-20221028002037312"></p><h4 id="Events块"><a href="#Events块" class="headerlink" title="Events块"></a>Events块</h4><p>events 块涉及的指令主要影响Nginx服务器与用户的网络连接，常用的设置包括是否开启对多work_process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个word_process可以同时支持的最大连接数等。  这部分的配置对Nginx的性能影响较大，在实际中应该灵活配置。</p><p>例如：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">events {    worker_connections  1024;  #表示每个work process支持的最大连接数为1024.}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028002530118.png" alt="image-20221028002530118"></p><h4 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h4><p>这是(Nginx服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。需要注意的是：==http块也可以包括http全局块、server块。==</p><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p><h5 id="http全局块"><a href="#http全局块" class="headerlink" title="http全局块"></a>http全局块</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028003017000.png" alt="image-20221028003017000"></p><h5 id="server块"><a href="#server块" class="headerlink" title="server块"></a>server块</h5><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。==每个http 块可以包括多个server 块，而每个server 块就相当于一个虚拟主机==。而==每个server 块也分为全局server块==，以及可以==同时包含多个 locaton 块==。</p><h6 id="1、全局server块"><a href="#1、全局server块" class="headerlink" title="1、全局server块"></a>1、全局server块</h6><p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置。</p><h6 id="2、location块"><a href="#2、location块" class="headerlink" title="2、location块"></a>2、location块</h6><p>一个server 块可以配置多个location块。这块的主要作用是基于Nginx服务器接收到的请求字符串（例如server_name/uri-string ），对虚拟主机名称(也可以是IP别名)之外的字符串(例如前面的/uri-string )进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028003224106.png" alt="image-20221028003224106"></p><h2 id="配置nginx的反向代理"><a href="#配置nginx的反向代理" class="headerlink" title="配置nginx的反向代理"></a>配置nginx的反向代理</h2><h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><p>1、实现效果<br>                (1)打开浏览器，在浏览器地址栏输入地址 <a href="http://www.123.com,跳转到liunx系统tomat主页面中/">www.123.com,跳转到liunx系统tomat主页面中</a></p><p>2、准备工作<br>                (1)在liunx系统安装 tomcat，使用默认端口8080</p><p>解压apache-tomcat-9.0.54.tar.gz命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tar -zxvf apache-tomcat-9.0.54.tar.gz -C /usr/local/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动tomcat，进入<code>/usr/local/apache-tomcat-9.0.54/bin</code>命令下，执行<code>./startup.sh</code>命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /usr/local/apache-tomcat-9.0.54/bin./startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028102513266.png" alt="image-20221028102513266"></p><p>​（2）关闭防火墙，开放指定端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --list-all  #查看开放的端口号#设置开发的端口号firewall-cmd --add-service=http --permanentfirewall-cmd --add-port=8080/tcp --permanent#重启防火墙firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028103743902.png" alt="image-20221028103743902"></p><p>3、访问过程分析</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028104058777.png" alt="image-20221028104058777"></p><p>4、具体配置</p><p>第一步、在windows系统C:\Windows\System32\drivers\etc的host文件进行域名和ip对应关系的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">192.168.10.102  hadoop102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步、在nginx进行请求转发的配置(反向代理）</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028110315878.png" alt="image-20221028110315878"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028110046357.png" alt="image-20221028110046357"></p><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><p>1、实现效果</p><p>​使用nginx反向代理，根据访问的路径跳转到不同端口的服务中，例如：nainx监听端口为9001,</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">访问 http://192.168.10.102:9001/edu/   直接跳转到127.0.0.1:8080访问 http://192.168.10.102:9001/vod/   直接跳转到127.0.0.1:8081<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、准备工作</p><p>​(1）准备两个tomcat服务器，一个8080端口，一个8081端口</p><p>新建两个目录tomcat8080、tomcat8081,并将apache-tomcat-9.0.54.tar.gz解压到这两个目录中，并在apache-tomcat-9.0.54下的webapps目录下创建edu、vod两个目录来存放index.html测试页面文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir tomcat8080mkdir tomcat8081tar -zxvf apache-tomcat-9.0.54.tar.gz -C ./tomcat8080tar -zxvf apache-tomcat-9.0.54.tar.gz -C ./tomcat8081<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改8081这台tomcat的配置文件，<code>cd tomcat8081\apache-tomcat-9.0.54\conf</code>，编辑server.xml文件</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028114126901.png" alt="image-20221028114126901"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028112328044.png" alt="image-20221028112328044"></p><p>测试页面index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Tomcat：8080端口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、具体配置</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028123229077.png" alt="image-20221028123229077"></p><p>location路径配置说明：</p><p>1、<code>= </code>：用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</p><p>2、<code>~</code>：用于表示uri包含正则表达式，并且==区分大小写==。</p><p>3、<code>~*</code>：用于表示 uri包含正则表达式，并且==不区分大小写==。</p><p>4、<code>^~</code>：用于不含正则表达式的uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的 location后，立即使用此location处理请求，而不再使用<br>location块中的正则uri和请求字符串做匹配。</p><p>==注意：如果uri包含正则表达式，则必须要有<code>~</code>或者<code>~*</code>标识。==</p><p>关闭防火墙，开放指定端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --list-all  #查看开放的端口号#设置开发的端口号firewall-cmd --add-service=http --permanentfirewall-cmd --add-port=8080/tcp --permanentfirewall-cmd --add-port=8081/tcp --permanentfirewall-cmd --add-port=9001/tcp --permanent#重启防火墙firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028124957376.png" alt="image-20221028124957376"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028125116492.png" alt="image-20221028125116492"></p><h2 id="配置nginx的负载均衡"><a href="#配置nginx的负载均衡" class="headerlink" title="配置nginx的负载均衡"></a>配置nginx的负载均衡</h2><p>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡</p><p>1、实现效果</p><p>​(1）浏览器地址栏输入地址<a href="http://192.168.10.102/edu/index.html%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%95%88%E6%9E%9C%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E5%B9%B3%E5%9D%87%E5%88%86%E6%8B%85%E5%88%B08080%E5%92%8C">http://192.168.10.102/edu/index.html，实现负载均衡效果，将请求平均分担到8080和</a> 8081端口中去</p><p>​</p><p>​(2)准备两个tomcat服务器，一个8080端口，一个8081端口，上面已经准备好了（这里以案例二来配置）,再在8081的webapps目录下创建edu目录用于存放案例二的index.html文件</p><p>2、具体配置</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028131659695.png" alt="image-20221028131659695"></p><p>3、连续刷新页面的效果</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028134004730.png" alt="image-20221028134004730"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028134023737.png" alt="image-20221028134023737"></p><h3 id="nginx分配服务器策略"><a href="#nginx分配服务器策略" class="headerlink" title="nginx分配服务器策略"></a>nginx分配服务器策略</h3><h4 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h4><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">upstream myserver {server 192.168.10.102:8080;server 192.168.10.102:8081;}server {                listen       8000;        server_name  192.168.10.102;        location / {      proxy_pass http://myserver;             }     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="weight"><a href="#weight" class="headerlink" title="weight"></a>weight</h4><p>weight代表权,重默认为1,权重越高被分配的客户端越多，指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。例如：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">upstream myserver {server 192.168.10.102:8080 weight=1;server 192.168.10.102:8081 weight=2;}server {                listen       8000;        server_name  192.168.10.102;        location / {      proxy_pass http://myserver;        }     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h4><p>每个请求按访问ip的 hash结果分配，这样每个访客固定访问一个后端服务器,可以解决session的问题，例如:</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">upstream myserver {ip_hash;server 192.168.10.102:8080;server 192.168.10.102:8081;}server {                listen       8000;        server_name  192.168.10.102;        location / {      proxy_pass http://myserver;        proxy_connect_timeout 10;        }     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="fair-第三方"><a href="#fair-第三方" class="headerlink" title="fair(第三方)"></a>fair(第三方)</h4><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。例如：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">upstream myserver {server 192.168.10.102:8080;server 192.168.10.102:8081;    fair;}server {                listen       8000;        server_name  192.168.10.102;        location / {      proxy_pass http://myserver;             }     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置nginx的动静分离"><a href="#配置nginx的动静分离" class="headerlink" title="配置nginx的动静分离"></a>配置nginx的动静分离</h2><p>Nginx动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用Nginx处理静态页面，Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种，一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；另外一种方法就是动态跟静态文件混合在一起发布，通过nginx来分开。</p><p>通过location 指定不同的后缀名实现不同的请求转发。通过 expires参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。</p><p>具体Expires定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。(如果经常更新的文件，不建议使用Expires来缓存），我这里设置3d，表示在这3天之内访问这个URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改，则直接从服务器重新下载，返回状态码200。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028141253525.png" alt="image-20221028141253525"></p><p>2、准备工作<br>                (1)在 liunx系统中准备静态资源，用于进行访问，在根目录下创建data文件夹，并在data文件夹下创建www文件夹和image文件夹分别用于存放html文件和图片的静态资源。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /mkdir datacd data mkdir wwwmkdir image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>动静分离<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../image/1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​(2)具体配置</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028143140030.png" alt="image-20221028143140030"></p><p>​</p><p>​(3)效果</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028145017463.png" alt="image-20221028145017463"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028150456538.png" alt="image-20221028150456538"></p><p>==<strong>注意：在根目录下创建data文件夹，必须使用命令<code>cd /</code>进入根目录，在创建data目录，不要再<code>/root/</code>下创建data目录，不然访问时就会报如下的错误</strong>==</p><p><img src="D:\java笔记\笔记\Nginx.assets\image-20221028145501745.png" alt="image-20221028145501745"></p><h2 id="Nginx-配置高可用的集群"><a href="#Nginx-配置高可用的集群" class="headerlink" title="Nginx 配置高可用的集群"></a>Nginx 配置高可用的集群</h2><p>当前的问题，若只有一个nginx服务器在起作用。那么如果nginx宕机整个系统就无法进行正常的工作问题，此时考虑配置nginx集群</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028150158987.png" alt="image-20221028150158987"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028151236453.png" alt="image-20221028151236453"></p><p>配置高可用的准备工作</p><p>1、需要两台nginx服务器。（即两台Linux系统都安装nginx）</p><p>2、两台Linux需要安装 keepalived</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /usryum install keepalived -y  #安装 keepalived#查看是否安装成功rpm -q -a  keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装成功后在etc目录下生成keepalived，在keepalived目录下有keepalived.conf配置文件</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028153732118.png" alt="image-20221028153732118"></p><p>3、高可用配置（主从配置）</p><p>(1）修改/etc/keepalived/keealivec.conf配置文件</p><p>主服务器（192.168.10.102）的keealivec.conf配置文件</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">global_defs {   notification_email {     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   }   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server 192.168.10.102   smtp_connect_timeout 30   router_id LVS_DEVEL  #访问到主机}virtual_script chk_http_port{script "/usr/local/src/nginx_check.sh"interval 2   #检查脚本执行的间隔时间weight 2  #权重}vrrp_instance VI_1 {    state MASTER     #备份服务器上将master改为backupinterface ens33  //网卡    virtual_router_id 51    #主、备virtual_router_id必须相同    priority 100            #主、备机取不同的优先级，主机值较大，备份机值较小    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {        192.168.10.50   //VRRP H虚拟地址            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件说明</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028174133017.png" alt="image-20221028174133017"></p><p>从服务器（192.168.10.103）的keealivec.conf配置文件</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">global_defs {   notification_email {     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   }   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server 192.168.10.103   smtp_connect_timeout 30   router_id LVS_DEVELBACK}virtual_script chk_http_port{script "/usr/local/src/nginx_check.sh"interval 2   #检查脚本执行的间隔时间weight 2}vrrp_instance VI_1 {    state BACKUP        #备份服务器上将master改为backup    interface ens33       //网卡    virtual_router_id 51   #主、备virtual_router_id必须相同    priority 90           #主、备机取不同的优先级，主机值较大，备份机值较小    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {        192.168.10.50  //VRRP H虚拟地址    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件说明：类似于主服务器配置</p><p>(2）分别在两台Linux服务器的/usr/local/src添加检测脚本nginx_check.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!/bin/bashA=`ps -C nginx -no-header | wc -l`if [ $A -eq 0 ];then/usr/local/nginx/sbin/nginxsleep 2if [ `ps -C nginx -no-header | wc -l` -eq 0 ];thenkillall keepalivedfifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)把两台服务器上nginx和 keepalived启动。启动keepalived命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start keepalived.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、效果</p><p>使用虚拟IP访问<a href="http://192.168.10.50/">http://192.168.10.50/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028164106938.png" alt="image-20221028164106938"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028163850594.png" alt="image-20221028163850594"></p><p>停掉主（nginx）服务器（192.168.10.102）和keepalived，再次访虚拟IP地址<a href="http://192.168.10.50/">http://192.168.10.50/</a></p><pre class="line-numbers language-none"><code class="language-none">systemctl stop keepalived.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028164615123.png" alt="image-20221028164615123"></p><h2 id="nginx的原理"><a href="#nginx的原理" class="headerlink" title="nginx的原理"></a>nginx的原理</h2><p>1、master和worker</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028180048257.png" alt="image-20221028180048257"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221028230253320.png" alt="image-20221028230253320"></p><p>master -workers的机制的好处</p><p>首先，对于每个worker进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master进程则很快启动新的worker进程。当然，worker进程的异常退出，肯定是程序有bug 了，异常退出，会导致当前worker上的所有请求失败，不过不会影响到所有请求，所以降低了风险。</p><p>需要设置多少个worke最合适？</p><p>Nginx同redis类似都采用了io多路复用机制，每个worker都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求，即使是千上万个请求也不在话下。每个worker的线程可以把一个cpu的性能发挥到极致。所以worker数和服务器的cpu数相等是最为适宜的。设少了会浪费cpu，设多了会造成cpu频繁切换上下文带来的损耗。</p><p>设置work数量</p><p>==worker数和服务器的cpu数相等是最为适宜的==</p><p>连接数worker_connection</p><p>这个值是表示每个worker进程所能建立连接的最大值，所以，一个nginx能建立的最大连接数，应该是<code>worker_connections * worker_processes</code>。当然，这里说的是最大连接数，对于HTTP请求本地资源来说，能够支持的最大并发数量是<code>worker_connecons*werker_processes</code>，如果是支持http1.1的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是：<code>worker_connections * worker_processes / 2</code>，而如果是HTTP作为反问代理来说，最大并发数量应该是<code>worker_connections * worker_processes / 4</code>。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。</p><p>nginx,有一个master，有四个woker，每个 woker，支持最大的连接数1024，支持的最大并发数是多少?</p><ul><li>普通的静态访问最大并发数是：<code>worker_connections * worker_processes / 2</code></li><li>而如果是HTP作为反向代理来说，最大并发数量应该是 <code>worker_connectios * worker_processes / 4</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL8.0安装</title>
      <link href="/2023/03/03/mysql-an-zhuang/"/>
      <url>/2023/03/03/mysql-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL8-0安装"><a href="#MySQL8-0安装" class="headerlink" title="MySQL8.0安装"></a>MySQL8.0安装</h2><p>官网：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220526184415022-16672986306582.png" alt="image-20220526184415022"></p><p>在其他盘创建一个MySQL目录，并把下载的压缩包解压到这个目录下，并在解压后到解压目录下新建一个<code>my.ini</code>文件，并在my.ini文件编写如下内容</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220526180059725.png" alt="image-20220526180059725"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[mysqld]#设置3306端口port=3306#设置mysql的安装目录basedir=F:\Program Files\MySQL\mysql-8.0.28-winx64#设置mysql数据库的数据的存放目录datadir=F:\Program Files\MySQL\mysql-8.0.28-winx64\data#允许最大连接数max_connections=200#允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统max_connect_errors=10#服务端使用的字符集默认为UTF8character-set-server=utf8#创建新表时将使用的默认存储引擎default-storage-engine=INNODB#默认使用“mysql_native_password”插件认证default_authentication_plugin=mysql_native_password[mysql]#设置mysql客户端默认字符集default-character-set=utf8[client]#设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置环境变量，在系统变量path下添加如下内容</p><pre class="line-numbers language-none"><code class="language-none">F:\Program Files\MySQL\mysql-5.7.37-winx64\bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220526181255910.png" alt="image-20220526181255910"></p><p>配置好环境变量后，初始化MySQL,以管理员的身份运行命令提示符</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqld --initialize-insecure --user=mysqlmysqld -install#启动MySQL服务net start mysql#登录MySQL数据库，不用输入密码，直接回车mysql -u root -p#设置mysql的登录密码alter user user() identified by "密码";#退出MySQL命令quit#停止MySQL服务命令net stop mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于找不到MSVCP120.dll，无法继续执行代码。重新安装程序可能会解决此问题。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220526184344496.png" alt="image-20220526184344496"></p><h2 id="Linux系统安装MySQL-rmp方式"><a href="#Linux系统安装MySQL-rmp方式" class="headerlink" title="Linux系统安装MySQL(rmp方式)"></a>Linux系统安装MySQL(rmp方式)</h2><p>第一步：检测当前系统中是否安装MySQL数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpm -qa  #查询当前系统中安装的所有软件rpm -qa | grep mysql  #查询当前系统中安装的名称带mysql的软件rpm -qa | grep mariadb #查询当前系统中安装的名称带mariadb的软件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010161852081.png" alt="image-20221010161852081"></p><p>RPM (Red-Hat Package Manager)RPM软件包管理器，是红帽Linux用于管理和安装软件的工具</p><p>注意事项：</p><p>如果当前系统中已经安装有MySQL数据库，安装将失败。CentOS7自带mariadb，与MySQL数据库冲突</p><p>第二不：卸载已经安装的冲突软件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpm -e --nodeps 软件名       #卸载软件例如：rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：将MySQL安装包上传到Linux并解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir /usr/local/mysqltar -xvf mysql-5.7.38-1.el7.x86_64.rpm-bundle.tar -C /usr/local/mysql/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011124520189.png" alt="image-20221011124520189"></p><p>第三步：必须按照下面的顺序安装rpm软件包，否则可能会安装失败</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpm -ivh mysql-community-common-5.7.38-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-5.7.38-1.el7.x86_64.rpmrpm -ivh mysql-community-devel-5.7.38-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-compat-5.7.38-1.el7.x86_64.rpmrpm -ivh mysql-community-client-5.7.38-1.el7.x86_64.rpmyum install net-toolsrpm -ivh mysql-community-server-5.7.38-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明1：安装过程中提示缺少net-tools依赖，使用yum安装</p><p>说明2：可以通过指令升级现有软件及系统内核</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，则安装成功</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011125544367.png" alt="image-20221011125544367"></p><p><strong>MySQL的启动</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld   #查看MySQL服务状态systemctl start mysqld    #启动MySQL服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>说明：可以设置开机时启动mysql服务，避免每次开机启动mysql</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl enable mysqld     #开机自启动MySQL服务netstat -tunlp   #查看已启动的服务netstat -tunlp | grep mysqlps -ef | grep mysql     #查看mysql进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>登录MySQL数据库，查阅临时密码</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat /var/log/mysqld.log                                 #查看文件内容cat /var/log/mysqld.log | grep password                 #查看文件内容中包含password的行信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>==<strong>注意事项：</strong>==</p><p>冒号后面的是密码，注意空格</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011131507921.png" alt="image-20221011131507921"></p><p><strong>登录MySQL，修改密码，开放访问权限</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -uroot -p  #登录mysql（使用临时密码登录)#查看当前MySQL数据库密码策略SHOW VARIABLES LIKE 'validate_password%';#修改密码set global validate_password_length=4;  #设置密码长度最低位数set global validate_password_policy=LOW;  #设置密码安全等级低，便于密码可以修改成rootset password = password('root');  #设置密码为root#开启访问权限grant all on *.* to 'root'@'%' identified by 'root';flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011131840097.png" alt="image-20221011131840097"></p><p><strong>退出MySQL命令</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">exit;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>再次登录MySQL数据库是使用上面设置的密码root登录即可</strong></p><p><strong>安装lrzsz</strong></p><p>操作步骤:</p><p>1、搜索lrzsz安装包，命令为 <code>yum list lrzsz</code></p><p><img src="D:\java笔记\笔记\MySQL安装.assets\image-20221011132703973.png" alt="image-20221011132703973"></p><p>2、使用yum命令在线安装，命令为<code>yum install lrzsz.x86_64</code></p><p><strong>注意事项</strong></p><p>Yum(全称为Yellow dog Updater,Modified)是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p><p>==<strong>安装好lrzsz后，使用命令<code>rz</code>就可以将本地的文件上传到Linux服务器了，不需要安装其他的文件上传工具</strong>==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011133515045.png" alt="image-20221011133515045"></p><h2 id="Linux系统中安装git"><a href="#Linux系统中安装git" class="headerlink" title="Linux系统中安装git"></a>Linux系统中安装git</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list git                            #列出git安装包yum install git                         #在线安装git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011134047671.png" alt="image-20221011134047671"></p><h2 id="Linux系统中安装maven"><a href="#Linux系统中安装maven" class="headerlink" title="Linux系统中安装maven"></a>Linux系统中安装maven</h2><p>第一步：上传maven安装包到Linux服务器</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011134642780.png" alt="image-20221011134642780"></p><p>第二步：解压maven安装包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tar -zvxf apache-maven-3.6.1-bin.tar.gz -C /usr/local/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三步：配置maven的环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim /etc/profileexport MAVEN_HOME=/usr/local/apache-maven-3.6.1export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATHsource /etc/profilemvn -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置成功如下</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011140200708.png" alt="image-20221011140200708"></p><p>第四步：修改maven配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /usr/localmkdir repo  #创建maven本地仓库#编辑maven配置文件命令vim /usr/local/apache-maven-3.6.1/conf/settings.xml#修改maven配置文件内容如下&lt;localRepository&gt;/usr/local/repo&lt;/localRepository&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步：配置maven的阿里云镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#编辑maven配置文件命令vim /usr/local/apache-maven-3.6.1/conf/settings.xml#修改maven配置文件内容，在&lt;mirrors&gt;标签和 &lt;profiles&gt;标签分别添加如下的内容#在&lt;mirrors&gt;标签添加如下的内容&lt;mirror&gt;    &lt;id&gt;nexus-aliyun&lt;/id&gt;    &lt;mirrorOf&gt;*,!jeecg,!jeecg-snapshots&lt;/mirrorOf&gt;    &lt;name&gt;Nexus aliyun&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;&lt;/mirror&gt;#在&lt;profiles&gt;标签添加如下的内容&lt;profile&gt;     &lt;id&gt;jdk-1.8&lt;/id&gt;     &lt;activation&gt;          &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;          &lt;jdk&gt;1.8&lt;/jdk&gt;     &lt;/activation&gt;     &lt;properties&gt;          &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;          &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;          &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;     &lt;/properties&gt;&lt;/profile&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Linux系统中安装Tomcat"><a href="#Linux系统中安装Tomcat" class="headerlink" title="Linux系统中安装Tomcat"></a>Linux系统中安装Tomcat</h2><p><strong>操作步骤:</strong></p><p>1、将Tomcat的二进制发布包上传到Linux</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011141903034.png" alt="image-20221011141903034"></p><p>2、解压安装包，命令为<code>tar -zxvf apache-tomcat-9.0.54.tar.gz -C /usr/local</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011142106205.png" alt="image-20221011142106205"></p><p>3、进入Tomcat的bin目录启动服务，命令为<code>sh startup.sh</code>或者<code>./ startup.sh</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011142231867.png" alt="image-20221011142231867"></p><p><strong>验证Tomcat启动是否成功，有多种方式:</strong></p><p>查看启动日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">more /usr/local/apache-tomcat-9.0.54/logs/catalina.outtail -50 /usr/local/apache-tomcat-9.0.54/logs/catalina.out#查看进程ps -ef | grep tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:</p><ul><li>ps命令是linux下非常强大的进程查看命令，通过ps -ef可以查看当前运行的所有进程的详细信息</li><li>“I”在Linux中称为管道符，可以将前一个命令的结果输出给后一个命令作为输入</li><li>使用ps命令查看进程时，经常配合管道符和查找命令grep一起使用，来查看特定进程</li></ul><p><strong>访问tomcat</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011143128714.png" alt="image-20221011143128714"></p><p>==<strong>若输入IP地址和端口号访问不到该页面时，先关闭Linux服务器的防火墙</strong>==</p><p>Linux防火墙命令操作：</p><ul><li><strong>查看防火墙状态(systemctl status firewalld、firewall-cmd –state)</strong></li><li><strong>暂时关闭防火墙(systemctl stop firewalld)</strong></li><li><strong>永久关闭防火墙(systemctl disable firewalld)</strong></li><li><strong>开启防火墙(systemctl start firewalld)</strong></li><li><strong>开放指定端口(firewall-cmd –zone=public –add-port=8080/tcp –permanent)</strong></li><li><strong>关闭指定端口(firewall-cmd –zone=public –remove-port=8080/tcp –permanent)</strong></li><li><strong>立即生效(firewall-cmd –reload)</strong></li><li><strong>查看开放的端口(firewall-cmd –zone=public –list-ports)</strong></li></ul><p><strong>注意:</strong></p><p>1、systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作</p><p>2、firewall-cmd是Linux中专门用于控制防火墙的命令</p><p>==<strong>3、为了保证系统安全，服务器的防火墙不建议关闭</strong>==</p><p><strong>停止Tomcat服务器的方式：</strong></p><ul><li>运行Tomcat的bin目录中提供的停止服务的脚本文件<ul><li>运行命令：<code>sh shutdown.sh</code></li><li>或运行命令：`./shutdown.sh</li></ul></li><li>结束Tomcat进程<ul><li>查看Tomcat进程，获得进程id，命令<code>ps -ef | grep tomcat</code></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011144439687.png" alt="image-20221011144439687"></p><p>执行命令结束进程kill -9 7737</p><p><strong>注意:</strong></p><p>kill命令是Linux提供的用于结束进程的命令，-9表示强制结束</p><h2 id="Linux系统中安装JDK"><a href="#Linux系统中安装JDK" class="headerlink" title="Linux系统中安装JDK"></a>Linux系统中安装JDK</h2><p>1.将Redis安装包上传到Linux</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011155333326.png" alt="image-20221011155333326"></p><p>2.解压安装包，命令: <code>tar -zxvf  jdk-8u212-linux-x64.tar.gz -C /opt/module</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011155440850.png" alt="image-20221011155440850"></p><p>3.配置maven的环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim /etc/profileLANG="en_US.UTF-8"JAVA_HOME=/opt/module/jdk1.8.0_212export MAVEN_HOME=/usr/local/apache-maven-3.6.1export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATHPATH=/usr/local/nginx/sbin:$JAVA_HOME/bin:$PATH#让配置文件生效source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看Java的版本命令：<code>java -version</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011155831617.png" alt="image-20221011155831617"></p><h2 id="Linux系统中安装Redis"><a href="#Linux系统中安装Redis" class="headerlink" title="Linux系统中安装Redis"></a>Linux系统中安装Redis</h2><p><strong>在Linux系统安装Redis步骤:</strong></p><p>1.将Redis安装包上传到Linux</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011145643823.png" alt="image-20221011145643823"></p><p>⒉.解压安装包，命令: <code>tar -zxvf  redis-6.2.6.tar.gz -C /usr/local</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011145752841.png" alt="image-20221011145752841"></p><p>3.安装Redis的依赖环境gcc，命令: <code>yum install gcc-c++</code></p><p>4.进入，cd /usr/local/redis-6.2.6，进行编译，命令: <code>make</code></p><p>5.进入redis的src目录，进行安装，命令: <code>make install</code></p><p><strong>reids的启动命令</strong></p><p>进入，cd /usr/local/redis-6.2.6/src目录，使用命令<code>./redis-server</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011150655640.png" alt="image-20221011150655640"></p><p><strong>连接reids服务命令</strong></p><p>进入，cd /usr/local/redis-6.2.6/src目录，使用命令<code>./redis-cli </code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011150944896.png" alt="image-20221011150944896"></p><p><strong>让redis服务在后台启动</strong></p><p>进入，cd /usr/local/redis-6.2.6目录，修改redis.conf文件</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011151247685.png" alt="image-20221011151247685"></p><p><strong>vim redis.conf</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011151531844.png" alt="image-20221011151531844"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011151823387.png" alt="image-20221011151823387"></p><p><strong>设置redis数据库的密码</strong></p><p>redis默认的密码为空</p><p><strong>设置redis数据库的密码，需要修改redis.conf配置文件</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011152605707.png" alt="image-20221011152605707"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011153944175.png" alt="image-20221011153944175"></p><p>redis默认不允许远程连接</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011154232399.png" alt="image-20221011154232399"></p><p>要想让redis允许远程连接，则需要修改redis.conf配置文件</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011154701263.png" alt="image-20221011154701263"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221011154843947.png" alt="image-20221011154843947"></p><h2 id="在Linux系统下载与安装Nginx"><a href="#在Linux系统下载与安装Nginx" class="headerlink" title="在Linux系统下载与安装Nginx"></a>在Linux系统下载与安装Nginx</h2><p>安装过程：</p><p>1、安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y install gcc pcre-devel zlib-devel openssl opensll-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、下载Nginx安装包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install wgetwget https://nginx.org/download/nginx-1.16.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tar -zxvf nginx-1.16.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、cd nginx-1.16.1</p><p>5、创建nginx目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir -p /usr/local/nginx./configure --prefix=/usr/local/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6、make &amp;&amp; make install</p><h3 id="Nginx目录结构"><a href="#Nginx目录结构" class="headerlink" title="Nginx目录结构"></a>Nginx目录结构</h3><p>重点目录/文件:</p><ul><li>conf/nginx.conf       nginx配置文件</li><li>html                          存放静态文件(html、css、Js等)</li><li>logs                           日志目录，存放日志文件</li><li>sbin/nginx               二进制文件，用于启动、停止Nginx服务</li></ul><p>若要显示如下的树形结构，需要安装tree命令：<code>yum install tree</code></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010193751602.png" alt="image-20221010193751602"></p><h3 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h3><p>查看版本号：在/usr/local/nginx/sbin目录下输入下面的命令</p><pre class="line-numbers language-none"><code class="language-none">./nginx -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010194310639.png" alt="image-20221010194310639"></p><p>检查配置文件正确性</p><p>在启动Nginx服务之前，可以先检查一下conf/nginx.conf文件配置的是否有错误，在/usr/local/nginx/sbin目录下输入下面的命令:</p><pre class="line-numbers language-none"><code class="language-none">./nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010194544074.png" alt="image-20221010194544074"></p><p>启动和停止</p><p>启动Nginx服务，在/usr/local/nginx/sbin目录下使用如下命令:</p><pre class="line-numbers language-none"><code class="language-none">./nginx  或在任何目录下使用： /usr/local/nginx/sbin/nginx 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010194940424.png" alt="image-20221010194940424"></p><p>停止Nginx服务，在/usr/local/nginx/sbin目录下使用如下命令:</p><pre class="line-numbers language-none"><code class="language-none">./nginx -s stop  或在任何目录下使用： /usr/local/nginx/sbin/nginx -s stop 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动完成后可以查看Nginx进程:</p><pre class="line-numbers language-none"><code class="language-none">ps -ef | grep nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010195037460.png" alt="image-20221010195037460"></p><p>访问nginx的默认页面</p><p>首先关闭Linux的防火墙，命令如下</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010195426931.png" alt="image-20221010195426931"></p><p>重新加载配置文件</p><p>当修改Nginx配置文件后，需要重新加载才能生效，可以在/usr/local/nginx/sbin目录下使用下面命令重新加载配置文件:</p><pre class="line-numbers language-none"><code class="language-none">./nginx -s reload  或在任何目录下使用： /usr/local/nginx/sbin/nginx -s reload 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置nginx环境，方便在任何目录下都可以使用nginx命令<code>vim /etc/profile</code>，添加如下的内容</p><pre class="line-numbers language-none"><code class="language-none">PATH=/usr/local/nginx/sbin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后让配置文件生效，使用命令：<code>source /etc/profile</code></p><p>生效后，nginx启动和停止命令为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#启动nginx#停止nginx -s stop#重新加载nginx -s reload#查看Nginx进程ps -ef | grep nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h3><p>Nginx配置文件(conf/nginx.conf)整体分为三部分:</p><ul><li>全局块                         和nginx运行相关的全局配置</li><li>Events块                     和网络连接相关的配置</li><li>Http块                         代理、缓存、日志记录、虚拟主机配置<ul><li>http 全局块</li><li>==server 块==<ul><li>server 全局块</li><li>location 块</li></ul></li></ul></li></ul><p><strong>==注意: http块中可以配置多个Server块，每个Server块中可以配置多个location块。==</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010203123256.png" alt="image-20221010203123256"></p><h2 id="Nginx具体应用"><a href="#Nginx具体应用" class="headerlink" title="Nginx具体应用"></a>Nginx具体应用</h2><h3 id="部署静态资源"><a href="#部署静态资源" class="headerlink" title="部署静态资源"></a>部署静态资源</h3><p>Nginx可以作为静态web服务器来部署静态资源。<strong>静态资源</strong>指在服务端真实存在并且能够直接展示的一些文件，比如常见的html页面、css文件、js文件、图片、视频等资源。</p><p>相对于Tomcat，Nginx处理静态资源的能力更加高效，所以在生产环境下，一般都会将静态资源部署到Nginx中。将静态资源部署到Nginx非常简单，只需要将文件复制到Nginx安装目录下的html目录中即可。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">server{    listen 80;  #监听端口    server_name localhost; #服务器名称，若项目，上线则是服务器的域名            location /{   #匹配客户端请求的url        root   html;  #指定静态资源根目录        index  index.html index.htm;   #指定默认首页，若有多个默认首页，则用空格分隔，以分号结束    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a><strong>正向代理</strong></h4><p>是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p><p>正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。</p><p>正向代理<strong>一般是在客户端设置代理服务器</strong>，通过代理服务器转发请求，最终访问到目标服务器。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010211431192.png" alt="image-20221010211431192"></p><h4 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a><strong>反向代理</strong></h4><p>反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源，反向代理服务器负责将请求转发给目标服务器。</p><p>用户不需要知道目标服务器的地址，也无须在用户端作任何设定。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010211625962.png" alt="image-20221010211625962"></p><h4 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">server{    listen 82;  #监听端口    server_name localhost; #服务器名称，若项目，上线则是服务器的域名            location / {   #匹配客户端请求的url        root   html;  #指定静态资源根目录        index  index.html index.htm;   #指定默认首页，若有多个默认首页，则用空格分隔，以分号结束        proxy_pass http://192.168.138.101:8080; #反向代理配置，将请求转发到指定服务器    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010212206107.png" alt="image-20221010212206107"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>早期的网站流量和业务功能都比较简单，单台服务器就可以满足基本需求，但是随着互联网的发展，业务流量越来越大并且业务逻辑也越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器组成应用集群，进行性能的水平扩展以及避免单点故障出现。</p><p><strong>应用集群：</strong>将同一应用部署到多台机器上，组成应用集群，接收负载均衡器分发的请求，进行业务处理并返回响应<br>数据</p><p><strong>负载均衡器：</strong>将用户请求根据对应的负载均衡算法分发到应用集群中的一台服务器进行处理</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010213152052.png" alt="image-20221010213152052"></p><h4 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">upstream targetserver{  #upstream指令可以定义一组服务器    server 192.168.101:8080;    server 192.168.102:8081;}server{    listen 8080;  #监听端口    server_name localhost; #服务器名称，若项目，上线则是服务器的域名            location / {   #匹配客户端请求的url        proxy_pass http://targetserver; #反向代理配置，将请求转发到指定服务器    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h4><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>轮询</td><td>默认方式</td></tr><tr><td>weight</td><td>权重方式(默认为1)，权重越大分发的给它的机会就越高</td></tr><tr><td>ip_hash</td><td>依据ip分配方式</td></tr><tr><td>least_conn</td><td>依据最少连接方式</td></tr><tr><td>url_hash</td><td>依据url分配方式</td></tr><tr><td>fair</td><td>依据响应时间方式</td></tr></tbody></table><p>例如：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">upstream targetserver{  #upstream指令可以定义一组服务器    server 192.168.101:8080 weight=10; #权重越大分发的给它的机会就越高    server 192.168.102:8081 weight=5; #权重越小分发的给它的机会就越低}server{    listen 8080;  #监听端口    server_name localhost; #服务器名称，若项目，上线则是服务器的域名            location / {   #匹配客户端请求的url        proxy_pass http://targetserver; #反向代理配置，将请求转发到指定服务器    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC+Thymeleaf</title>
      <link href="/2023/03/03/springmvc-thymleaf/"/>
      <url>/2023/03/03/springmvc-thymleaf/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC-Thymeleaf"><a href="#SpringMVC-Thymeleaf" class="headerlink" title="SpringMVC+Thymeleaf"></a>SpringMVC+Thymeleaf</h1><h2 id="准备工作步骤"><a href="#准备工作步骤" class="headerlink" title="准备工作步骤"></a>准备工作步骤</h2><h3 id="1、构建工程"><a href="#1、构建工程" class="headerlink" title="1、构建工程"></a>1、构建工程</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220902101900220.png" alt="image-20220902101900220"></p><h3 id="2、添加maven依赖"><a href="#2、添加maven依赖" class="headerlink" title="2、添加maven依赖"></a>2、添加maven依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- SpringMVC --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 日志 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- ServletAPI --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、添加web模块"><a href="#3、添加web模块" class="headerlink" title="3、添加web模块"></a>3、添加web模块</h3><p>①将pom.xml的打包方式设置为war包</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220902100226117.png" alt="image-20220902100226117"></p><p>②然后在整个项目的Moduldes配置web.xml路径如下图</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220902095903855.png" alt="image-20220902095903855"></p><p>③配置web.xml文件：注册SpringMVC的前端控制器DispatcherServlet</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>             <span class="token comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>             <span class="token comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的 src/main/resources --&gt;</span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!--作为框架的核心组件，在启动过程中有大量的初始化操作要做 而这些操作放在第一次请求时才执行会严重影响访问速度 因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时 --&gt;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!--设置springMVC的核心控制器所能处理的请求的请求路径 /所匹配的请求可以是/login或.html或.js或.css方式的请求路径 但是/不能匹配.jsp请求路径的请求 --&gt;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置springMVC的编码过滤器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><pre class="line-numbers language-none"><code class="language-none">配置springNVcC的前端控制器Dispatcherservleturl-pattern中/和/*的区别:/: 匹配浏览器向服务器发送的所有请求（不包括.jsp）/*: 匹配浏览器向服务器发送的所有请求（包括.jsp）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4、spring-MVC-xml配置文件"><a href="#4、spring-MVC-xml配置文件" class="headerlink" title="4、spring MVC.xml配置文件"></a>4、spring MVC.xml配置文件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/mvc         https://www.springframework.org/schema/mvc/spring-mvc.xsd         http://www.springframework.org/schema/context         https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 自动扫描包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springmvc.controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token comment">&lt;!-- 视图前缀 --&gt;</span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/templates/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                        <span class="token comment">&lt;!-- 视图后缀 --&gt;</span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML5<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--处理静态资源，例如html、js、css、jpg 若只设置该标签，则只能访问静态资源，其他请求则无法访问，此时必须设置&lt;mvc:annotation-driven/&gt;解决问题 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 开启mvc注解驱动 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultCharset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>text/html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><strong>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面。</strong></p><h2 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a><strong>@RequestMapping</strong>注解</h2><h3 id="RequestMapping注解的功能"><a href="#RequestMapping注解的功能" class="headerlink" title="@RequestMapping注解的功能"></a><strong>@RequestMapping</strong>注解的功能</h3><p>@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求</p><h3 id="RequestMapping注解的位置"><a href="#RequestMapping注解的位置" class="headerlink" title="@RequestMapping注解的位置"></a><strong>@RequestMapping</strong>注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller @RequestMapping("/test") public class RequestMappingController {     //此时请求映射所映射的请求的请求路径为：/test/testRequestMapping     @RequestMapping("/testRequestMapping")     public String testRequestMapping(){         return "success";     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RequestMapping注解的value属性"><a href="#RequestMapping注解的value属性" class="headerlink" title="@RequestMapping注解的value属性"></a><strong>@RequestMapping</strong>注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><h3 id="RequestMapping注解的method属性"><a href="#RequestMapping注解的method属性" class="headerlink" title="@RequestMapping注解的method属性"></a><strong>@RequestMapping</strong>注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错</p><p>405：Request method ‘POST’ not supported</p><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符</p><p>串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote><h3 id="RequestMapping注解的params属性（了解）"><a href="#RequestMapping注解的params属性（了解）" class="headerlink" title="@RequestMapping注解的params属性（了解）"></a><strong>@RequestMapping</strong>注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><blockquote><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p><p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping( value = {"/testRequestMapping", "/test"} ,                method = {RequestMethod.GET, RequestMethod.POST} ,                params = {"username","password!=123456"}                )public String testRequestMapping(){     return "success"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时</p><p>页面回报错400：Parameter conditions “username, password!=123456” not met for actual</p><p>request parameters: username={admin}, password={123456}</p></blockquote><h3 id="RequestMapping注解的headers属性（了解）"><a href="#RequestMapping注解的headers属性（了解）" class="headerlink" title="@RequestMapping注解的headers属性（了解）"></a><strong>@RequestMapping</strong>注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><blockquote><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p><p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面</p><p>显示404错误，即资源未找到</p></blockquote><h2 id="SpringMVC支持ant风格的路径"><a href="#SpringMVC支持ant风格的路径" class="headerlink" title="SpringMVC支持ant风格的路径"></a><strong>SpringMVC</strong>支持ant风格的路径</h2><blockquote><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意层数的任意目录</p><p>注意：在使用<strong>时，只能使用/</strong>/xxx的方式</p></blockquote><h2 id="SpringMVC支持路径中的占位符（重点）"><a href="#SpringMVC支持路径中的占位符（重点）" class="headerlink" title="SpringMVC支持路径中的占位符（重点）"></a><strong>SpringMVC</strong>支持路径中的占位符（重点）</h2><blockquote><p>原始方式：/deleteUser?id=1</p><p>rest方式：/user/delete/1</p></blockquote><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testRest/1/admin}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试路径中的占位符--&gt;/testRest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/testRest/{id}/{username}") public String testRest(@PathVariable("id") String id, @PathVariable("username") String username){     System.out.println("id:"+id+",username:"+username);     return "success"; }//最终输出的内容为--&gt;id:1,username:admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>当请求路径中的{}内容与方法中的参数一致，则@PathVariable(“id”)可以省略括号中的内容</p><p>如上的接口可以写成如下所示的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/testRest/{id}/{username}") public String testRest(@PathVariable String id, @PathVariable String username){     System.out.println("id:"+id+",username:"+username);     return "success"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a><strong>SpringMVC</strong>获取请求参数</h2><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、<strong>通过</strong>ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>表单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/add}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/testParam") public String testParam(HttpServletRequest request){     String username = request.getParameter("username");     String password = request.getParameter("password");     System.out.println("username:"+username+",password:"+password);     return "success"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、<strong>通过控制器方法的形参获取请求参数</strong></h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testParam(username='admin',password=123456)}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试获取请求参数-- &gt;/testParam<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/testParam") public String testParam(String username, String password){     System.out.println("username:"+username+",password:"+password);     return "success"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串</p><p>数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、**@RequestParam**"></a>3、**@RequestParam**</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><ul><li><p>value：指定为形参赋值的请求参数的参数名</p></li><li><p>required：设置是否必须传输此请求参数，默认值为true，若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p></li><li><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> @PostMapping("/add") public String message(@RequestParam String username,@RequestParam("password") String password){      System.out.println("username:"+username+'\n'+"password:"+password);      return "success";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、**@RequestHeader**"></a>4、**@RequestHeader**</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、**@CookieValue**"></a>5、**@CookieValue**</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、<strong>通过</strong>POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><p>实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User {    private Integer id;    private String username;    private String password;    private String sex;    private Integer age;    public String getPassword() {        return password;    }    public void setPassword(String password) {        this.password = password;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getUsername() {        return username;    }    public void setUsername(String username) {        this.username = username;    }    public String getSex() {        return sex;    }    public void setSex(String sex) {        this.sex = sex;    }    public Integer getAge() {        return age;    }    public void setAge(Integer age) {        this.age = age;    }    @Override    public String toString() {        return "User{" +                "id=" + id +                ", username='" + username + '\'' +                ", password='" + password + '\'' +                ", sex='" + sex + '\'' +                ", age=" + age +                '}';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/hello}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/hello")public String hello(User user){      Integer age = user.getAge();      String username = user.getUsername();      String password = user.getPassword();      System.out.println("username:"+username+'\n'+"password:"+password+'\n'+"age:"+age);      return "success";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决获取请求参数的乱码问题"><a href="#解决获取请求参数的乱码问题" class="headerlink" title="解决获取请求参数的乱码问题"></a><strong>解决获取请求参数的乱码问题</strong></h2><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置springMVC的编码过滤器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h2 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a><strong>域对象共享数据</strong></h2><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!--    通过ModeLAndview向请求域共享数据--&gt;    &lt;p th:text="${testRequestScope}"&gt;&lt;/p&gt;&lt;!--    使用Model向请求域共享数据--&gt;    &lt;p th:text="${scopeModel}"&gt;&lt;/p&gt;&lt;!--    使用ModeLMap向请求域共享数据--&gt;    &lt;p th:text="${scopeModelMap}"&gt;&lt;/p&gt;&lt;!--    使用map向请求域共享数据--&gt;    &lt;p th:text="${scopeMap}"&gt;&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、<strong>使用ServletAPI</strong>向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/testServletAPI") public String testServletAPI(HttpServletRequest request){     request.setAttribute("testScope", "hello,servletAPI");     return "success"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用<strong>ModelAndView</strong>向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">/**     * 1、通过ModeLAndview向请求域共享数据     * 使用ModelAndview时，可以使用其wodel功能向请求域共享数据     * 使用view功能设置逻辑视图，但是控制器方法一定要将ModelAndview作为方法的返回值     * @return     */    @RequestMapping("/test/maV")    public ModelAndView testMAV(){        /**         *  ModelAndView有Model和View的功能         *         *  Model主要用于向请求域共享数据         *         *  View主要用于设置视图，实现页面跳转         */        ModelAndView andView = new ModelAndView();        //想请求域中共享数据        andView.addObject("testRequestScope","hello,ModelAndView");        //设置逻辑视图        andView.setViewName("success");        return andView;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">//2、使用Model向请求域共享数据    @RequestMapping("/test/model")     public String testModel(Model model){        model.addAttribute("scopeModel","hello,Model");        return "success";     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">// 3，使用ModeLMap向请求域共享数据    @RequestMapping("/test/modelMap")    public String testModelMap(ModelMap modelMap){        modelMap.addAttribute("scopeModelMap","hello,ModelMap");        return "success";    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">// 4，使用map向请求域共享数据   @RequestMapping("/test/map")   public String testMap(Map&lt;String,Object&gt; map){       map.put("scopeMap","hello,scopeMap");       return "success";   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface Model{} public class ModelMap extends LinkedHashMap&lt;String, Object&gt; {} public class ExtendedModelMap extends ModelMap implements Model {} public class BindingAwareModelMap extends ExtendedModelMap {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!--    向session域共享数据--&gt;    &lt;p th:text="${session.scopeSession}"&gt;&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">//向session域共享数据   @RequestMapping("/test/session")   public String testSession(HttpSession session){       session.setAttribute("scopeSession","hello,Session");       return "success";   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--向application域共享数据--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${application.testApplication}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">//向application域共享数据   @RequestMapping("/test/application")   public String testApplication(HttpSession session){       ServletContext context = session.getServletContext();       context.setAttribute("testApplication","hello,application");       return "success";   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMVC的视图"><a href="#SpringMVC的视图" class="headerlink" title="SpringMVC的视图"></a>SpringMVC的视图</h2><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a><strong>1、ThymeleafView</strong></h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图</p><p>后缀所得到的最终路径，会通过转发的方式实现跳转</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test/view/thymeleaf}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试SpringMVC的视图thymeleafView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/test/view/thymeleaf")public String testThymeleafView(){    return "success";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a><strong>2、转发视图</strong></h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视</p><p>图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部</p><p>分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:/“，”forward:/employee”</p><blockquote><p>==注意：转发的url不变==</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/test/view/forward")    public String testInternalResoutceView(){        return "forward:/test/application";//转发到http://localhost:8081/SpringMVC//test/application，但是此时的url任然是http://localhost:8081/SpringMVC/test/view/forward    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test/view/forward}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试SpringMVC的视图InternalResourceView(转发)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a><strong>3、重定向视图</strong></h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不</p><p>会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最</p><p>终路径通过重定向的方式实现跳转</p><p>例如”redirect:/“，”redirect:/employee”</p><blockquote><p>==注意：重定向的url会改变==</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test/view/redirect}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试SpringMVC的视图RedirectView(重定向)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">//重定向    @RequestMapping("//test/view/redirect")    public String testRedirectView(){        return "redirect:/test/application";//转发到http://localhost:8081/SpringMVC//test/application，但是此时的url就是http://localhost:8081/SpringMVC//test/application，而不是http://localhost:8081/SpringMVC/test/view/redirect    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a><strong>4、视图控制器view-controller</strong></h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示，在SpringMVC.xml配置文件中添加配置如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    视图控制器:为当前的请求直接设置视图名称实现页面跳转若设置视图控制器，则只有视图控制器所设置的请求会被处理，其他的请求将全部404此时必须在配置一个标签:&lt;mvc : annotation-driven /&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时在controller控制器就不需要如下的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/")    public String test(){        //将逻辑视图返回        return "index";    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a><strong>RESTful</strong></h2><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><p><strong>①资源</strong></p><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><p><strong>②资源的表述</strong></p><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><p><strong>③状态转移</strong></p><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、<strong>RESTful</strong>的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>RESTFUL风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id=1</td><td>user/1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将</strong> <strong>POST</strong> <strong>请求转换为</strong> <strong>DELETE</strong> <strong>或</strong> <strong>PUT</strong> <strong>请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><ul><li><p>a&gt;当前请求的请求方式必须为post</p></li><li><p>b&gt;当前请求必须传输请求参数_method</p></li></ul><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式。</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--设置处理请求方式的过滤器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>欢迎使用SpringMVC的Restful风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/user}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询所有用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/user/1}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询id为1的用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/user}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加用户信息<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/user}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>put<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>修改用户信息<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/user/1}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>删除id为1的用户信息<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 查询所有的用户信息--&gt;/user--&gt;get * 根据id查询用户信息--&gt;/user/1--&gt;get * 添加用户信息--&gt;/user--&gt;post * 修改用户信息--&gt;/user--&gt;put * 删除用户信息--&gt;/user/1--&gt;delete *//** * 注意:浏览器目前只能发送get和post请求 * 若要发送put和delete请求，需要在web.xml中配置一个过滤器HiddenHttpMethodFilter配置了过滤器之后，发送的请求要满足两个条件，才能将请求方式转换为put或delete * 1、当前请求必须为post * 2、当前请求必须传输请求参数_method，_method的值才是最终的请求方式 */@Controllerpublic class TestRestfulController {    @RequestMapping(value = "/user",method = RequestMethod.GET)    public String getAllUser(){        System.out.println("这是get请求");        System.out.println("查询所有的用户信息--&gt;/user--&gt;get");        return "success";    }    @RequestMapping(value = "/user/{id}",method = RequestMethod.GET)    public String getUserById(@PathVariable Integer id){        System.out.println("这是get请求");        System.out.println("根据id查询用户信息--&gt;/user/"+id+"--&gt;get");        return "success";    }    @RequestMapping(value = "/user",method = RequestMethod.POST)    public String insertUser(){        System.out.println("这是post请求");        System.out.println("添加用户信息--&gt;/user--&gt;post");        return "success";    }    @RequestMapping(value = "/user",method = RequestMethod.PUT)    public String updateUser(){        System.out.println("这是put请求");        System.out.println("修改用户信息--&gt;/user--&gt;put");        return "success";    }    @RequestMapping(value = "/user/{id}",method = RequestMethod.DELETE)    public String deleteUser(){        System.out.println("这是delete请求");        System.out.println("删除用户信息--&gt;/user/1--&gt;delete");        return "success";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和</p><p>HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字</p><p>符集的</p><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String paramValue = request.getParameter(this.methodParam);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="RESTful案例"><a href="#RESTful案例" class="headerlink" title="RESTful案例"></a><strong>RESTful案例</strong></h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Employee {    private Integer id;    private String lastName;    private String email;    //1 male, 0 female    private Integer gender;    public Employee() {    }    public Employee(Integer id, String lastName, String email, Integer gender) {        this.id = id;        this.lastName = lastName;        this.email = email;        this.gender = gender;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getLastName() {        return lastName;    }    public void setLastName(String lastName) {        this.lastName = lastName;    }    public String getEmail() {        return email;    }    public void setEmail(String email) {        this.email = email;    }    public Integer getGender() {        return gender;    }    public void setGender(Integer gender) {        this.gender = gender;    }    @Override    public String toString() {        return "Employee{" +                "id=" + id +                ", lastName='" + lastName + '\'' +                ", email='" + email + '\'' +                ", gender=" + gender +                '}';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper，这里先写死，正常开发从数据库中获取"><a href="#mapper，这里先写死，正常开发从数据库中获取" class="headerlink" title="mapper，这里先写死，正常开发从数据库中获取"></a>mapper，这里先写死，正常开发从数据库中获取</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Repositorypublic class EmployeeMapper {    private static Map&lt;Integer, Employee&gt; employees = null;    static{        employees = new HashMap&lt;Integer, Employee&gt;();        employees.put(1001, new Employee(1001, "E-AA", "aa@163.com", 1));        employees.put(1002, new Employee(1002, "E-BB", "bb@163.com", 1));        employees.put(1003, new Employee(1003, "E-CC", "cc@163.com", 0));        employees.put(1004, new Employee(1004, "E-DD", "dd@163.com", 0));        employees.put(1005, new Employee(1005, "E-EE", "ee@163.com", 1));    }    private static Integer initId = 1006;        //保存或修改方法    public void save(Employee employee){        if(employee.getId() == null){            employee.setId(initId++);        }        employees.put(employee.getId(), employee);    }    //获取所有员工信息方法    public Collection&lt;Employee&gt; getAll(){        return employees.values();    }    //通过id来获取员工信息    public Employee get(Integer id){        return employees.get(id);    }    //通过id来删除员工信息    public void delete(Integer id){        employees.remove(id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller控制器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class EmployeeController {    @Autowired    private EmployeeMapper employeeMapper;    @RequestMapping(value = "/employee",method = RequestMethod.GET)    public String getAllEmployee(Model model){        //获取所有的员工信息        Collection&lt;Employee&gt; allEmployee = employeeMapper.getAll();        //将所有员工的信息在请求域中共享        model.addAttribute("allEmployee",allEmployee);        //跳转到列表页        return "employee_list";    }    //添加员工    @RequestMapping(value = "/employee",method = RequestMethod.POST)    public String addEmployee(Employee employee){        employeeMapper.save(employee);        //添加成功后重定向到显示所有员工页面        return "redirect:/employee";    }    //根据id查询员工信息    @RequestMapping(value = "/employee/{id}",method = RequestMethod.GET)    public String getEmployeeById(@PathVariable Integer id,Model model){        //根据id查询员工信息        Employee employee = employeeMapper.get(id);        //将员工信息共享到请求域中        model.addAttribute("employee",employee);        //跳转到employee_add.html页面        return "employee_update";    }    //修改员工信息    @RequestMapping(value = "/employee",method = RequestMethod.PUT)    public String updateEmployee(Employee employee){        //调用修改员工信息的方法        employeeMapper.save(employee);        //重定向到所有员工列表/employee        return "redirect:/employee";    }    //删除员工信息    @RequestMapping(value = "/employee/{id}",method = RequestMethod.DELETE)    public String deteleEmployee(@PathVariable Integer id){        //调用删除员工信息的方法        employeeMapper.delete(id);        //删除成功后回到显示员工列表页面        return "redirect:/employee";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能清单"><a href="#功能清单" class="headerlink" title="功能清单"></a><strong>功能清单</strong></h3><table><thead><tr><th>功能</th><th>URL地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>/</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>/employee</td><td>GET</td></tr><tr><td>删除√</td><td>/employee/2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>/toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>GET/employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>/employee/{id}</td><td>GET</td></tr><tr><td>执行更新√</td><td>/employee</td><td>PUT</td></tr></tbody></table><h3 id="创建前端页面"><a href="#创建前端页面" class="headerlink" title="创建前端页面"></a>创建前端页面</h3><h4 id="①创建employee-list-html"><a href="#①创建employee-list-html" class="headerlink" title="①创建employee_list.html"></a>①创建employee_list.html</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>employee_list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引用css样式--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/css/index_work.css}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>employee_list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>lastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>options(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/to/add}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee : ${allEmployee}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.id}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.email}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--thmeleaf三目运算使用--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.gender} == 1? '男':'女'<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{'/employee/'+${employee.id}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteEmployee()<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{'/employee/'+${employee.id}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--删除功能，delete请求方式的表单 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--  使用vue实现删除功能--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/js/vue.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">deleteEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment">//获取form表单</span>          <span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">//将超链接的href属性值赋值给form表单的action属性</span>          <span class="token comment">//event.target表示当前触发事件的标签</span>          form<span class="token punctuation">.</span>action <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>href<span class="token punctuation">;</span>          <span class="token comment">//将表单提交</span>          form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//阻止超链接的默认行为</span>          event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②创建employee-add-html"><a href="#②创建employee-add-html" class="headerlink" title="②创建employee_add.html"></a>②创建employee_add.html</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> add employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引用css样式--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/css/index_work.css}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/employee}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>add employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>lastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③创建employee-update-html"><a href="#③创建employee-update-html" class="headerlink" title="③创建employee_update.html"></a>③创建employee_update.html</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> add employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引用css样式--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/css/index_work.css}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/employee}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>put<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.id}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>add employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>lastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.email}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!--th:field="${employee.gender}" 数据回显--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.gender}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.gender}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交修改<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMVC处理ajax（axios）请求"><a href="#SpringMVC处理ajax（axios）请求" class="headerlink" title="SpringMVC处理ajax（axios）请求"></a>SpringMVC处理ajax（axios）请求</h2><pre class="line-numbers language-ASN.1" data-language="ASN.1"><code class="language-ASN.1">axios({       url: '', //请求路径       method: '',//请求方法       params: '',//请求参数       data: '',//请求参数   }).then(res =&gt; {       //.then(res =&gt;{})表示ajax请求成功后服务器返回来的结果       console.log(res.data)   })params请求参数的方式：     以name=value&amp;name=value的方式发送的请求参数     不管使用的请求方式是get或post，请求参数都会被拼接到请求地址后     此种方式的请求参数可以通过request.getParameter()获取data请求参数的方式：    以json格式发送的请求参数，请求参数会被保存到请求报文的请求体传输到服务器    此种方式的请求参数不能通过request.getParameter()获取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.html页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>测试springMVC处理Ajax请求<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testAjax<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{static/js/vue.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/js/axios.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--                 axios({                        url: '', //请求路径                        method: '',//请求方法                        params: '',//请求参数                        data: '',//请求参数                    }).then(res =&gt; {                        //.then(res =&gt;{})表示ajax请求成功后服务器返回来的结果                        console.log(res.data)                    })                 params请求参数的方式：                      以name=value&amp;name=value的方式发送的请求参数                      不管使用的请求方式是get或post，请求参数都会被拼接到请求地址后                      此种方式的请求参数可以通过request.getParameter()获取                 data请求参数的方式：                     以json格式发送的请求参数，请求参数会被保存到请求报文的请求体传输到服务器                     此种方式的请求参数不能通过request.getParameter()获取 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">     <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>         <span class="token comment">// data:{},</span>         <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>              <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/ajax/test?id=1001"</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span>                            <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>                            <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">"123456"</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class TestAjaxController {    @RequestMapping(value = "/test",method = RequestMethod.POST)    public void testAjax(Integer id, HttpServletResponse response) throws IOException {        System.out.println("id:"+id);        response.getWriter().write("hello.axios");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class TestAjaxController {    @RequestMapping(value = "/test",method = RequestMethod.POST)    public void testAjax(Integer id,@RequestBody String requestBody, HttpServletResponse response) throws IOException {        System.out.println("RequestBody:"+requestBody);        System.out.println("id:"+id);        response.getWriter().write("hello.axios");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220904121109369.png" alt="image-20220904121109369"></p><h3 id="2、-RequestBody获取json格式的请求参数"><a href="#2、-RequestBody获取json格式的请求参数" class="headerlink" title="2、@RequestBody获取json格式的请求参数"></a>2、@RequestBody获取json格式的请求参数</h3><blockquote><p>在使用了axios发送ajax请求之后，浏览器发送到服务器的请求参数有两种格式：</p><p>1、name=value&amp;name=value…，此时的请求参数可以通过request.getParameter()获取，对应SpringMVC中，可以直接通过控制器方法的形参获取此类请求参数</p><p>2、{key:value,key:value,…}，此时无法通过request.getParameter()获取，之前我们使用操作json的相关jar包gson或jackson处理此类请求参数，可以将其转换为指定的实体类对象或map集</p><p>合。在SpringMVC中，直接使用@RequestBody注解标识控制器方法的形参即可将此类请求参数转换为java对象</p></blockquote><p><strong>使用@RequestBody获取json格式的请求参数的条件：</strong></p><p>①导入jackson的依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②SpringMVC的配置文件中设置开启mvc的注解驱动</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--开启mvc的注解驱动--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>③在控制器方法的形参位置，设置json格式的请求参数要转换成的java类型（实体类或map）的参数，并使用@RequestBody注解标识</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>测试@RequestBody处理json格式的请求<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testRequestBody<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{static/js/vue.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/js/axios.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">     <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>         <span class="token comment">// data:{},</span>         <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>             <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/ajax/test/requestBody/json"</span><span class="token punctuation">,</span>                      <span class="token punctuation">{</span>                          <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>                          <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>                          <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>                          <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"男"</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>                      console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pojo实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.springmvc.ajax.pojo;public class User {    private Integer id;    private String username;    private String password;    private Integer age;    private String  gender;    public User() {    }    public User(Integer id, String username, String password, Integer age, String gender) {        this.id = id;        this.username = username;        this.password = password;        this.age = age;        this.gender = gender;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getUsername() {        return username;    }    public void setUsername(String username) {        this.username = username;    }    public String getPassword() {        return password;    }    public void setPassword(String password) {        this.password = password;    }    public Integer getAge() {        return age;    }    public void setAge(Integer age) {        this.age = age;    }    public String getGender() {        return gender;    }    public void setGender(String gender) {        this.gender = gender;    }    @Override    public String toString() {        return "User{" +                "id=" + id +                ", username='" + username + '\'' +                ", password='" + password + '\'' +                ", age=" + age +                ", gender='" + gender + '\'' +                '}';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value = "/test/requestBody/json",method = RequestMethod.POST)   public void testRequestBody(@RequestBody User user, HttpServletResponse response) throws IOException {       System.out.println(user);       response.getWriter().write("hello,@RequestBody");   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220904123043595.png" alt="image-20220904123043595"></p><p>若没有对应的实体类，则在controller使用map集合页可以，如下（没有对应的实体类）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value = "/test/requestBody/json",method = RequestMethod.POST)    public void testRequestBody(@RequestBody Map&lt;String,Object&gt; map, HttpServletResponse response) throws IOException {        System.out.println(map);        response.getWriter().write("hello,@RequestBody");    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220904123848453.png" alt="image-20220904123848453"></p><h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value = "/test/responseBody",method = RequestMethod.GET)   @ResponseBody   public String testResponseBody(){       return "success";   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220904124815538.png" alt="image-20220904124815538"></p><h3 id="4、-ResponseBody响应浏览器json数据"><a href="#4、-ResponseBody响应浏览器json数据" class="headerlink" title="4、@ResponseBody响应浏览器json数据"></a>4、@ResponseBody响应浏览器json数据</h3><p>服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能</p><p><strong>@ResponseBody响应浏览器json数据的条件：</strong></p><p>①导入jackson的依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②SpringMVC的配置文件中设置开启mvc的注解驱动</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--开启mvc的注解驱动--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>③、使用@ResponseBody注解标识控制器方法，在方法中，将需要转换为json字符串并响应到浏览器</p><p>的java对象作为控制器方法的返回值，此时SpringMVC就可以将此对象直接转换为json字符串并响应到</p><p>浏览器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test/responseBody}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试@ResponseBody注解响应浏览器数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>测试@ResponseBody注解响应json格式的数据<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testResponseBody<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{static/js/vue.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/js/axios.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">     <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>         <span class="token comment">// data:{},</span>         <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>             <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/ajax/test/requestBody/json"</span><span class="token punctuation">,</span>                      <span class="token punctuation">{</span>                          <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>                          <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>                          <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>                          <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"男"</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>                      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token function">testResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/ajax/test/responseBody/json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>                      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④contrlloer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//返回一条信息@RequestMapping(value = "/test/responseBody/json")   @ResponseBody   public User testResponseBodyJson(){       User user = new User(1001, "admin", "123456", 23, "男");       return user;   }//返回多条信息，使用map集合接收   @RequestMapping(value = "/test/responseBody/json")   @ResponseBody   public Map&lt;String,Object&gt; testResponseBodyJson(){       User user1 = new User(1001, "admin", "123456", 23, "男");       User user2 = new User(1002, "zhangsan", "123456", 30, "女");       User user3 = new User(1003, "wangwu", "123456", 20, "男");       User user4 = new User(1004, "lisi", "123456", 18, "女");       Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();       map.put("1",user1);       map.put("2",user2);       map.put("3",user3);       map.put("4",user4);       return map;   }//返回多条信息，使用list集合接收   @RequestMapping(value = "/test/responseBody/json")   @ResponseBody   public List&lt;User&gt; testResponseBodyJson(){       User user1 = new User(1001, "admin", "123456", 23, "男");       User user2 = new User(1002, "zhangsan", "123456", 30, "女");       User user3 = new User(1003, "wangwu", "123456", 20, "男");       User user4 = new User(1004, "lisi", "123456", 18, "女");       List&lt;User&gt; list = Arrays.asList(user1, user2, user3, user4);       return list;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RestController注解"><a href="#RestController注解" class="headerlink" title="@RestController注解"></a>@RestController注解</h2><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，==就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解==</p><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a><strong>文件上传和下载</strong></h2><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><p>使用ResponseEntity实现下载文件的功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//文件下载  @RequestMapping(value = "/test/down")  public ResponseEntity&lt;byte[]&gt; testResponseEntity(HttpSession session) throws IOException {      //获取ServletContext对象      ServletContext servletContext = session.getServletContext();      //获取服务器中文件的真实路径      String realPath = servletContext.getRealPath("/static/img/1.jpg");      //创建输入流      InputStream is = new FileInputStream(realPath);      //创建字节数组      byte[] bytes = new byte[is.available()];      //将流读到字节数组中      is.read(bytes);      //创建HttpHeaders对象设置响应头信息      MultiValueMap&lt;String, String&gt; headers = new HttpHeaders();      //设置要下载方式以及下载文件的名字      headers.add("Content-Disposition", "attachment;filename=1.jpg");      //设置响应状态码      HttpStatus statusCode = HttpStatus.OK;      //创建ResponseEntity对象      ResponseEntity&lt;byte[]&gt; responseEntity = new ResponseEntity&lt;&gt;(bytes, headers, statusCode);      //关闭输入流      is.close(); return responseEntity;  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=”multipart/form-data”，SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>①添加依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②在SpringMVC的配置文件中添加配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>③控制器方法：</p><p>form表单</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--注意：input标签的name属性值必须与上传文件控制器的形参同名--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test/up}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        头像:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartFile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">//文件上传   /**    * 文件上传要求    * l、form表单的请求方式必须为post    * 2、form表单必须设置属性enctype="multipart/form-data"    * @param session    * @return    */   @RequestMapping(value = "/test/up",method = RequestMethod.POST)   public String testUp(MultipartFile multipartFile,HttpSession session) throws IOException {       //获取上传的文件名称       String filename = multipartFile.getOriginalFilename();       System.out.println(filename);       //获取servletContext对象       ServletContext servletContext = session.getServletContext();       //获取当前工程下multipartFile目录的真实路径       String realPath = servletContext.getRealPath("multipartFile");       //创建realPath所对应的file对象       File path = new File(realPath);       //判断path所对应目录是否存在       if (!path.exists()){           path.mkdir(); //如果不存在就创建该目录       }       String finalPath = realPath + File.separator + filename;       //上传文件       multipartFile.transferTo(new File(finalPath));       return "success";   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a><strong>拦截器</strong></h2><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a><strong>1、拦截器的配置</strong></h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.interceptor.FirstInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/testRequestEntity<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过 mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、<strong>拦截器的三个抽象方法</strong></h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</p><p>①若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行</p><p>②若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false</p><p>的拦截器之前的拦截器的afterCompletion()会执行</p><h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a><strong>异常处理器</strong></h2><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionMappings<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>             <span class="token comment">&lt;!--properties的键表示处理器方法执行过程中出现的异常 properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面 --&gt;</span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ArithmeticException<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享 --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">//@ControllerAdvice将当前类标识为异常处理的组件 @ControllerAdvice public class ExceptionController {     //@ExceptionHandler用于设置所标识方法处理的异常     @ExceptionHandler(ArithmeticException.class)         //ex表示当前请求处理中出现的异常对象     public String handleArithmeticException(Exception ex, Model model){         model.addAttribute("ex", ex);         return "error";    } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解配置SpringMVC"><a href="#注解配置SpringMVC" class="headerlink" title="注解配置SpringMVC"></a>注解配置SpringMVC</h2><h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，</p><p>当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 该类用于代替web.xml配置文件 */public class WebInit extends AbstractAnnotationConfigDispatcherServletInitializer {    /**     * 设置一个配置类代替spring的配置文件     * @return     */    @Override    protected Class&lt;?&gt;[] getRootConfigClasses() {        return new Class[]{SpringConfig.class};    }    /**     * 设置一个配置类代替SpringMVC的配置文件     * @return     */    @Override    protected Class&lt;?&gt;[] getServletConfigClasses() {        return new Class[]{WebConfig.class};    }    /**     * 指定DispatcherServlet的映射规则，即url-pattern     * @return     */    @Override    protected String[] getServletMappings() {        return new String[]{"/"};    }    /**     * 设置当前的过滤器     * @return     */    @Override    protected Filter[] getServletFilters() {        //创建编码过滤器        CharacterEncodingFilter encodingFilter = new CharacterEncodingFilter();        encodingFilter.setEncoding("UTF-8");//设置编码        encodingFilter.setForceEncoding(true);        //创建处理请求方式的过滤器        HiddenHttpMethodFilter hiddenHttpMethodFilter = new HiddenHttpMethodFilter();        return new Filter[]{encodingFilter,hiddenHttpMethodFilter};    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration //将该类表示为配置类public class SpringConfig {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 该类用于代替SpringMVC.xml的配置文件 * *扫描组件、视图解析器、默认的servlet、 mvc的注解驱动视图控制器、文件上传解析器、拦截器、异常解析器 */@Configuration //将该类表示为配置类@ComponentScan("com.springmvc.annotation.controller") //扫描组件@EnableWebMvc //开启mvc注解驱动public class WebConfig implements WebMvcConfigurer {    /**     * 默认的servlet处理静态资源     * @param configurer     */    @Override    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {        configurer.enable();    }    /**     * 配置视图解析器     * @param registry     */    @Override    public void addViewControllers(ViewControllerRegistry registry) {        registry.addViewController("/").setViewName("index");    }    /**     * //配置文件上传解析器     * @return     */    @Bean //可以将标识的方法的返回值作为bean进行管理,bean的id为方法的方法名    public CommonsMultipartResolver multipartResolver(){        return new CommonsMultipartResolver();    }    /**     * 配置拦截器     * @param registry     */    @Override    public void addInterceptors(InterceptorRegistry registry) {        FirstInterceptor firstInterceptor = new FirstInterceptor();        registry.addInterceptor(firstInterceptor).addPathPatterns("/**");    }    /**     * 配置异常解析器     * @param resolvers     */    @Override    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) {        SimpleMappingExceptionResolver resolver = new SimpleMappingExceptionResolver();        Properties properties = new Properties();        properties.setProperty("java.lang.ArithmeticException","error");        resolver.setExceptionMappings(properties);        resolver.setExceptionAttribute("ex");        resolvers.add(resolver);    }    //配置生成模板解析器    @Bean    public ITemplateResolver templateResolver() {        WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();        // ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过 WebApplicationContext 的方法获得        ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver(webApplicationContext.getServletContext());        templateResolver.setPrefix("/WEB-INF/templates/");        templateResolver.setSuffix(".html");        templateResolver.setCharacterEncoding("UTF-8");        templateResolver.setTemplateMode(TemplateMode.HTML);        return templateResolver;    }    //生成模板引擎并为模板引擎注入模板解析器    @Bean    public SpringTemplateEngine templateEngine(ITemplateResolver templateResolver) {        SpringTemplateEngine templateEngine = new SpringTemplateEngine();        templateEngine.setTemplateResolver(templateResolver);        return templateEngine;    }    //生成视图解析器并未解析器注入模板引擎    @Bean    public ViewResolver viewResolver(SpringTemplateEngine templateEngine) {        ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();        viewResolver.setCharacterEncoding("UTF-8");        viewResolver.setTemplateEngine(templateEngine);        return viewResolver;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><p>创建index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping("/") public String index(){     return "index"; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220905234121001.png" alt="image-20220905234121001"></p><h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h2><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul><li><p>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</p><ul><li>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</li></ul></li><li><p>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</p><ul><li>作用：根据请求的url、method等信息查找Handler，即控制器方法</li></ul></li><li><p>Handler：<strong>处理器</strong>，需要工程师开发</p><ul><li>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</li></ul></li><li><p>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</p><ul><li>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</li></ul></li><li><p>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</p><ul><li>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</li></ul></li><li><p>View：<strong>视图</strong></p><ul><li>作用：将模型数据通过页面展示给用户</li></ul></li></ul><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h3 id="1、ContextLoaderListener"><a href="#1、ContextLoaderListener" class="headerlink" title="1、ContextLoaderListener"></a>1、ContextLoaderListener</h3><p>Spring提供了监听器ContextLoaderListener，实现ServletContextListener接口，可监听ServletContext的状态，在web服务器的启动，读取Spring的配置文件，创建Spring的IOC容器。web应用中必须在web.xml中配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--配置Spring的监听器，在服务器启动时加载Spring的配置文件 Spring配置文件默认位置和名称：/WEB-INF/applicationContext.xml 可通过上下文参数自定义Spring配置文件的位置和名称 --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-</span> <span class="token attr-name">class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--自定义Spring配置文件的位置和名称--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:spring.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h3><h4 id="①创建Maven-Module"><a href="#①创建Maven-Module" class="headerlink" title="①创建Maven Module"></a>①创建Maven Module</h4><h4 id="②导入依赖"><a href="#②导入依赖" class="headerlink" title="②导入依赖"></a>②导入依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!--springmvc--&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!-- Mybatis核心 --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!--mybatis和spring的整合包--&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!-- 连接池 --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!-- junit测试 --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!-- MySQL驱动 --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!-- log4j日志 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!-- 日志 --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!-- ServletAPI --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!--lombok--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③创建表"><a href="#③创建表" class="headerlink" title="③创建表"></a><strong>③创建表</strong></h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE `t_emp` (     `emp_id` int(11) NOT NULL AUTO_INCREMENT,     `emp_name` varchar(20) DEFAULT NULL,    `age` int(11) DEFAULT NULL,    `sex` int(11) DEFAULT NULL,    `email` varchar(50) DEFAULT NULL,    PRIMARY KEY (`emp_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置springMVC的编码过滤器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 设置Spring的配置文件的位置和名称 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:Spring.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置Spring的监听器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--        配置springNVcC的前端控制器Dispatcherservlet        url-pattern中/和/*的区别:        /:匹配浏览器向服务器发送的所有请求（不包括.jsp        /*:匹配浏览器向服务器发送的所有请求（包括.jsp)    --&gt;</span>    <span class="token comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的 src/main/resources --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:SpringMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--作为框架的核心组件，在启动过程中有大量的初始化操作要做        而这些操作放在第一次请求时才执行会严重影响访问速度        因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--设置springMVC的核心控制器所能处理的请求的请求路径        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径        但是/不能匹配.jsp请求路径的请求 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--设置处理请求方式的过滤器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、创建SpringMVC的配置文件并配置"><a href="#4、创建SpringMVC的配置文件并配置" class="headerlink" title="4、创建SpringMVC的配置文件并配置"></a>4、创建SpringMVC的配置文件并配置</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 自动扫描包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token comment">&lt;!-- 视图前缀 --&gt;</span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/templates/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                        <span class="token comment">&lt;!-- 视图后缀 --&gt;</span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML5<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--处理静态资源，例如html、js、css、jpg 若只设置该标签，则只能访问静态资源，其他请求则无法访问，此时必须设置&lt;mvc:annotation-driven/&gt;解决问题 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 开启mvc注解驱动 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultCharset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>text/html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/to/add<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee_add<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、搭建MyBatis环境"><a href="#5、搭建MyBatis环境" class="headerlink" title="5、搭建MyBatis环境"></a>5、搭建MyBatis环境</h3><h4 id="①创建属性文件application-properties"><a href="#①创建属性文件application-properties" class="headerlink" title="①创建属性文件application.properties"></a>①创建属性文件application.properties</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">jdbc.username=root jdbc.password=123456jdbc.url=jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC jdbc.driver=com.mysql.cj.jdbc.Driver <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②创建MyBatis的核心配置文件mybatis-config-xml"><a href="#②创建MyBatis的核心配置文件mybatis-config-xml" class="headerlink" title="②创建MyBatis的核心配置文件mybatis-config.xml"></a>②创建MyBatis的核心配置文件mybatis-config.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--将下划线映射为驼峰--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置分页插件--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③创建Mapper接口和映射文件"><a href="#③创建Mapper接口和映射文件" class="headerlink" title="③创建Mapper接口和映射文件"></a>③创建Mapper接口和映射文件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface EmployeeMapper {      //查询所有员工    List&lt;Employee&gt; getAllEmployee();    //添加员工    void insertEmployee(Employee employee);    //删除员工    void deleteEmployee(@Param("empId") Integer empId);    //根据id查询员工    Employee selectEmployeeById(@Param("empId") Integer empId);    //修改员工信息    void updateEmployee(Employee employee);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.mapper.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    查询所有用户信息--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllEmployee<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select *        from t_emp  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--添加员工--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertEmployee<span class="token punctuation">"</span></span>  <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into t_emp values (null,#{empName},#{age},#{sex},#{email})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--删除员工--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteEmployee<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>        delete from t_emp where emp_id = #{empId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--修改员工信息--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateEmployee<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update t_emp set emp_name = #{empName},age = #{age},sex = #{sex},email = #{email} where emp_id = #{empId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--根据id查询员工信息--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from t_emp where emp_id = #{empId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="④创建日志文件log4j-xml"><a href="#④创建日志文件log4j-xml" class="headerlink" title="④创建日志文件log4j.xml"></a>④创建日志文件log4j.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">log4j:configuration</span> <span class="token name">SYSTEM</span> <span class="token string">"log4j.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">log4j:</span>configuration</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>log4j</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://jakarta.apache.org/log4j/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.log4j.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Encoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.log4j.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ConversionPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%-5p %d{MM-dd HH:mm:ss,SSS} %m (%F:%L) \n<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">log4j:</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、创建Spring的配置文件并配置"><a href="#6、创建Spring的配置文件并配置" class="headerlink" title="6、创建Spring的配置文件并配置"></a>6、创建Spring的配置文件并配置</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--扫描组件（除了控制层）--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--引入application.properties文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:application.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--配置数据源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置事务管理器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--开启事务的注解驱动--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--配置SqlSessionFactoryBean,可以直接在spring的IOC中获取SqlSessionFactory--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置Mybatis的核心配置文件的路径--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--配置数据源--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--配置包的别名--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.entity<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--设置映射文件的路径，只有映射文件的包和mapper接口的包不一致时需要设置--&gt;</span>        <span class="token comment">&lt;!--&lt;property name="mapperLocations" value="classpath:mappers/*.xml"/&gt;--&gt;</span>        <span class="token comment">&lt;!--配置分页插件--&gt;</span>        <span class="token comment">&lt;!--&lt;property name="plugins"&gt;            &lt;array&gt;                &lt;bean class="com.github.pagehelper.PageInterceptor"/&gt;            &lt;/array&gt;        &lt;/property&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置mapper接口的扫描，可以将指定包下所有的mapper接口，通过SqlSession创建代理实现类对象，并将这些对象交给IoC容器管理--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、控制层代码编写"><a href="#7、控制层代码编写" class="headerlink" title="7、控制层代码编写"></a>7、控制层代码编写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class EmployeeController {    @Autowired    private EmployeeService employeeService;    /**     * 查询所有员工     * @param model     * @return     */    @RequestMapping(value = "/employee",method = RequestMethod.GET)    public String getAllEmployee(Model model){        //查询所有员工信息       List&lt;Employee&gt; list =  employeeService.getAllEmployee();       //将员工信息在请求域中共享        model.addAttribute("employees",list);        //跳转到employee_list.html页面        return "employee_list";    }    /**     * 添加员工     * @param employee     * @return     */    @RequestMapping(value = "/insert",method = RequestMethod.POST)    public String insertEmployee(Employee employee){        employeeService.insertEmployee(employee);        return "redirect:/employee/page/1";    }    /**     * 删除员工信息     * @param empId     * @return     */    @RequestMapping(value = "/delete/{empId}",method = RequestMethod.DELETE)    public String deleteEmployee(@PathVariable("empId") Integer empId){        employeeService.deleteEmployee(empId);        return "redirect:/employee/page/1";    }    /**     * 通过id来查询员工信息     * @param empId     * @return     */    @RequestMapping(value = "/getById/{empId}",method = RequestMethod.GET)    public String getEmployeeById(@PathVariable("empId") Integer empId,Model model){        Employee one = employeeService.selectEmployeeById(empId);        model.addAttribute("employee",one);        return "employee_update";    }    /**     * 修改员工信息     * @param employee     * @return     */    @RequestMapping(value = "/update",method = RequestMethod.PUT)    public String updateEmployee(Employee employee){        employeeService.updateEmployee(employee);        return "redirect:/employee/page/1";    }    /**     * 分页显示员工信息     * @param pageNum     * @param model     * @return     */    @RequestMapping(value = "/employee/page/{pageNum}",method = RequestMethod.GET)    public String getEmployeePage(@PathVariable Integer pageNum,Model model){        //获取员工的分页信息        PageInfo&lt;Employee&gt; page = employeeService.getEmployeePage(pageNum);        //将分页数据共享到请求域中        model.addAttribute("page",page);        //跳转到employee_list.html        return "employee_list";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、业务层代码编写"><a href="#8、业务层代码编写" class="headerlink" title="8、业务层代码编写"></a>8、业务层代码编写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface EmployeeService {    //查询所有员工信息    List&lt;Employee&gt; getAllEmployee();    //添加员工    void insertEmployee(Employee employee);    //删除员工信息    void deleteEmployee(Integer empId);    //通过id来查询员工信息    Employee selectEmployeeById(Integer empId);    //修改员工信息    void updateEmployee(Employee employee);    //分页显示员工信息    PageInfo&lt;Employee&gt; getEmployeePage(Integer pageNum);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service@Transactionalpublic class EmployeeServiceImpl implements EmployeeService {    @Autowired    EmployeeMapper employeeMapper;    //查询所有员工信息    @Override    public List&lt;Employee&gt; getAllEmployee() {        return employeeMapper.getAllEmployee();    }    /**     * 添加员工     * @param employee     */    @Override    public void insertEmployee(Employee employee) {        employeeMapper.insertEmployee(employee);    }    /**     * 删除员工信息     * @param empId     */    @Override    public void deleteEmployee(Integer empId) {        employeeMapper.deleteEmployee(empId);    }    /**     * 通过id来查询员工信息     * @param empId     * @return     */    @Override    public Employee selectEmployeeById(Integer empId) {        return employeeMapper.selectEmployeeById(empId);    }    /**     * 修改员工信息     * @param employee     */    @Override    public void updateEmployee(Employee employee) {        employeeMapper.updateEmployee(employee);    }    /**     * 分页显示员工信息     * @param pageNum     * @return     */    @Override    public PageInfo&lt;Employee&gt; getEmployeePage(Integer pageNum) {        //开启分页功能        PageHelper.startPage(pageNum, 4);        //查询所有员工        List&lt;Employee&gt; list = employeeMapper.getAllEmployee();        //获取分页相关信息        PageInfo&lt;Employee&gt; page = new PageInfo&lt;&gt;(list,5);        return page;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9、实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Employee {    private Integer empId;    private String empName;    private Integer age;    private Integer sex;    private String email;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringMVC+Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/03/03/mysql/"/>
      <url>/2023/03/03/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h2 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h2><h3 id="数据定义语言（DDL）"><a href="#数据定义语言（DDL）" class="headerlink" title="数据定义语言（DDL）"></a>数据定义语言（DDL）</h3><p>create（创建）、alter（修改）、drop（删除）、rename（重命名）、truncate（清空）</p><p>以上语言操作对象是表</p><h3 id="数据操作语言（DML）"><a href="#数据操作语言（DML）" class="headerlink" title="数据操作语言（DML）"></a>数据操作语言（DML）</h3><p>insert into  、delete、update、select</p><h3 id="数据控制语言（DCL）"><a href="#数据控制语言（DCL）" class="headerlink" title="数据控制语言（DCL）"></a>数据控制语言（DCL）</h3><p>用来设置或者更改<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%A8%E6%88%B7/3637382">数据库用户</a>或角色权限的语句</p><p>commit（提交事务）、rollback（事务回滚）、savepoint、grant(赋予权限)、remove（回收权限）</p><p><strong>数据完整性约束</strong></p><p>​数据完整性约束指的是为了防止不符合规范的数据进入数据库，在用户对数据进行插入、修改、删除等操作时，DBMS自动按照一定的约束条件对数据进行监测，使不符合规范的数据不能进入数据库，以确保数据库中存储的数据正确、有效、相容。</p><h2 id="数据的完整性"><a href="#数据的完整性" class="headerlink" title="数据的完整性"></a>数据的完整性</h2><p>约束是用来确保数据的准确性和一致性。数据的完整性就是对数据的准确性和一致性的一种保证。</p><p>数据完整性(Data Integrity)是指数据的精确(Accuracy)和可靠性(Reliability)。</p><p>分为以下四类：</p><p><strong>1) 实体完整性</strong>：规定表的每一行在表中是唯一的实体。</p><p><strong>2) 域完整性：</strong>是指表中的列必须满足某种特定的数据类型约束，其中约束又包括取值范围、精度等规定。</p><p><strong>3) 参照完整性</strong>：是指两个表的<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%85%B3%E9%94%AE%E5%AD%97">主关键字</a>和<a href="https://baike.baidu.com/item/%E5%A4%96%E5%85%B3%E9%94%AE%E5%AD%97/1239625">外关键字</a>的数据应一致，保证了表之间的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。</p><p><strong>4) 用户定义的完整性</strong>：不同的<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F">关系数据库系统</a>根据其应用环境的不同，往往还需要一些特殊的约束条件。用户定义的完整性即是针对某个特定关系数据库的约束条件，它反映某一具体应用必须满足的语义要求。</p><h2 id="完整性约束的类型"><a href="#完整性约束的类型" class="headerlink" title="完整性约束的类型"></a>完整性约束的类型</h2><p>可分为三种类型：与表有关的约束、域(Domain)约束、断言(Assertion)</p><p>**1) 与表有关的约束:**是表中定义的一种约束。可在列定义时定义该约束，此时称为列约束，也可以在表定义时定义约束，此时称为表约束。</p><p><strong>2) 域(Domain)约束：</strong>在域定义中被定义的一种约束，它与在特定域中定义的任何列都有关系。</p><p><strong>3) 断言(Assertion)：</strong>在断言定义时定义的一种约束，它可以与一个或多个表进行关联。</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>与表有关的约束</p><p>包括列约束(表约束+NOT NULL)和表约束(PRIMARY KEY、foreign key、check、UNIQUE) 。</p><p><strong>(1) not null（非空)约束：</strong> 只用于定义列约束。</p><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">Colunm_name datatype | domain ``not` `null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-none"><code class="language-none">create` `table` `Employee``(``  ``emp_id ``int` `not` `null``,``  ``emp_name ``varchar``(10) ``not` `null``,``  ``address ``varchar``(40) ,``)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建之后，如果往表Employee表中非空约束中插入<a href="https://baike.baidu.com/item/%E7%A9%BA%E5%80%BC">空值</a>，insert into Employee values(1,null,’neimeng’)将会出错。如下：</p><pre class="line-numbers language-none"><code class="language-none">Msg 515, ``Level` `16, State 2, Line 1``Cannot ``insert` `the value ``NULL` `into` `column` `'emp_name'``, ``table` `'Student.dbo.Employee'``;``column` `does ``not` `allow nulls. ``INSERT` `fails.``The statement has been terminated.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>(2) unique(惟一)约束</strong>：用于指明创建惟一约束的列上的取值必须惟一。</p><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">Colunm_name datatype | domain ``unique<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-none"><code class="language-none">create` `table` `EmployeeInfo``(``emp_id ``int` `not` `null``,``emp_name ``varchar``(10) ``not` `null``,``phone ``char``(11) ``unique``,``address ``varchar``(40) ,``)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下往EmployeeInfo插入数据时，如果两条记录的phone不惟一，</p><pre class="line-numbers language-none"><code class="language-none">insert` `into` `EmployeeInfo ``values``(1,``'abcdwxc'``,``'neimeng'``,``'13612345678'``)``insert` `into` `EmployeeInfo ``values``(2,``'terry'``,``'neimeng'``,``'13612345678'``)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则会出现错误。如下：</p><pre class="line-numbers language-none"><code class="language-none">(1 row(s) affected)``Msg 2627, ``Level` `14, State 1, Line 2``Violation ``of` `UNIQUE` `KEY` `constraint` `'UQ__EmployeeInfo__060DEAE8'``. Cannot ``insert` `duplicate ``key` `in` `object ``'dbo.EmployeeInfo'``.``The statement has been terminated.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除了在定义列时添加unique约束外，也可以将unique约束作为表约束添加。即把它作为表定义的元素。</p><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">[``CONSTRAINT` `constraint_name] ``unique` `(column1,column2,.....)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-none"><code class="language-none">create` `table` `EmployeeInfo``(``emp_id ``int` `not` `null``,``emp_name ``varchar``(10) ``not` `null``,``phone ``char``(11)``address ``varchar``(40) ,``constraint` `p_uniq ``unique``(phone)``)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>(3) primary key(主键)约束：</strong>用于定义基本表的主键，起惟一标识作用，其值不能为null,也不能重复，以此来保证实体的完整性。</p><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">Colunm_name datatype | domain ``primary` `key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-none"><code class="language-none">drop` `table` `EmployeeInfo``create` `table` `EmployeeInfo``(``emp_id ``int` `primary` `key``,``emp_name ``varchar``(10) ``not` `null``,``phone ``char``(11),``address ``varchar``(40) ,``)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果向EmployeeInfo表插入的emp_id重复了或者插入时emp_id为null值，则会出错。</p><p>可以在创建表时，创建<a href="https://baike.baidu.com/item/%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F">主键约束</a>，也可创建表完成以后，创建主键，例如：</p><pre class="line-numbers language-none"><code class="language-none">alter` `table` `EmployeeInfo``add` `constraint` `e_prim ``primary` `key``(emp_id)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>primary key 与 unique的区别：</p><p>1.在一个表中，只能定义一个primary key约束，但可定义多个unique约束。</p><p>2.对于指定为primary key的一个列或多个列的组合，其中任何一个列都不能出现<a href="https://baike.baidu.com/item/%E7%A9%BA%E5%80%BC">空值</a>，而对于unique所约束的惟一键，则允许为null,只是null值最多有一个。</p><p><strong>(4) foreign key(<strong><strong><a href="https://baike.baidu.com/item/%E5%A4%96%E9%94%AE">外键</a></strong></strong>)约束</strong>：定义了一个表中数据与另一个表中的数据的联系。</p><p>foreign key约束指定某一个列或一组列作为外部键，其中包含外部键的表称为子表，包含外部键所引用的主键的表称为父表。系统保证，表在外部键上的取值要么是父表中某一主键，要么取空值，以此保证两个表之间的连接，确保了实体的参照完整性。</p><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">Colunm_name datetype | domain ``references` `table_name(``column``)``[match ``full``|``partial``|simple] //注：sqlserver不支持。``[referential triggered ``action``]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：table_name为父表的表名，column为父表中与<a href="https://baike.baidu.com/item/%E5%A4%96%E9%94%AE">外键</a>对应的主键值。</p><p>[match full|partial|simple]为可选子句，用于设置如何处理外键中的null值。</p><p>[referential triggered action]也为可选子句，用于设置更新、删除外键列时的操作准则。</p><p>可以为表的一列或多列创建foreign key 约束，如果为多列创建 foreign key约束，将分别与主表中的相应主键相对应。</p><p>实例：</p><pre class="line-numbers language-none"><code class="language-none">create` `table` `EmployeeInfo``(``emp_id ``int` `primary` `key``,``emp_name ``varchar``(10) ``not` `null``,``account ``char``(4) ``primary` `key``,``phone ``char``(11)``address ``varchar``(40) ,``)``create` `table` `Emp_Sal``(``emp_id ``int` `, account ``CHAR``(4) ,salary ``DECIMAL``(5,1),``CONSTRAINT` `E_SAL ``FOREIGN` `KEY``(emp_id,account) ``REFERENCES` `EmployeeInfo (emp_id,account))``)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以表创建以后添加到表上。如下：</p><pre class="line-numbers language-none"><code class="language-none">create` `table` `Emp_Sal``(``emp_id ``int` `,emp_name ``varchar``(10) ``not` `null``, account ``CHAR``(4) ,salary ``DECIMAL``(5,1),``)``alter` `table` `Emp_Sal``add` `CONSTRAINT` `E_SAL ``FOREIGN` `KEY``(emp_id,account) ``REFERENCES` `EmployeeInfo (emp_id,account)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该<a href="https://baike.baidu.com/item/%E5%A4%96%E9%94%AE">外键</a>的作用：确保表Emp_Sal的每个emp_id列都对应表EmployeeInfo中相应的emp_id。此时，表EmployeeInfo为父表，而表Emp_Sal为子表。子表的emp_id列参照父表的emp_id列。</p><p>如果想在子表的emp_id列插入一个值，首先父表的emp_id列必须存在，否则会插入失败。如果想从父表的emp_id删除一个值，则必须无删除子表emp_id列中所有与之对应的值。</p><p>(注:foreign key 列上的取值可以取null)。</p><p><strong>潜在问题</strong>：由于foreign key列上可以取空值,DBMS将跳过对foreign key约束的检查，因此如果插入Emp_Sal如下数据：</p><p>insert into Emp_Sal values(6,null,null) 则插入到Emp_Sal中，但其主表的相关列却不存在。</p><p><strong>解决办法：</strong></p><p>（1）将联合<a href="https://baike.baidu.com/item/%E5%A4%96%E9%94%AE">外键</a>的列添加not null约束，但这限制了用户的部分操作。</p><p>（2）采用Match子句。(sqlserver不支持).</p><p><strong>更新、删除操作规则：</strong></p><p>在删除或更新有primary key值的行，且该值与子表的foreign key中一个或多个值相匹配时，会引起匹配完整性的丧失。</p><p>在foreign key创建语法中，提供了可选的on update和on delete子句，也就是上面的[referential triggered action]。可用此保持引用完整性。</p><p>on update / on delete</p><p>no action|cascade|restrict|set null|set default</p><p>no action:更新或删除父表中的数据时，如果会使子表中的<a href="https://baike.baidu.com/item/%E5%A4%96%E9%94%AE">外键</a>违反引用完整性，该动作将被禁止执行。不过在某些条件下，可出现暂时的，但在数据的最终状态中，不能违反外键的引用完整性。</p><p>cascade: 当父表中被引用列的数据被更新或删除时，子表中的相应的数据也被更新或删除。</p><p>restrict:与no action规则基本相同，只是引用列中的数据永远不能违反外键的引用完整性，暂时的也不行。</p><p>set null:当父表数据被更新或删除时，子表中的相应数据被设置成Null值，前提是子表中的相应列允许null值。</p><p>set default:当父表数据被更新或删除时,子表中的数据被设置成默认值。前提是子表中的相应列设置有默认值。</p><p><strong>(5) check（校验）约束：</strong>用来检查字段值所允许的范围。DBMS每当执行delete,insert或update语句时，都对这个约束过滤。如果为true，则执行。否则，取消执行并提示错误。</p><p>列定义语法如下：</p><pre class="line-numbers language-none"><code class="language-none">Column` `datetype | domain ``check``(search condition)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表约束语法如下：</p><pre class="line-numbers language-none"><code class="language-none">constraint` `constraint_name ``check``(search condition)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例如下：</p><pre class="line-numbers language-none"><code class="language-none">create` `table` `Emp_Sal``(``emp_id ``int` `, account ``CHAR``(4) ,salary ``DECIMAL``(5,1),``constraint` `validsal ``check``(salary &gt;=1000 ``and` `salary&lt;=10000)``)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果此时，再往表中插入如下语句则会出错：(因为不满足salary大于等于1000的约束。)</p><p>insert into Emp_Sal values(8,’12324343’,800.0)</p><h2 id="域约束"><a href="#域约束" class="headerlink" title="域约束"></a>域约束</h2><p>*<strong>sqlserver不支持*</strong></p><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">create` `domain domain_name ``as` `data type``[``default` `default_value]``[``constraint` `constraint_name] ``check``(value condition expression)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">create` `domain valid_no ``as` `int``constraint` `constraint_no ``check``(value ``between` `100 ``and` `999)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后创建表时，使用valid_no域。</p><pre class="line-numbers language-none"><code class="language-none">create` `table` `TestDomain``(``emp_id valid_no,``emp_name ``varchar``(10),``)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>三、</strong></p><h2 id="断言约束"><a href="#断言约束" class="headerlink" title="断言约束"></a>断言约束</h2><p>不必与特定的列绑定，可以理解为能应用于多个表的<a href="https://baike.baidu.com/item/check%E7%BA%A6%E6%9D%9F">check约束</a>，因此必须在表定义之外独立创建断言。</p><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">create` `assertion constraint_name``check` `search condition<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">create` `assertion ``name``check` `(Emp_Sal.emp_id ``in``(``select` `emp_id ``from` `EmployeeInfo ``where` `emp_name ``is` `not` `null``)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加断言后，每当试图添加或修改Emp_Sal表中的数据时，就对断言中的搜索条件求值，如果为false，则取消执行，给出提示</p><p>cmd:启动数据库：</p><p>1、net start mysql  启动数据库</p><p>2、mysql -h localhost -u root -p  进入数据库</p><p>3、net stop mysql  关闭数据库</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a><strong>1.</strong> <strong>算术运算符</strong></h3><p>算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加</p><p>（+）、减（-）、乘（*）、除（/）和取模（%）运算。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220711181051253.png" alt="image-20220711181051253"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">#在SQL中，+号没有连接的作用，就表示加法运算。此时，会将字符串转换为数值（隐式转换)select 100+'1' from dual; #在Java语言中，结果是:1001。而在sql中为101#伪表： dualselect 100 + 'a' from dual;  #将不是数字的字符串看作0来处理，因此结果为100#整数与整数相加减，结果还是整数select 100 + 5,125 - 6 from dual#整数与浮点数相加减，结果是浮点数select 100 + 5.8,125 - 6.6 from dual#null参与运算结果都为null，在sql中null也会占用空间大小select 100 + null from dual;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：</p><p>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</p><p>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</p><p>加法和减法的优先级相同，进行先加后减操作与进行先减后加操作的结果是一样的；</p><p>在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数</p><p>值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL</p><p>中字符串拼接要使用字符串函数CONCAT()实现）</p><h3 id="2．乘法与除法运算符"><a href="#2．乘法与除法运算符" class="headerlink" title="2．乘法与除法运算符"></a><strong>2</strong>．乘法与除法运算符</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">#在除法运算(/ 或div )和取模运算(% 或 mod)中分母为0，则结果为nullselect 4 / 0,20 % 0 , 10 div 0 from dual;#在取模运算(% 或 mod)中,结果的取值与分子的符号一致select 4 mod -5,-21 % 5 , -10 % -3 from dual;select 4 * 5,-21 * 5 , -10 * -3 from dual;select 4 * 5.0,-21 * 5.0 , -10 * -3.0 from dual;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：</p><p>一个数乘以整数1和除以整数1后仍得原数；</p><p>一个数乘以浮点数1和除以浮点数1后变成浮点数，数值与原数相等；</p><p>一个数除以整数后，不管是否能除尽，结果都为一个浮点数；</p><p>一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后4位；</p><p>乘法和除法的优先级相同，进行先乘后除操作与先除后乘操作，得出的结果相同。</p><p>在数学运算中，0不能用作除数，在MySQL中，一个数除以0为NULL。 </p><h3 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3. 比较运算符"></a><strong>3.</strong> <strong>比较运算符</strong></h3><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果</p><p>为假则返回0，其他情况则返回NULL。</p><p>比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220711182248078.png" alt="image-20220711182248078"></p><h3 id="4．不等于运算符"><a href="#4．不等于运算符" class="headerlink" title="4．不等于运算符"></a>4．不等于运算符</h3><p>不等于运算符（&lt;&gt;和!=）用于判断两边的数字、字符串或者表达式的值是否不相等，</p><p>如果不相等则返回1，相等则返回0。不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL，</p><p>或两边都为NULL，则结果为NULL。 SQL语句示例如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql&gt; SELECT 1 &lt;&gt; 1, 1 != 2, 'a' != 'b', (3+4) &lt;&gt; (2+6), 'a' != NULL, NULL &lt;&gt; NULL; +--------+--------+------------+----------------+-------------+--------------+| 1 &lt;&gt; 1 | 1 != 2 | 'a' != 'b' | (3+4) &lt;&gt; (2+6) | 'a' != NULL | NULL &lt;&gt; NULL | +--------+--------+------------+----------------+-------------+--------------+| 0 | 1 | 1 | 1 | NULL | NULL | +--------+--------+------------+----------------+-------------+--------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:\java笔记\笔记\MySQL.assets\image-20220711182838837.png" alt="image-20220711182838837"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220711182858924.png" alt="image-20220711182858924"></p><h2 id="1、数据库分类关系型数据库-SQL"><a href="#1、数据库分类关系型数据库-SQL" class="headerlink" title="1、数据库分类关系型数据库:(SQL)"></a>1、数据库分类关系型数据库:(SQL)</h2><p>​</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1.MySQL,Oracle，Sql Server，DB2, SQLlite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​ 2.通过表和表之间，行和列之间的关系进行数据的存储，学员信息表，考勤表，…..</p><p>非关系型数据库:(NoSQL)  Not Only</p><pre><code> 1.Redis，MongDB</code></pre><h2 id="2-非关系型数据库，对象存储，通过对象的自身的属性来决定。"><a href="#2-非关系型数据库，对象存储，通过对象的自身的属性来决定。" class="headerlink" title="2.非关系型数据库，对象存储，通过对象的自身的属性来决定。"></a>2.非关系型数据库，对象存储，通过对象的自身的属性来决定。</h2><p>DBMS(数据库管理系统)：</p><p>1.数据库的管理软件，科学有效的管理我们的数据。维护和获取数据</p><p>2.MySQL</p><h3 id="2-1、操作数据库（了解"><a href="#2-1、操作数据库（了解" class="headerlink" title="2.1、操作数据库（了解)"></a>2.1、操作数据库（了解)</h3><blockquote><p>注意：DATABASE 不能改名。一些可视化工具可以改名，它是建新库，把所有表复制到新库，再删</p><p>旧库完成的。</p></blockquote><p>1、创建数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE DATABASE 数据库名;或CREATE DATABASE [IF NOT EXISTS] 表名;或CREATE DATABASE 数据库名 CHARACTER SET 字符集;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、删除数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP DATABASE [IF EXISTS] 表名；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、使用数据库</p><p>– tab键的上面,如果你的表名或者字段名是一个特殊字符，就需要带</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">``<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、查看数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW DATABASES --查看所有的数据库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2、数据库的列类型"><a href="#2-2、数据库的列类型" class="headerlink" title="2.2、数据库的列类型"></a>2.2、数据库的列类型</h3><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><ul><li><p>Tinyint   十分小的数据   1个字节</p></li><li><p>Smallint   较小的数据   2个字节</p></li><li><p>mediumint  中等大小的数据  3个字节</p></li><li><p>Int     标准的整数   4个字节常用的int</p></li><li><p>Bigint    较大的数据    8个字节</p></li><li><p>Float    浮点数      4个字节</p></li><li><p>Double   浮点数      8个字节―(精度问题!)</p></li><li><p>Decimal   字符串形式的浮点数金融计算的时候，一般是使用decimal</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><p>Char   字符串固定大小的   0~255</p></li><li><p>Varchar  可变字符串      0~65535    常用的变量String</p></li><li><p>Tinytext  微型文本       28- 1</p></li><li><p>Text    文本串        216-1      保存大文本</p></li></ul><h4 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h4><ul><li><p>date     YYYY-MM-DD  日期格式</p></li><li><p>time     HH: mm: ss   时间格式</p></li><li><p>datetime   YYYY-MM-DD HH: mm: ss   最常用的时间格式</p></li><li><p>Timestamp  时间戳，1970.1.1   到现在的毫秒数!  也较为常用</p></li><li><p>year     年份表示</p></li></ul><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><ul><li><p>没有值，未知</p></li><li><p>注意，不要使用NULL进行运算，结果为NULL</p></li></ul><h3 id="2-3、数据库的字段属性-重点"><a href="#2-3、数据库的字段属性-重点" class="headerlink" title="2.3、数据库的字段属性(重点)"></a>2.3、数据库的字段属性(重点)</h3><p>Unsigned :</p><ul><li><p>无符号的整数</p></li><li><p>声明了该列不能声明为负数</p></li></ul><p>zerofill :</p><ul><li><p>0填充的</p></li><li><p>不足的位数，使用0来填充，int (3) , 5 — 005</p></li></ul><p>自增:</p><ul><li><p>通常理解为自增，自动在上一条记录的基础上＋1(默认)</p></li><li><p>通常用来设计唯一的主键~index，必须是整数类型</p></li><li><p>可以自定义设计主键自增的起始值和步长</p></li></ul><p>非空NUll not null：</p><ul><li><p>假设设置为not null ，如果不给它赋值，就会报错!</p></li><li><p>NUl，如果不填写值，默认就是null!</p></li></ul><p>默认:</p><ul><li><p>设置默认的值!</p></li><li><p>sex，默认值为男，如果不指定该列的值，则会有默认的值!</p></li></ul><p>创建数据库表</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE [IF NOT EXISTS]`表名`('字段名' 列类型 [属性] [索引] [注释]，'字段名' 列类型 [属性] [索引] [注释]，'字段名' 列类型 [属性] [索引] [注释])[表类型] [字符集设置] [注释]-- 注意：所有字符都用英文状态下的！！！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MYISAM 与InnoDB的区别</p><table><thead><tr><th></th><th>MYISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约为2倍</td></tr></tbody></table><p>常规使用操作：</p><ul><li><p>MYISAM节约空间，速度较快</p></li><li><p>INNODB安全性高，事务的处理，多表多用户操作</p></li></ul><p>在物理空间存在的位置</p><p>所有的数据库文件都存在data目录下，一个文件夹就对应一个数据库本质还是文件的存储!</p><p>MySQL引擎在物理文件上的区别</p><ul><li><p>InnoDB在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</p></li><li><p>MYISAM对应文件</p></li><li><p>frm表结构的定义文件</p></li><li><p>MYD数据文件(data)</p></li><li><p>MYI索引文件(index)</p></li></ul><p>设置数据库表的字符集编码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不设置的话，会是mysql默认的字符集编码~(不支持中文! )MySQL的默认编码是Latin1，不支持中文</p><p>在my.ini中配置默认的编码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">character-set-server=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（在my.ini文件中添加此代码  但不提倡此做法）</p><p>修改</p><p>修改表名：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ALTER TABLE 旧表名 RENAME AS 新表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE teacher RENAME As teacher1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加表的字段:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ALTER TABLE 表名 ADD 字段名 列属性<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE teacher1 ADD age INT(11)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改表的字段(重命名,修改约束!)</p><p>ALTER TABLE表名MODIFY字段名 列属性[]</p><p>例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE teacher1 MODIFY age VARCHAR(11) --修改约束<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ALTER TABLE表名CHANGE旧名字 新名字 列属性[]</p><p>例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE teacher1 CHANGE age age1 INT(1) --字段重名名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除表的字段:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ALTER TABLE 表名 DROP 字段名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE teacher1 DROP age1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除</p><p>删除表（如果表存在再删除）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP TABLE IF EXISTS teacher1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所有的创建和删除操作尽量加上判断，以免报错~</p><p>注意点:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">·``字段名，使用这个包裹!·注释--/**/·sql关键字大小写不敏感，建议大家写小写·所有的符号全部用英文! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-1、DML语言（全部记住"><a href="#3-1、DML语言（全部记住" class="headerlink" title="3.1、DML语言（全部记住)"></a>3.1、DML语言（全部记住)</h2><p>数据库意义: 数据存储，数据管理</p><p>DML语言:数据操作语言</p><ul><li><p>insert</p></li><li><p>update</p></li><li><p>delete</p></li></ul><h2 id="3-2、添加"><a href="#3-2、添加" class="headerlink" title="3.2、添加"></a>3.2、添加</h2><p>语法: </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">insert into 表名([字段名1,字段2,字段3]) values('值1'),('值2'),('值3'),....)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert  into  `meeage`(`id`,`name`,`sex`,`adress`,`grade`)values(2,'张三','男','北京','大三')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO `meeage` VALUES(3,'王五','男','北京','大三')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意事项:</p><ol><li><p>字段和字段之间使用英文逗号隔开</p></li><li><p>字段是可以省略的，但是后面的值必须要要一一对应，不能少</p></li><li><p>可以同时插入多条数据，VALUES后面的值，需要使用，隔开即可 例：</p></li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO `meeage` VALUES(4,'小二','男','北京','大三'),(5,'李四','男','上海','大一')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-3、修改"><a href="#3-3、修改" class="headerlink" title="3.3、修改"></a>3.3、修改</h2><p> 语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">UPDATE 表名 set colnum_name = value,[colnum name = value,... .] where [条件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">update 修改谁 （条件）set 原来的值 = 新值-- 修改学员的名字UPDATE `meeage` SET `name`= 'hello' WHERE id = 1;-- 不指定条件的情况下，会修改所有的表UPDATE `meeage` SET `name`= 'hello' ;-- 语法：-- UPDATE 表名 SET clonum_name= name where [条件] ;--修改多个属性，用逗号隔开UPDATE `meeage` SET `name`= 'hello' ,`grade` = '大四';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意： 不指定条件的情况下，会修改所有的表！！！</p><p> 条件： where  句子  运算符  id 等于某个值，大于某个值，在某个区间内修应该……….</p><table><thead><tr><th>操作符</th><th>含义</th><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>5=6</td><td>false</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td><td>3&lt;&gt;4 或 3!=4</td><td>true</td></tr><tr><td>between…and…</td><td>闭合区间包括边界</td><td>between 3 and 4</td><td>包括边界值</td></tr><tr><td>or 或 ||</td><td>或</td><td>5&lt;1    or  4&gt;3</td><td>true</td></tr><tr><td>&gt;</td><td>大于</td><td>5&gt;3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>5&gt;=5</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4&lt;=6</td><td>true</td></tr><tr><td>and 或 &amp;&amp;</td><td>与</td><td>5&gt;1 and 4&gt;3</td><td>true</td></tr></tbody></table><p> 注意：</p><pre><code>colnum_name是数据库的列，尽量带上``​条件，筛选的条件，如果没有指定，则会修改所有的列​value，是一个具体的值，也可以是一个变量​多个设置的属性之间，使用英文逗号隔开</code></pre><p>​</p><h2 id="3-4、删除-drop、truncate、delete"><a href="#3-4、删除-drop、truncate、delete" class="headerlink" title="3.4、删除(drop、truncate、delete)"></a>3.4、删除(drop、truncate、delete)</h2><p>mysql：删除表数据drop、truncate和delete的用法</p><p>程度从强到弱</p><p>1、drop  table tb </p><p>   drop将表格直接删除，没有办法找回</p><p>2、truncate (table) tb</p><p>   删除表中的所有数据，不能与where一起使用</p><p>3、delete from tb (where)</p><p>   删除表中的数据(可制定某一行)</p><p>区别：truncate和delete的区别</p><p>​     1、事务：truncate是不可以rollback的，但是delete是可以rollback的；</p><p>​       原因：truncate删除整表数据(ddl语句,隐式提交)，delete是一行一行的删除，可以rollback</p><p>​     2、效果：<strong>truncate删除后将重新水平线和索引(id从零开始) ,delete不会删除索引</strong>   </p><p>​     3、 truncate 不能触发任何Delete触发器。</p><p>​     4、delete 删除可以返回行数</p><pre><code> delete命令</code></pre><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">delete from 表名 [where 条件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 删除数据（避免这样写，因为这样会删除掉所有的数据）delete from `student`--删除指定数据delete from `student` where id = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">truncate 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作用：完全清空一个数据库表，表的结构和索引约束不会变！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 清空student 表truncat `student`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> delete 与 truncat的区别</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1、delete from `student` 不会影响自增2、truncat table `student` 自增会归零<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> delete删除的问题</p><p>​重启数据库，现象：</p><p>​lnnoDB     自增列会重1开始(存在内存当中的，断电即失)</p><p>​        MylSAM     继续从上一个自增量开始(存在文件中的，不会丢失)</p><h2 id="4、DQL查询数据（最重点）"><a href="#4、DQL查询数据（最重点）" class="headerlink" title="4、DQL查询数据（最重点）"></a>4、DQL查询数据（最重点）</h2><h3 id="4-1、DQL-Data-Query-LANGUAGE-数据查询语言"><a href="#4-1、DQL-Data-Query-LANGUAGE-数据查询语言" class="headerlink" title="4.1、DQL(Data Query LANGUAGE) 数据查询语言"></a>4.1、DQL(Data Query LANGUAGE) 数据查询语言</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1、所有的查询操作都用它Select2、简单的查询，复杂的查询它都能做~3、数据库中最核心的语言，最重要的语句4、使用频率最高的语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、指定查询字段"><a href="#4-2、指定查询字段" class="headerlink" title="4.2、指定查询字段"></a>4.2、指定查询字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 查询全部的学生 SELECT 字段 FROM 表SELECT *FROM student-- 查询指定字段SELECT `studentNo` , `studentName` FROM student-- 别名，给结果起一个名字 AS 可以给字段起别名，也可以给表起别名SELECT `studentNo` AS 学号,`studentName` AS 学生姓名 FROM student AS s--函数concat (a，b)SELECT CONCAT('姓名: ',studentName)AS 新名字 FROM student <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select 字段 ,....... from 表;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="4-3、模糊查询：比较运算符"><a href="#4-3、模糊查询：比较运算符" class="headerlink" title="4.3、模糊查询：比较运算符"></a>4.3、模糊查询：比较运算符</h3><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>is　null</td><td>ａ　is　null</td><td>如果操作符为null，结果为真</td></tr><tr><td>is　ｎｏｔ　null</td><td>ａ　is　ｎｏｔ　null</td><td>如果操作符不为null，结果为真</td></tr><tr><td>between</td><td>ａ　between　ｂ　ａｎｄ　ｃ</td><td>若ａ在ｂ和ｃ之间，则结果为真</td></tr><tr><td>like</td><td>ａ　like　ｂ</td><td>sql匹配，如果ａ匹配ｂ，则结果为真</td></tr><tr><td>in</td><td>ａ　in（ａ１，ａ２，ａ３，．．．．）</td><td>假设ａ在ａ１，ａ２，ａ３．．．．其中的某一个值中，结果为真</td></tr></tbody></table><p> like（可以判断字符型或数值型）</p><p>​一般与通配符搭用</p><p>​通配符：% 匹配任意多个字符，包含0个字符</p><p>​ _ 匹配任意单个字符</p><p>例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- like 与%通配符使用  ---SELECT * FROM employees WHERE last_name LIKE '%a%';-- like与_使用  --SELECT * FROM employees WHERE last_name LIKE '__a_t';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>between ….and……</p><p>1、使用between and可以提高语句的简洁度</p><p>2、<strong>包含临界值</strong></p><p>3、两个临界值不要调换顺序 </p><p> 例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT last_name,salary, commission_pct FROM employees WHERE salary BETWEEN 10000 AND 20000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>In </p><p>含义:判断某字段的值是否属于in列表中的某一项特点:</p><p>1、使用in提高语句简洁度</p><p>2、in列表的值类型必须—致或兼容</p><p>3、in列表不支持通配符</p><p> 例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT * FROM employees WHERE last_name IN('K_ing','Popp','Khoo');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Is null 或 is not null（用于判断null值）</p><p>=或&lt;&gt;不能用于判断null值</p><p>is null或is not null可以判断null值</p><p>Is null:仅仅可以判断NULL值,可读性较高,建议使用 </p><p>例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT last_name,commission_pct FROM employees WHERE commission_pct IS  NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&lt;=&gt;（安全等于）:既可以判断NULL值，又可以判断普通的数值，可读性较低 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT last_name,salary FROM employees WHERE salary &lt;=&gt;12000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-4、联表查询"><a href="#4-4、联表查询" class="headerlink" title="4.4、联表查询"></a>4.4、联表查询</h3><p>​连接用于连接多个表，使用 JOIN 关键字，并且==条件语句使用 ON 而不是 WHERE==。</p><p>连接可以替换子查询，并且比子查询的效率一般会更快。</p><p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p><p><code>join(连接的表) on(判断的条件)</code>  连接查询</p><p><code>where </code>  等值查询</p><table><thead><tr><th>操作</th><th>结果</th><th>名称</th></tr></thead><tbody><tr><td>inner join</td><td>从表中至少有一个匹配，就返回行</td><td>内连接</td></tr><tr><td>left join</td><td>会从左表中返回所有的值，即使右表中没有匹配</td><td>外连接</td></tr><tr><td>right join</td><td>会从右表中返回所有的值，即使左表中没有匹配</td><td>外连接</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">inner join：2表值都存在outer join：附表中值可能存在null的情况。总结：①A inner join B：取交集②A left join B：取A全部，B没有对应的值，则为null③A right join B：取B全部，A没有对应的值，则为null④A full outer join B：取并集，彼此没有对应的值为null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- inner join------select s.studentNo,studentName,SubjectNo,StudentResultfrom student as s inner join result as ron s.studentNo = r.studentNo-- right join-----select s.studentNo,studentName,SubjectNo,StudentResultfrom student s right join result ron s.studentNo = r.studentNo-- left join-----select s.studentNo,studentName,SubjectNo,StudentResultfrom student as s left join result as ron s.studentNo = r.studentNo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自连接</p><p>将同一张表分为两张</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE IF NOT EXISTS category(    `categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',    `pid` INT(10) NOT NULL COMMENT '父id',    `categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',    PRIMARY KEY(`categoryid`))ENGINE=INNODB DEFAULT CHARSET=utf8;-- 插入数据INSERT INTO `category` (`categoryid`,`pid`,`categoryName`)VALUES ('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM `category` AS a,`category` AS bWHERE a.categoryid = b.pid;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 核心:一张表拆成两张一样的表</p><p>父类</p><table><thead><tr><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>2</td><td>信息技术</td></tr><tr><td>3</td><td>软件开发</td></tr><tr><td>5</td><td>美术设计</td></tr></tbody></table><p>子类</p><table><thead><tr><th align="left">pip</th><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td align="left">3</td><td>4</td><td>数据库</td></tr><tr><td align="left">2</td><td>8</td><td>办公信息</td></tr><tr><td align="left">3</td><td>6</td><td>web开发</td></tr><tr><td align="left">5</td><td>7</td><td>ps设计</td></tr></tbody></table><p>操作：查询父类对应的子类关系</p><table><thead><tr><th>父类</th><th>子类</th></tr></thead><tbody><tr><td>信息技术</td><td>办公信息</td></tr><tr><td>软件开发</td><td>数据库</td></tr><tr><td>软件开发</td><td>web开发</td></tr><tr><td>美术设计</td><td>ps技术</td></tr></tbody></table><h3 id="4-5、分页和排序-limit-和-order-by"><a href="#4-5、分页和排序-limit-和-order-by" class="headerlink" title="4.5、分页和排序(limit 和 order by)"></a>4.5、分页和排序(limit 和 order by)</h3><h4 id="排序：升序-ASC，降序DESC"><a href="#排序：升序-ASC，降序DESC" class="headerlink" title="排序：升序 ASC，降序DESC"></a>排序：升序 ASC，降序DESC</h4><p>order by 通过哪个字段排序</p><p> <strong>分页查询公式：</strong>需求：每页显示pageSize条记录，此时显示第pageNum页<br>                            公式：limit （pageNum - 1）*pageSize,pageSize</p><p>排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT     sNo,score FROM score-- order by score asc;ORDER BY score DESC;-- 联合select使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 分页 <code>limit 起始页 每页数量</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">语法：limit（查询起始下标，pageSize）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么分页？ ——-瀑布流（可以去了解一下）</p><p>缓解数据库压力，具有跟好的阅读体验</p><p>第N页的页面大小公式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">(n-1)*pageSize ,pageSize为页面的大小<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT * FROM studentLIMIT 0,5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> select语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select [all | distinct]{* |table.*|[table.field1[as alias1][,table.field2[as alias2]][,......]]}from table_name [as table_alias][left | right |inner join table_name2]  -- 联表查询[where .....]   -- 指定结果满足条件[group by .....]   -- 指定结果按照哪几个字段来分组[having]   -- 过滤分组的记录必须满足的次要条件[order by ....]   -- 指定查询记录按一个或多个条件排序[limit {[offset,]row_count |row_countOFFSET offset}];   -- 指定查询的纪录从哪条至哪条当 limit和offset组合使用的时候，limit后面只能有一个参数，表示要取的的数量,offset表示要跳过的数量 。例如select * from article LIMIT 3 OFFSET 1 表示跳过1条数据,从第2条数据开始取，取3条数据，也就是取2,3,4三条数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 注意：[ ]括号代表可选的，{ }括号代表必选的</p><h3 id="4-6、分组（GROUP-BY-）"><a href="#4-6、分组（GROUP-BY-）" class="headerlink" title="4.6、分组（GROUP BY ）"></a>4.6、分组（GROUP BY ）</h3><p>分组规定：</p><ul><li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li><li>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；</li><li>NULL 的行会单独分为一组；</li><li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li></ul><p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT col, COUNT(*) AS numFROM mytableGROUP BY col;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT col, COUNT(*) AS numFROM mytableGROUP BY colORDER BY num;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT col, COUNT(*) AS numFROM mytableWHERE col &gt; 2GROUP BY colHAVING num &gt;= 2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7、子查询"><a href="#4-7、子查询" class="headerlink" title="4.7、子查询"></a>4.7、子查询</h3><h4 id="4-7-1、单行比较操作符"><a href="#4-7-1、单行比较操作符" class="headerlink" title="4.7.1、单行比较操作符"></a>4.7.1、<strong>单行比较操作符</strong></h4><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于 等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr></tbody></table><p>相关代码演示</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">#查询工资大于149号员工工资的员工的信息select last_name,salary from employees where salary &gt; (select salary from employees where employee_id = 149)#返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资select last_name,job_id,salary from employees where job_id = (select job_id from employees where employee_id = 141) and salary &gt;(select salary from employees where employee_id = 143);#返回公司工资最少的员工的last_name,job_id和salaryselect last_name,job_id,salary from employees where salary =(select min(salary) from employees); #查询最低工资大于50号部门最低工资的部门id和其最低工资select department_id,min(salary) from employees where department_id is not null group by department_id having min(salary) &gt; (select min(salary) from employees where department_id = 50);-- case中的子查询#显示员工的employee_id,last_name和location。其中，若员工department_id与location_id为1800 的department_id相同，则location为’Canada’，其余则为’USA’。select employee_id,last_name,(case department_id when (select department_id from departments where location_id = 1800)then 'Canada'else 'USA'end) location from employees-- 子查询中的空值问题select last_name,job_id from employees where job_id = (select job_id from employees where last_name = 'Haas')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-2、多行子查询"><a href="#4-7-2、多行子查询" class="headerlink" title="4.7.2、多行子查询"></a>4.7.2、<strong>多行子查询</strong></h4><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的**==任意一个==**</td></tr><tr><td>ANY</td><td>需要和单行比较操作符一起使用，和子查询返回的**==某一个==**值比较</td></tr><tr><td>ALL</td><td>需要和单行比较操作符一起使用，和子查询返回的**==所有==**值比较</td></tr><tr><td>SOME</td><td>实际上是ANY的别名，作用相同，一般常使用ANY</td></tr></tbody></table><p>相关代码演示</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">#查询与141号或174号员工的manager_id和department_id相同的其他员工的employee_id， manager_id，department_idselect employee_id,manager_id,department_id from employees where (manager_id,department_id) in (select manager_id,department_id from employees where employee_id =141 or employee_id = 174)-- 多行子查询#题目:查询平均工资最低的部门id#MySQL中聚合函数是不能嵌套使用的。#方式一select department_id from employees group by department_id having avg(salary)=(select min(avg_sal) from (select avg(salary) avg_sal from employees where department_id is not null group by department_id) t_dept_avg);#方式二select department_id from employees group by department_id having avg(salary) &lt;= all (select avg(salary) avg_sal from employees where department_id is not null group by department_id); #多行子查询空值问题select last_name from employees where employee_id not in (select manager_id from employees where manager_id is not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-3、相关子查询（关联子查询）"><a href="#4-7-3、相关子查询（关联子查询）" class="headerlink" title="4.7.3、相关子查询（关联子查询）"></a>4.7.3、相关子查询（关联子查询）</h4><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件</p><p>关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为==关联子查询== 。</p><p>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220714153034120.png" alt="image-20220714153034120"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220714153227404.png" alt="image-20220714153227404"></p><p>相关代码演示</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 相关子查询#题目:查询员工中工资大于公司平均工资的员工的last_name , salary和其department_idselect last_name,salary,department_id from employees where salary &gt; (select avg(salary) from employees)#题目:查询员工中工资大于本部门平均工资的员工的last_name , salary和其department_id#方式一select last_name,salary,department_id from employees e1 where salary &gt; (select avg(salary) from employees  e2 where e1.department_id = e2.department_id)#方式二：在from中声明子查询select e1.last_name,e1.salary,e1.department_id from employees e1,(select department_id,avg(salary) avg_sal from employees group by department_id) t_dept_avg_sal where e1.department_id = t_dept_avg_sal.department_id and e1.salary &gt; t_dept_avg_sal.avg_sal;#题目:查询员工的id,salary,按照department_name排序select e.employee_id,e.salaryfrom employees e order by(select department_name from departments d where e.department_id =d.department_id)asc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论：</strong>在以下关键字后可以声明相关子查询</p><ul><li>SELECT …., …. ,….(存在聚合函数)</li><li>FROM …(LEFT/ RIGHT) JOIN ….ON  多表的连接条件(工EFT/RIGHT)  JOIN … ON ….</li><li>WHERE不包含聚合函数的过滤条件</li><li>HAVING包含聚合函数的过滤条件</li><li>ORDER BY …. , … (ASC / DESC )</li></ul><h4 id="4-7-4、EXISTS-与-NOT-EXISTS关键字"><a href="#4-7-4、EXISTS-与-NOT-EXISTS关键字" class="headerlink" title="4.7.4、EXISTS 与 NOT EXISTS关键字"></a>4.7.4、<strong>EXISTS</strong> <strong>与</strong> <strong>NOT EXISTS</strong>关键字</h4><ul><li><p>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</p></li><li><p>==<strong>如果在子查询中不存在满足条件的行：</strong>==</p><ul><li>条件返回 FALSE</li><li>继续在子查询中查找</li></ul></li><li><p><strong>==如果在子查询中存在满足条件的行：==</strong></p><ul><li>不在子查询中继续查找</li><li>条件返回 TRUE</li></ul></li><li><p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE</p></li></ul><p>相关代码演示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">#查询公司管理者的employee_id，last_name，job_id，department_id信息#方式一：自连接select distinct e2.employee_id,e2.last_name,e2.job_id,e2.department_id from employees e1 join employees e2 on e1.manager_id = e2.employee_id#方式二：子查询select employee_id,last_name,job_id,department_id from employees where employee_id in (select distinct manager_id from employees);#方式三：使用exists关键字select employee_id,last_name,job_id,department_id from employees e1 where exists (select * from employees e2 where e1.employee_id = e2.manager_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子查询中只能返回一个字段的数据。</p><p>可以将子查询的结果作为 WHRER 语句的过滤条件：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT *FROM mytable1WHERE col1 IN (SELECT col2               FROM mytable2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT cust_name, (SELECT COUNT(*)                   FROM Orders                   WHERE Orders.cust_id = Customers.cust_id)                   AS orders_numFROM CustomersORDER BY cust_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、MySQL的函数"><a href="#5、MySQL的函数" class="headerlink" title="5、MySQL的函数"></a>5、MySQL的函数</h2><h3 id="5-1常用函数"><a href="#5-1常用函数" class="headerlink" title="5.1常用函数"></a>5.1常用函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 数学运算select abs(-8) -- 绝对值  8select ceiling(9.4) -- 向上取整 10select floor(9.4) -- 向下取整 9select rand() -- 返回0-1的随机数select sign(number) -- 判断一个数的正负 负数返回-1，正数返回1-- 字符串函数select char_length('这是一串字符串') -- 返回字符串长度select concat('我'，'写','代码') -- 拼接字符串select insert('我喜欢编程',1,2,'超级热爱') -- 插入替换，从某个位置开始替换某个长度select upper('hello world') -- 全部转换为大写select lower('HELLO world') -- 全部小写select insert('hello world','h') -- 返回h首次出现的索引select replace('hello world','world','sql') -- 用sql替换worldselect substr('hello world',4,6) -- 返回从第4个截取六个长度的字符select reverse('hello world') -- 反转-- 查询姓周的同学select reverse(studentName,'周','邹') from studentwhere studenName like '周%'-- 时间和日期函数select current_date() -- 获得当前日期select curdate() -- 获取当前日期select now() -- 获得当前时间select localtime() -- 获得本地时间select sysdate() -- 系统时间select year(now()) -- 年select month(now()) -- 月select day(now()) -- 日-- 系统select system_user()select user()select version()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2聚合函数"><a href="#5-2聚合函数" class="headerlink" title="5.2聚合函数"></a>5.2聚合函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count（）</td><td>计数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>min()</td><td>最小值</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 查询计数指定字段（行）select count(studentName) from student;-- 会忽略所有的null值select count(*) from student;-- 不会忽略null值 本质都是计算行数select count(1) from score;-- 不会忽略null值 本质都是计算行数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3、流程控制函数"><a href="#5-3、流程控制函数" class="headerlink" title="5.3、流程控制函数"></a>5.3、流程控制函数</h3><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。</p><p>MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,value1,value2)</td><td>如果value的值为TRUE，返回value1，否则返回value2</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为NULL，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 …. [ELSE result n] END</td><td>相当于Java的if…else if…else…</td></tr><tr><td>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td><td>相当于Java的switch…case…</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">#if(value,vulae1,vlaue2)select last_name,salary,if(salary &gt;=6000,"高工资","低工资") details from employees;select last_name,commission_pct,if(commission_pct is not null,commission_pct,0) details,salary *12 *(1+if(commission_pct is not null,commission_pct,0)) annual_sal from employees;#FNULL(value1, value2) 可以看做是IF (VALUE, VALUE1, VALUE2)的特殊情况select last_name,commission_pct,ifnull(commission_pct,0) "details" from employees;#case when 条件1 then 结果1 when 条件2 then 结果2 .... [else result] endselect last_name,salary,case when salary &gt;= 15000 then "白骨精" when salary &gt;= 100000 then "潜力股" when salary &gt;= 8000 then "屌丝一个" else "草包一个" end detailsfrom employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4、MD5加密"><a href="#5-4、MD5加密" class="headerlink" title="5.4、MD5加密"></a>5.4、MD5加密</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE `testmd5`(`id` INT(4) NOT NULL,`name` VARCHAR(20) NOT NULL,`pwd` VARCHAR(50) NOT NULL,PRIMARY KEY(`id`))ENGINE = INNODB DEFAULT CHARSET = utf8-- 明文密码INSERT INTO testmd5 VALUE(1,'zhangsan','123456'),(2,'lisi','123456'),(3,'wangwu','123466')-- 加密UPDATE testmd5 SET pwd = MD5(pwd) WHERE id = 1-- 全部加密UPDATE testmd5 SET pwd = MD5(pwd)-- 插入时加密INSERT INTO testmd5 VALUE(4,'xiaoming',MD5('123456'))-- 如何校验：将用户传递进来的密码，进行MD5加密，然后比对加密的值SELECT * FROM testmd5 WHERE `name`='xiaoming' AND pwd = MD5('123456')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6.事务"></a>6.事务</h2><p>事务原则（ACID原则）：原子性（Atomicity）、一致性（Consistency）隔离性（Isolation）、持久性（Durability）</p><p> <strong>原子性</strong>：要么都成功，要么都失败</p><p><strong>一致性</strong>：事务前后的数据完整性保持一致</p><p><strong>持久性</strong>：事务提交则不可逆，被持久化到数据库中</p><p><strong>隔离性</strong>：事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启事务，不能被其他事务操作的数据所干扰，事务之间相互隔离</p><p><strong>隔离导致的一些问题</strong></p><p> <strong>脏读：</strong></p><p>指一个事物读取了其他事物未提交的数据</p><h3 id="幻读（虚读）："><a href="#幻读（虚读）：" class="headerlink" title="幻读（虚读）："></a><strong>幻读（虚读）：</strong></h3><p>是指在一个事务内读取别的事务插入的数据，导致前后读取的不一致。</p><h3 id="不可重复读："><a href="#不可重复读：" class="headerlink" title="不可重复读："></a><strong>不可重复读：</strong></h3><p>在一个事务内读取表中的某一行数据，多次读取的结果不同（不一定是错误，只是某些场合不对）</p><h3 id="事务的建立"><a href="#事务的建立" class="headerlink" title="事务的建立"></a><strong>事务的建立</strong></h3><blockquote><p>mysql 是默认开启事务自动提交的</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">set autocommit = 0 --关闭set autocommit = 1 -- 开启(默认的)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 手动处理事务set autocommit = 0 -- 关闭自动提交-- 事务开启start transation -- 标记一个事务的开始，在这之后的SQL都在同一个事务中insert into XX -- 插入数据-- 提交：持久化（处理成功！）commit-- 回滚：回到原来的样子（处理失败！）rollback-- 事务结束set autocommit = 1 -- 打开自动提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">savepoint 保存点名  -- 设置事务的保存点rollback savepoint 保存点名release savepoint 保存点名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建数据库CREATE DATABASE shop CHARACTER SET utf8 COLLATE utf8_general_ciUSE shop-- 创建表CREATE TABLE `account`(`id` INT(3) NOT NULL AUTO_INCREMENT,`name` VARCHAR(30) NOT NULL,`money` DECIMAL(9,2) NOT NULL,PRIMARY KEY (`id`))ENGINE = INNODB DEFAULT CHARSET = utf8-- 向表中添加数据INSERT INTO account(`name`,`money`)VALUES('A',2000.00),('B',10000.00)-- 模拟转账：事务SET autocommit = 0;   -- 关闭自动提交START TRANSACTION;  -- 开启一个事务UPDATE account SET money = money - 500 WHERE `name` = 'A';UPDATE account SET money = money + 500 WHERE `name` = 'B';COMMIT ;-- 提交事务，数据就被持久化ROLLBACK;-- 回滚SET autocommit = 1;-- 开启事务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-索引"><a href="#7-索引" class="headerlink" title="7.索引"></a>7.索引</h2><p>MySQL官方对索引的定义为:<strong>索引(Index）是帮助MySQL高效获取数据的数据结构。</strong></p><p>提取句子主干，就可以得到索引的本质:索引是数据结构。</p><h3 id="7-1索引的分类"><a href="#7-1索引的分类" class="headerlink" title="7.1索引的分类"></a>7.1索引的分类</h3><p>1、 主键索引（primary key）</p><pre><code>     唯一的标识，主键不可以重复</code></pre><p>2、唯一索引（unique key)</p><p>​避免重复出现，唯一索引可以重复，多个列都可以标识为唯一索引</p><p>3、常规索引（key/ index)</p><p>​默认的，index，或key关键字来设置</p><p>4、全文索引（FullText)</p><p>​快速定位数据</p><p>​在特定的数据库下才有，MyISAM</p><p><strong>索引的使用</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 显示所有索引--show index from 表名;show index from student;-- 添加一个全文索引（索引名）  列名alter table school.student add fulltext index `studentname`(`studentname`);-- explain 分析sql执行的状况explain select * from student;   -- 非全文索引explain select * from student where match(studentname) against('李')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>索引在小数据的时候用处不大，在大数据的前提下，可以大大改变查询速度</strong></p><h3 id="索引原则"><a href="#索引原则" class="headerlink" title="索引原则"></a>索引原则</h3><ul><li>索引不是越多越好</li><li>不要对进程变动数据加索引</li><li>小数据表不需要加上索引</li><li>索引一般加在常用来查寻的字段上</li></ul><blockquote><blockquote><p>索引的数据结构</p></blockquote><p>Hash类型的索引</p><p>Btree：InnoDB的默认数据结构</p></blockquote><h2 id="8-权限管理和备份"><a href="#8-权限管理和备份" class="headerlink" title="8.权限管理和备份"></a>8.权限管理和备份</h2><h3 id="8-1用户管理"><a href="#8-1用户管理" class="headerlink" title="8.1用户管理"></a>8.1用户管理</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 创建用户-- 语法：create user 用户名 identified by '密码';create user liteng identified by '123456';-- 修改密码(修改当前用户密码)set password = password('111111')-- 修改密码(修改指定的用户密码)set password for liteng = password('147258369')-- 重命名-- 语法： rename user 原用户名 to 要修改成的用户名rename user liteng to HelloMySQL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2用户权限"><a href="#8-2用户权限" class="headerlink" title="8.2用户权限"></a>8.2用户权限</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 用户权限 all privileges 全部的权限，库名.表名-- all privileges 除了给别人授权，其他都能干grant all privileges on *.* to liteng;-- 查询权限show grant for liteng   -- 查询指定用户的权限show grant for root@localhost;-- 撤销权限 remove 哪些权限，在哪个库撤销，给谁撤销remove all privileges on *.* from liteng;-- 删除用户drop user liteng;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3MySQL备份"><a href="#8-3MySQL备份" class="headerlink" title="8.3MySQL备份"></a>8.3MySQL备份</h3><p>为什么要备份？</p><ul><li>保证数据不会丢失</li><li>数据转移</li></ul><p>MySQL数据库备份的方式</p><ul><li>拷贝物理文件</li><li>在sqlyog这种可视化工具中手动导出</li><li>使用命令行导出， mysqldump(在命令行使用)</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 导出数据# mysqldump -h 主机 -u 用户名 -p 密码 数据库 表名 &gt; 物理磁盘位置/文件名mysqldump -h locahost -u root -p liteng0220 school student &gt;D:/a.sql# mysqldump -h 主机 -u 用户名 -p 密码 数据库 表1 表2 表3 ... &gt; 物理磁盘位置/文件名mysqldump -h locahost -u root -p liteng0220 school student &gt;D:/b.sql# mysqldump -h 主机 -u 用户名 -p 密码 数据库  &gt; 物理磁盘位置/文件名mysqldump -h locahost -u root -p liteng0220 school &gt;D:/c.sql-- 导入数据#在登陆的情况下，切换到指定的数据库#source 备份文件mysql -u 用户名 -p 密码 库名 &lt; 备份文件source d:/a.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-规范数据库设计"><a href="#9-规范数据库设计" class="headerlink" title="9.规范数据库设计"></a>9.规范数据库设计</h2><p> <strong>9.1</strong>当数据库比较复杂时，需要设计****</p><ul><li>分析需求，分析业务和处理的数据库的需求</li><li>概要设计，设计关系E-R图</li></ul><p> <strong>9.2三大范式</strong></p><p> 为什么需要数据规范化？</p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li></ul><p> 三大范式</p><p>为什么需要数据规范化?</p><p>​信息重复<br>​更新异常插入异常<br>​无法正常显示信息删除异常<br>​丢失有效的信息</p><p>第一范式：原子性（保证每一列不可再分）</p><p>第二范式：在第一范式的条件下，确保数据库的每一列都与主键相关，而不只是与主键的一部分相关（每张表都只描述一件事情）</p><p>第三范式：在满足第一第二范式的前提下，确保数据库的每一列都与主键相关，而不能间接相关。</p><h2 id="10、JDBC"><a href="#10、JDBC" class="headerlink" title="10、JDBC"></a>10、JDBC</h2><h3 id="10-1数据库驱动（JDBC）"><a href="#10-1数据库驱动（JDBC）" class="headerlink" title="10.1数据库驱动（JDBC）"></a>10.1数据库驱动（JDBC）</h3><pre><code> ![image-20210905165033665](C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20210905165033665.png)</code></pre><h3 id="10-2、JDBC"><a href="#10-2、JDBC" class="headerlink" title="10.2、JDBC"></a>10.2、JDBC</h3><p> SUN公司为了简化开发人员的(对数据库的统一)操作，提供了一个(Java操作数据库的）规范，俗称JDBC这些规范的实现由具体的厂商去做~</p><p>对于开发人员来说，我们只需要掌握JDBC接口的操作即可！</p><p>​<img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20210905165424642.png" alt="image-20210905165424642"></p><h3 id="10-3第一个JDBC程序"><a href="#10-3第一个JDBC程序" class="headerlink" title="10.3第一个JDBC程序"></a>10.3第一个JDBC程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package JDBC;import java.sql.*;public class JdbcFirstDemo {    public static void main(String[] args) throws ClassNotFoundException,SQLException{        //1.加载驱动        Class.forName("com.mysql.jdbc.Driver");        //2. 用户URl        String url = "jdbc:mysql://localhost:3306/school?useUnicode=true&amp;characterEncoding=utf8&amp;useSSl=true";        String usename ="root";        String password = "liteng0220";        //3.连接数据库，成功则得到数据        Connection connection = DriverManager.getConnection(url,usename,password);        //4.执行SQL对象        Statement statement = connection.createStatement();        //5.执行SQL的对象 去执行SQL语句，可能才在结果，显示结果        String sql = "SELECT * FROM student";        ResultSet resultset = statement.executeQuery(sql);        while (((ResultSet) resultset).next()){            System.out.println("stuNo=" + ((ResultSet) resultset).getObject("stuNo"));            System.out.println("stuName=" + ((ResultSet) resultset).getObject("stuName"));            System.out.println("sex=" + ((ResultSet) resultset).getObject("sex"));            System.out.println("age=" + ((ResultSet) resultset).getObject("age"));            System.out.println("=========================");        }        //释放连接资源        ((ResultSet) resultset).close();        statement.close();        connection.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 步骤总结：</p><p>1.先加载驱动，使用Class.Forname(‘’com.mysql.jdbc.Driver’’)</p><p>2.连接数据库 使用URL，username和passWord 使用DriverManager.getConnection(url,username,password)连接到数据库</p><p>3.获得SQL返回的对象 statement</p><p>4.设置SQL语句（String sql）</p><p>5.获得返回集（返回集是一个链表，使用while（resultSet.next）判断是否为空）</p><p>6.释放连接(resultSet,statement,connecction进行close方法)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">加载驱动Class.forName("com.mysql.jdbc.Driver");设置用户连接URLString url = "jdbc:mysql://localhost:3306/school?useUnicode=true&amp;characterEncoding=utf8&amp;useSSl=true";mysql    --3306格式：协议：主机号：端口/具体数据库?参数1&amp;参数2&amp;参数3…协议：jdbc:mysql主机号：localhost端口号：3306具体数据库：school ？号用于连接参数参数1:useUnicode=true 使用Unicode编码，可以支持中文参数2:characterEncoding=utf8 设置字符集编码为utf8参数3:useSSl=true 使用安全的连接 oralce    --1521    jdbc:oracle:thin:@localhost:1521:sid        connection对象是通过DriverManager.getConnection(url,username,password)方法获得的Connection对象，也就是数据库对象在通过connection对象使用createStatement方法创建需要执行的SQL语句对象statement最后调用statement个excuteQuery（查询），excuteUpdate（增删）实现对数据库的操作。操作完成需要释放resultSet，statement，connection连接。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Statement执行SQL的对象  PrepareStatement执行SQL的对象String sql = "SELECT * FROM student";//编写sqlstatement.executeQuery(sql);//查询操作返回ResultSetstatement.execute(sql);//执行sqlstatement.executeUpdate(sql);//更新、插入、删除  都是用这个  返回一个受影响的行数ResultSet查询的结果集： 封装了所有的查询结果获得指定的数据类型resultset.getObject();//在不知道列表类型的情况下使用//如果知道列表的类型就使用指定的类型   如：以下类型resultset.getInt();resultset.getFloat();resultset.getDate();resultset.getString();   遍历，指针resultset.beforeFirst();//移动到最前面resultset.afterLast();//移动到最后面resultset.next();//移动到下一个数据resultset.previous();//移动到前一行resultset.absolute(row);//移动到指定行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4、statement对象"><a href="#10-4、statement对象" class="headerlink" title="10.4、statement对象"></a>10.4、statement对象</h3><h2 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>MySQL主从复制是一个异步的复制过程，底层是基于lysql数据库自带的**==二进制日志==<strong>功能。就是一台或多台MySQL数据库(slave，即</strong>从库**)从另一台NySQL数据库(master，即<strong>主库</strong>）进行日志的复制然后再解析日志并应用到自身，<strong>最终实现从库的数据和主库的数据保持一致</strong>。MySQL主从复制是MySQL数据库自带功能，无需借助第三方工具。 </p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p> MySQL复制过程分成三步:</p><ul><li>master将改变记录到二进制日志 (binary log)</li><li>slave将master的binary log拷贝到它的中继日志（relay log)</li><li>slave重做中继日志中的事件，将改变应用到自己的数据库中</li></ul><p> <img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221010134348876.png" alt="image-20221010134348876"></p><h3 id="主库配置-ip-192-168-138-100"><a href="#主库配置-ip-192-168-138-100" class="headerlink" title="主库配置(ip:192.168.138.100)"></a>主库配置(ip:192.168.138.100)</h3><p>查看MySQL是否启动命令</p><pre class="line-numbers language-none"><code class="language-none">systemctl status mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一步：修改MySQL数据库的配置文件 /etc/my.cnf</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">[mysqld]log-bin=mysql-bin  #[必须]启用二进制日志server-id=100  #[必须]服务器唯一id，（一般设置，主库小于从库）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二不：重启MySQL服务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 第三步：登录MySQL数据库，执行下面的SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">grant replication slave on *.* to 'xiaoming'@'%' identified by 'root@123456';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 注：上面SQL的作用是创建一个用户xiaoming，密码为Root@123456，并且给xiaoming用户授予REPLICATION SLAVE权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。</p><p>第四步：登录MySQL数据库，执行下面的SQL，记录下<strong>file</strong>和<strong>Position</strong>的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">show master status;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：上面SQL的作用是查看Master的状态，执行完此SQL后不要再执行任何操作</p><h3 id="从库配置-ip-192-168-138-101"><a href="#从库配置-ip-192-168-138-101" class="headerlink" title="从库配置(ip:192.168.138.101)"></a>从库配置(ip:192.168.138.101)</h3><p>第一步：修改MySQL数据库的配置文件 /etc/my.cnf</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">[mysqld]server-id=101  #[必须]服务器唯一id，（一般设置，主库小于从库）read_only = 1  #只读<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二不：重启MySQL服务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 第三步：登录MySQL数据库，执行下面的SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">change master to master_host='192.168.138.100',master_user='xiaoming',master_password='root@123456',master_log_file='mysql-bin.000001',master_log_pos=439;start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第四步：登录MySQL数据库，执行下面的SQL，查看从库的状态</p><pre class="line-numbers language-none"><code class="language-none">show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>change master to master_host=’192.168.10.102’,master_user=’xiaoming’,master_password=‘root@123456’,master_log_file=’mysql-bin.000007’,master_log_pos=441;</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus快速构建springboot项目</title>
      <link href="/2023/03/03/mybatisplus-kuai-su-gou-jian-springboot-xiang-mu/"/>
      <url>/2023/03/03/mybatisplus-kuai-su-gou-jian-springboot-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="MybatisPlus快速构建springboot项目"><a href="#MybatisPlus快速构建springboot项目" class="headerlink" title="MybatisPlus快速构建springboot项目"></a>MybatisPlus快速构建springboot项目</h1><h2 id="1、所需的maven依赖"><a href="#1、所需的maven依赖" class="headerlink" title="1、所需的maven依赖"></a>1、所需的maven依赖</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--springboot启动器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--热部署依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql驱动--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--lombok--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--mybatisplus依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--代码生成器：模板引擎Freemarker依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--代码生成器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--swagger--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${swagger.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--swagger ui--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${swagger.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、代码生成器"><a href="#2、代码生成器" class="headerlink" title="2、代码生成器"></a>2、代码生成器</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.core.toolkit.StringPool;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.po.TableInfo;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;import java.util.ArrayList;import java.util.List;import java.util.Scanner;// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中public class CodeGenerator {    /**     * &lt;p&gt;     * 读取控制台内容     * &lt;/p&gt;     */    public static String scanner(String tip) {        Scanner scanner = new Scanner(System.in);        StringBuilder help = new StringBuilder();        help.append("请输入" + tip + "：");        System.out.println(help.toString());        if (scanner.hasNext()) {            String ipt = scanner.next();            if (StringUtils.isNotEmpty(ipt)) {                return ipt;            }        }        throw new MybatisPlusException("请输入正确的" + tip + "！");    }    public static void main(String[] args) {        // 代码生成器        AutoGenerator mpg = new AutoGenerator();        // 全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        gc.setOutputDir(projectPath + "/src/main/java");//        gc.setOutputDir("D:\\test");        gc.setAuthor("liteng");        gc.setOpen(false);        // gc.setSwagger2(true); 实体属性 Swagger2 注解        gc.setServiceName("%sService");        mpg.setGlobalConfig(gc);        // 数据源配置        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl("jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=UTC");        // dsc.setSchemaName("public");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("liteng0220");        mpg.setDataSource(dsc);        // 包配置        PackageConfig pc = new PackageConfig();        pc.setModuleName(null);        pc.setParent("com.blog");        mpg.setPackageInfo(pc);        // 自定义配置        InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {                // to do nothing            }        };        // 如果模板引擎是 freemarker        String templatePath = "/templates/mapper.xml.ftl";        // 如果模板引擎是 velocity        // String templatePath = "/templates/mapper.xml.vm";        // 自定义输出配置        List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();        // 自定义配置会被优先输出        focList.add(new FileOutConfig(templatePath) {            @Override            public String outputFile(TableInfo tableInfo) {                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！                return projectPath + "/src/main/resources/mapper/"                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;            }        });        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        // 配置模板        TemplateConfig templateConfig = new TemplateConfig();        templateConfig.setXml(null);        mpg.setTemplate(templateConfig);        // 策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setEntityLombokModel(true);        strategy.setRestControllerStyle(true);        strategy.setInclude(scanner("表名，多个英文逗号分割").split(","));        strategy.setControllerMappingHyphenStyle(true);        strategy.setTablePrefix("m_");        mpg.setStrategy(strategy);        mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、统一结果"><a href="#3、统一结果" class="headerlink" title="3、统一结果"></a>3、统一结果</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220731083931873.png" alt="image-20220731083931873"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import io.swagger.annotations.ApiModel;import lombok.Data;/** * 统一返回结果类 */@Data@ApiModel(value = "全局统一返回结果")public class Result&lt;T&gt; {    private Integer code; //状态码    private String msg;  // 返回信息（成功、失败）    private T data;  //返回的数据    public Result(){} //无参的构造器    //返回成功的方法,没有data数据    public static&lt;T&gt;  Result&lt;T&gt; success(){        Result&lt;T&gt; result = new Result&lt;&gt;();        result.setCode(20000);        result.setMsg("操作成功");        return result;    }    //返回成功的方法,有data数据    public static&lt;T&gt;  Result&lt;T&gt; success(T data){        Result&lt;T&gt; result = new Result&lt;&gt;();        if (data != null){            result.setData(data);        }        result.setCode(20000);        result.setMsg("操作成功");        return result;    }    //返回失败的方法,没有data数据    public static&lt;T&gt;  Result&lt;T&gt; fail(){        Result&lt;T&gt; result = new Result&lt;&gt;();        result.setCode(20001);        result.setMsg("操作失败");        return result;    }    //返回失败的方法,有data数据    public static&lt;T&gt;  Result&lt;T&gt; fail(T data){        Result&lt;T&gt; result = new Result&lt;&gt;();        if (data != null){            result.setData(data);        }        result.setCode(20001);        result.setMsg("操作失败");        return result;    }    public static &lt;T&gt; Result&lt;T&gt; build(T body, Integer code, String message) {        Result&lt;T&gt; result = new Result&lt;T&gt;();        if (body != null) {            result.setData(body);        }        result.setCode(code);        result.setMsg(message);        return result;    }    public Result&lt;T&gt; code(Integer code){        this.setCode(code);        return this;    }    public Result&lt;T&gt; message(String msg){        this.setMsg(msg);        return this;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="枚举类：统一返回结果状态信息类"><a href="#枚举类：统一返回结果状态信息类" class="headerlink" title="枚举类：统一返回结果状态信息类"></a>枚举类：统一返回结果状态信息类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">import lombok.Getter;/** * 统一返回结果状态信息类 * */@Getterpublic enum ResultCodeEnum {    SUCCESS(200,"成功"),    FAIL(201, "失败"),    SERVICE_ERROR(2012, "服务异常"),    DATA_ERROR(204, "数据异常"),    ILLEGAL_REQUEST(205, "非法请求"),    REPEAT_SUBMIT(206, "重复提交"),    LOGIN_AUTH(208, "未登陆"),    PERMISSION(209, "没有权限"),    PHONE_CODE_ERROR(211, "手机验证码错误"),    MTCLOUD_ERROR(210, "直播接口异常"),    COUPON_GET(220, "优惠券已经领取"),    COUPON_LIMIT_GET(221, "优惠券已发放完毕"),    FILE_UPLOAD_ERROR( 21004, "文件上传错误"),    FILE_DELETE_ERROR( 21005, "文件刪除错误"),    VOD_PALY_ERROR(209, "请购买后观看"),;    private Integer code;    private String message;    private ResultCodeEnum(Integer code, String message) {        this.code = code;        this.message = message;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、全局异常处理"><a href="#5、全局异常处理" class="headerlink" title="5、全局异常处理"></a>5、全局异常处理</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220731083838953.png" alt="image-20220731083838953"></p><h3 id="全局异常类"><a href="#全局异常类" class="headerlink" title="全局异常类"></a>全局异常类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;@ControllerAdvice //aoppublic class GlobalExceptionHandler {    //全局异常处理    @ExceptionHandler(Exception.class)    @ResponseBody  //返回json数据    public Result error(Exception e){        e.printStackTrace();        return Result.fail(null).message("执行全局异常处理");    }    //特定异常处理ArithmeticException    @ExceptionHandler(ArithmeticException.class)    @ResponseBody  //返回json数据    public Result error(ArithmeticException e){        e.printStackTrace();        return Result.fail(null).message("执行特定异常处理ArithmeticException");    }    //自定义异常处理    @ExceptionHandler(GgktException.class)    @ResponseBody    public Result error(GgktException e){        e.printStackTrace();        return Result.fail(null).code(e.getCode()).message("执行自定义异常处理");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@NoArgsConstructor@AllArgsConstructorpublic class GgktException extends RuntimeException{    private Integer code;    private String msg;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、swagger配置"><a href="#6、swagger配置" class="headerlink" title="6、swagger配置"></a>6、swagger配置</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220731084030633.png" alt="image-20220731084030633"></p><p>测试地址：<a href="http://localhost:8088/swagger-ui.html">http://localhost:8088/swagger-ui.html</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;@Configuration@EnableSwagger2public class Swagger2Config {    @Bean    public Docket webApiConfig(){        return new Docket(DocumentationType.SWAGGER_2)                .groupName("ggkt") //项目组可以更改                .apiInfo(webApiInfo())                .select()                //只显示api路径下的页面                //.paths(Predicates.and(PathSelectors.regex("/api/.*")))                .build();    }    private ApiInfo webApiInfo(){        return new ApiInfoBuilder()                .title("网站-API文档")                .description("本文档描述了网站微服务接口定义")                .version("1.0")                .contact(new Contact("kt", "https://www.baidu.com", "baidu.com"))                .build();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、分页插件配置"><a href="#7、分页插件配置" class="headerlink" title="7、分页插件配置"></a>7、分页插件配置</h2><h3 id="旧版的mybatisplus分页插件配置"><a href="#旧版的mybatisplus分页插件配置" class="headerlink" title="旧版的mybatisplus分页插件配置"></a>旧版的mybatisplus分页插件配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;import org.mybatis.spring.annotation.MapperScan;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * 配置类 */@Configuration@MapperScan("com.kt.ggkt.vod.mapper")//扫描项目的mapper包public class VodConfig {    /**     * 分页插件     */    @Bean    public PaginationInterceptor paginationInterceptor() {        return new PaginationInterceptor();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新版的mybatisplus分页插件配置"><a href="#新版的mybatisplus分页插件配置" class="headerlink" title="新版的mybatisplus分页插件配置"></a>新版的mybatisplus分页插件配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.myblog.config;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;import org.mybatis.spring.annotation.MapperScan;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@MapperScan("com.myblog.mapper") //扫描mapper包public class MybatisPulsConfig {    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor() {        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));        return interceptor;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、简单的接口"><a href="#8、简单的接口" class="headerlink" title="8、简单的接口"></a>8、简单的接口</h2><h3 id="1、添加接口"><a href="#1、添加接口" class="headerlink" title="1、添加接口"></a>1、添加接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">//添加章节   @ApiOperation("添加章节")   @PostMapping("/save")   public Result save(@RequestBody Chapter chapter){       boolean result = chapterService.save(chapter);       if (result){           return Result.success(result).message("添加章节成功");       }else {           return Result.fail().message("添加章节失败");       }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、删除接口"><a href="#2、删除接口" class="headerlink" title="2、删除接口"></a>2、删除接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">//删除章节    @ApiOperation("删除章节")    @DeleteMapping("/remove/{id}")    public Result removeChapterById(@PathVariable Long id){        final boolean result = chapterService.removeById(id);        if (result){            return Result.success(result).message("删除成功");        }else {            return Result.fail().message("删除失败！！！");        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、批量删除接口"><a href="#3、批量删除接口" class="headerlink" title="3、批量删除接口"></a>3、批量删除接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">//批量删除讲师@ApiOperation("批量删除讲师")@DeleteMapping("/removeBatch")public Result removeBatch(@RequestBody List&lt;Long&gt; ids){    boolean result = teacherService.removeByIds(ids) ;    if (result){        return Result.success(result);    }else{        return Result.fail(null);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、修改接口"><a href="#4、修改接口" class="headerlink" title="4、修改接口"></a>4、修改接口</h3><p>根据id修改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//修改讲师接口-根据id查询    @ApiOperation("修改讲师接口-根据id查询")    @GetMapping("/getTeacher/{id}")    public Result getTeacherById(@PathVariable Long id){        Teacher teacher = teacherService.getById(id);        return Result.success(teacher);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">//最终实现    @ApiOperation("修改接口-最终实现")    @PostMapping("/updateTeacher")    public Result updateTeacher(@RequestBody Teacher teacher){        boolean result = teacherService.updateById(teacher);        if (result){            return Result.success(teacher);        }else {            return Result.fail(null);        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、分页显示接口"><a href="#5、分页显示接口" class="headerlink" title="5、分页显示接口"></a>5、分页显示接口</h3><p>多条件分页查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//条件分页查询    @ApiOperation("条件查询分页")    @GetMapping("/findQueryPage/{pageNum}/{pageSize}")    public Result findPage(@PathVariable Long pageNum,                           @PathVariable  Long pageSize,                           TeacherQueryVo teacherQueryVo){        Page&lt;Teacher&gt; page = new Page&lt;&gt;(pageNum, pageSize);        //判断teacherQueryVo对象是否为空        if(teacherQueryVo == null){            List&lt;Teacher&gt; list = teacherService.list();            return Result.success(list);        }else {            //获取条件值            String name = teacherQueryVo.getName();            Integer level = teacherQueryVo.getLevel();            String joinDateBegin = teacherQueryVo.getJoinDateBegin();            String joinDateEnd = teacherQueryVo.getJoinDateEnd();            //进行非空判断，条件封装            QueryWrapper&lt;Teacher&gt; wrapper = new QueryWrapper&lt;&gt;();            if (!StringUtils.isEmpty(name)){                wrapper.like("name",name);            }            if (!StringUtils.isEmpty(level)){                wrapper.like("level",level);            }            if (!StringUtils.isEmpty(joinDateBegin)){                wrapper.like("join_date",joinDateBegin);            }            if (!StringUtils.isEmpty(joinDateEnd)){                wrapper.like("join_date",joinDateEnd);            }            //调用方法分页查询            IPage&lt;Teacher&gt; teacherPage = teacherService.page(page, wrapper);            return Result.success(teacherPage);        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或单一条件分页查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping("/page")    public IPage&lt;User&gt; page(@RequestParam Integer pageNum, @RequestParam Integer pageSize, @RequestParam(defaultValue = "") String username){        IPage&lt;User&gt; page = new Page&lt;&gt;(pageNum,pageSize);        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();        wrapper.or().like("username",username).or().like("address",username).or().like("nickname",username);        return userService.page(page,wrapper);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、登录注册接口"><a href="#6、登录注册接口" class="headerlink" title="6、登录注册接口"></a>6、登录注册接口</h3><p>model</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import lombok.Data;/** * @program: springboot * @description: * @author: liteng * @create: 2022-04-19 23:54 **//** * 接受前端登录请求的参数 */@Datapublic class UserDTO {    private String username;    private String password;    private String nickname;    private String avatar;    private String token;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">/*//登录验证（不使用包装类）    @PostMapping("/login")    public boolean login(@RequestBody UserDTO userDTO){        String username = userDTO.getUsername();        String password = userDTO.getPassword();        if (StrUtil.isBlank(username) || StrUtil.isBlank(password)){//校验账号和密码是否为空            return false;        }       return userService.login(userDTO);    }*/    //使用包装类方式的登录验证并集成JWT    @PostMapping("/login")    public Result login(@RequestBody UserDTO userDTO){        String username = userDTO.getUsername();        String password = userDTO.getPassword();        if (StrUtil.isBlank(username) || StrUtil.isBlank(password)){//校验账号和密码是否为空            return Result.error(Constants.CODE_PARAM_ERROR,"参数错误");        }        UserDTO dto = userService.login(userDTO);        return Result.success(dto);    }    //用户注册    @PostMapping("/register")    public Result register(@RequestBody UserDTO userDTO){        String username = userDTO.getUsername();        String password = userDTO.getPassword();        if (StrUtil.isBlank(username) || StrUtil.isBlank(password)){//校验账号和密码是否为空            return Result.error(Constants.CODE_PARAM_ERROR,"参数错误");        }        User dto = userService.register(userDTO);        return Result.success(dto);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface IUserService extends IService&lt;User&gt; {    //boolean login(UserDTO userDTO);//不使用包装类的登录方法    UserDTO login(UserDTO userDTO);  //使用包装类的登录方法    User register(UserDTO userDTO);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt; implements IUserService {    //使用包装类的登录方法 并集成JWT    @Override    public UserDTO login(UserDTO userDTO) {        User user = getUserInfo(userDTO);        if (user != null){            BeanUtil.copyProperties(user,userDTO,true);            //设置token            String token = TokenUtils.getToken(user.getId().toString(), user.getPassword());            userDTO.setToken(token);            return userDTO;        }else {            throw new ServiceException(Constants.CODE_FAIL,"用户名或密码错误");        }    }    @Override    public User register(UserDTO userDTO) {        User userInfo = getUserInfo(userDTO);        if (userInfo == null){            userInfo = new User();            BeanUtil.copyProperties(userDTO,userInfo,true);            save(userInfo);        }else {            throw new ServiceException(Constants.CODE_FAIL,"用户名已存在");        }        return userInfo;    }    private  User getUserInfo(UserDTO userDTO){        QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();        queryWrapper.eq("username",userDTO.getUsername());        queryWrapper.eq("password",userDTO.getPassword());        User one;        try{            one = getOne(queryWrapper);   //只查询一个用户，如果数据库中存在多个相同的用户就会报错，此时就要抛出异        }catch (Exception e){            throw new ServiceException(Constants.CODE_FAIL,"系统出错");        }        return one;    }}   /* //不使用包装类的登录方法    @Override    public boolean login(UserDTO userDTO) {        QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();        queryWrapper.eq("username",userDTO.getUsername());        queryWrapper.eq("password",userDTO.getPassword());        //只查询一个用户，如果数据库中存在多个相同的用户就会报错，此时就要抛出异常//        User one = getOne(queryWrapper);//        return one != null;        try{            User one = getOne(queryWrapper);            return one != null;        }catch (Exception e){            return false;        }//        //查询多个用户//        List&lt;User&gt; list = list(queryWrapper);//        return list != null &amp;&amp; list.size() &gt; 0;*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、前后端分离跨域配置"><a href="#9、前后端分离跨域配置" class="headerlink" title="9、前后端分离跨域配置"></a>9、前后端分离跨域配置</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>使用Filter过滤器来过滤服务请求，向请求端设置Response Header(响应头部)的Access-Control-Allow-Origin属性声明允许跨域访问。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@WebFilterpublic class CorsFilter implements Filter {      @Override    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {          HttpServletResponse response = (HttpServletResponse) res;          response.setHeader("Access-Control-Allow-Origin", "*");          response.setHeader("Access-Control-Allow-Methods", "*");          response.setHeader("Access-Control-Max-Age", "3600");          response.setHeader("Access-Control-Allow-Headers", "*");        response.setHeader("Access-Control-Allow-Credentials", "true");        chain.doFilter(req, res);      }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.filter.CorsFilter;/** * 全局跨域配置 */@Configurationpublic class GlobalCorsConfig {    /**     * 允许跨域调用的过滤器     */    @Bean    public CorsFilter corsFilter() {        CorsConfiguration config = new CorsConfiguration();        //允许所有域名进行跨域调用        config.addAllowedOriginPattern("*");        //该用法在SpringBoot 2.7.0中已不再支持        //config.addAllowedOrigin("*");        //允许跨越发送cookie        config.setAllowCredentials(true);        //放行全部原始头信息        config.addAllowedHeader("*");        //允许所有请求方法跨域调用        config.addAllowedMethod("*");        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**", config);        return new CorsFilter(source);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.stereotype.Controller;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.filter.CorsFilter;/** * @program: springboot * @description: 解决跨域问题,即跨越配置 * @author: liteng * @create: 2022-04-18 10:50 **/@Configurationpublic class CorsConfig {    //当前跨域请求最大的有效时长，这里默认是1天    private static final long MAX_AGE = 24* 60 * 60;    @Bean    public CorsFilter corsFilter() {        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        CorsConfiguration config = new CorsConfiguration();        config.addAllowedHeader("*"); // 允许任何头        config.addAllowedOrigin("*");   // 允许任何域名        config.addAllowedMethod("*");  // 允许任何方法        config.setMaxAge(MAX_AGE); // 预检请求的有效期，单位为秒。        source.registerCorsConfiguration("/**", config);// 对接口配置跨域设置        return new CorsFilter(source);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>实现 WebMvcConfigurer接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.CorsRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;/** * 解决跨域问题 */@Configurationpublic class CorsConfig implements WebMvcConfigurer {    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping("/**")  //拦截所有请求                .allowedOrigins("*")  //可跨域的域名                .allowedMethods("GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS")// 允许跨域的方法                .allowCredentials(true)                .maxAge(3600)                .allowedHeaders("*");// 允许跨域的请求头    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.reactive.CorsWebFilter;import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;import org.springframework.web.util.pattern.PathPatternParser;@Configurationpublic class CorsConfig {    //处理跨域    @Bean    public CorsWebFilter corsFilter() {        CorsConfiguration config = new CorsConfiguration();        config.addAllowedMethod("*");        config.addAllowedOrigin("*");        config.addAllowedHeader("*");        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(new PathPatternParser());        source.registerCorsConfiguration("/**", config);        return new CorsWebFilter(source);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Nginx配置"><a href="#使用Nginx配置" class="headerlink" title="使用Nginx配置"></a>使用Nginx配置</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">location / {   add_header Access-Control-Allow-Origin *;   add_header Access-Control-Allow-Headers X-Requested-With;   add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;   if ($request_method = 'OPTIONS') {     return 204;   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springboot配置文件application.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"># 应用名称spring.application.name=myBlog#开发环境spring.profiles.active=dev#web服务端口号server.port=8088<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application-dev.properties文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">## 应用名称#spring.application.name=myBlog# 数据库驱动：spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver# 数据源名称spring.datasource.name=defaultDataSource# 数据库连接地址#spring.datasource.url=jdbc:mysql://localhost:3306/myblog?serverTimezone=UTCspring.datasource.url=jdbc:mysql://localhost:3306/myblog?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=CONVERT_TO_NULL&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai# 数据库用户名&amp;密码：spring.datasource.username=rootspring.datasource.password=liteng0220# 应用服务 WEB 访问端口#server.port=8088#返回json的全局时间格式spring.jackson.date-format=yyyy-MM-dd HH:mm:ss#spring.jackson.time-zone=GMT+8spring.jackson.time-zone=Asia/Shanghai#mybatis日志mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl#文件上传大小spring.servlet.multipart.max-file-size=1024MBspring.servlet.multipart.max-request-size=1024MB#阿里云 OSS#不同的服务器，地址不同aliyun.oss.file.endpoint=oss-cn-shenzhen.aliyuncs.comaliyun.oss.file.keyid=LTAI5t8p3xRcVTNge795PWkjaliyun.oss.file.keysecret=xyzqkRzhp8Aot11nsEG5tw0ZQc8Hts#bucket可以在控制台创建，也可以使用java代码创建aliyun.oss.file.bucketname=ltmyblog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、整合JWT"><a href="#10、整合JWT" class="headerlink" title="10、整合JWT"></a>10、整合JWT</h2><h3 id="①添加maven依赖"><a href="#①添加maven依赖" class="headerlink" title="①添加maven依赖"></a>①添加maven依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--JWT--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.10.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②创建token工具类TokenUtils"><a href="#②创建token工具类TokenUtils" class="headerlink" title="②创建token工具类TokenUtils"></a>②创建token工具类TokenUtils</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.myblog.utils;/** * @program: springboot * @description: * @author: liteng * @create: 2022-04-21 09:10 **/import cn.hutool.core.date.DateUtil;import cn.hutool.core.util.StrUtil;import com.auth0.jwt.JWT;import com.auth0.jwt.algorithms.Algorithm;import com.myblog.entity.TUser;import com.myblog.service.TUserService;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.annotation.PostConstruct;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.util.Date;/** * 生成token */@Componentpublic class TokenUtils {    private static TUserService staticUserService;    @Resource    private  TUserService userService;    @PostConstruct    public void setUserService(){        staticUserService = userService;    }    public static String getToken(String userId,String sign){        return JWT.create().withAudience(userId)  // 将 user id 保存到 token 里面                .withExpiresAt(DateUtil.offsetMinute(new Date(),2)) //设置过期时间,2分钟后过期                .sign(Algorithm.HMAC256(sign)); // 以 password 作为 token 的密钥    }    /**     * 获取当前登录的用户信息     *     */    public static TUser getCurrentUser(){        try {        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();        String token = request.getHeader("token");        if (StrUtil.isNotBlank(token)) {                String userId = JWT.decode(token).getAudience().get(0);                return staticUserService.getById(Integer.valueOf(userId));            }        }catch (Exception e){            return null;        }        return null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="③创建一个JwtInterceptor类去实现HandlerInterceptor拦截器接口"><a href="#③创建一个JwtInterceptor类去实现HandlerInterceptor拦截器接口" class="headerlink" title="③创建一个JwtInterceptor类去实现HandlerInterceptor拦截器接口"></a>③创建一个JwtInterceptor类去实现HandlerInterceptor拦截器接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.myblog.config.interceptor;import cn.hutool.core.util.StrUtil;import com.aliyun.oss.ServiceException;import com.auth0.jwt.JWT;import com.auth0.jwt.JWTVerifier;import com.auth0.jwt.algorithms.Algorithm;import com.auth0.jwt.exceptions.JWTVerificationException;import com.myblog.entity.TUser;import com.myblog.excption.MyException;import com.myblog.service.TUserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.method.HandlerMethod;import org.springframework.web.servlet.HandlerInterceptor;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * * @description: 拦截器 * @author: liteng * @create: 2022-04-21 18:12 **/public class JwtInterceptor implements HandlerInterceptor {    @Autowired    TUserService userService;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler){        String token = request.getHeader("token");        //如果不是映射到方法直接通过        if (!(handler instanceof HandlerMethod)) {            return true;        }        //执行认证        if (StrUtil.isBlank(token)) {//            return true;            throw new MyException(404, "token为空,请重新登录");        }        //获取token的user id        String userid;        try {            userid = JWT.decode(token).getAudience().get(0);        }catch (Exception e){            throw new MyException(400, "token无效,请重新登录");        }        //根Ttoken中的id查询数据库中是否存在该用户        TUser user = userService.getById(userid);        if (user == null) {            throw new MyException(501, "用户不存在,请重新登录");        }        //用户密码加签 验证token        JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(user.getPassword())).build();        try {            jwtVerifier.verify(token);  //验证token        }catch (JWTVerificationException e){            throw new MyException(502, "token验证失败,请重新登录");        }        return true;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="④创建一个InterceptorConfig配置类去实现WebMvcConfigurer接口"><a href="#④创建一个InterceptorConfig配置类去实现WebMvcConfigurer接口" class="headerlink" title="④创建一个InterceptorConfig配置类去实现WebMvcConfigurer接口"></a>④创建一个InterceptorConfig配置类去实现WebMvcConfigurer接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.graduationdesign.config;import com.graduationdesign.config.interceptor.JwtInterceptor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;/** * @program: springboot * @description: 拦截器配置 * @author: liteng * @create: 2022-04-21 18:32 **/@Configurationpublic class InterceptorConfig implements WebMvcConfigurer {    @Override    public void addInterceptors(InterceptorRegistry registry) {        registry.addInterceptor(jwtInterceptor())                .addPathPatterns("/**")   //拦截所有请求，通过判断token是否合法来决定是否需要登录                .excludePathPatterns("/user/login","/user/register","/user/export","/user/import","/file/**");//这些路径放行    }    @Bean    public JwtInterceptor jwtInterceptor(){        return new JwtInterceptor();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整合阿里云oss实现文件上传"><a href="#整合阿里云oss实现文件上传" class="headerlink" title="整合阿里云oss实现文件上传"></a>整合阿里云oss实现文件上传</h2><h3 id="1、添加阿里云oss的maven依赖"><a href="#1、添加阿里云oss的maven依赖" class="headerlink" title="1、添加阿里云oss的maven依赖"></a>1、添加阿里云oss的maven依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 阿里云oss图片上传maven依赖       --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、在peoperties文件添加如下配置"><a href="#2、在peoperties文件添加如下配置" class="headerlink" title="2、在peoperties文件添加如下配置"></a>2、在peoperties文件添加如下配置</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#阿里云 OSS#不同的服务器，地址不同aliyun.oss.file.endpoint=oss-cn-shenzhen.aliyuncs.comaliyun.oss.file.keyid=LTAI5t8p3xRcVTNge795PWkjaliyun.oss.file.keysecret=xyzqkRzhp8Aot11nsEG5tw0ZQc8Hts#bucket可以在控制台创建，也可以使用java代码创建aliyun.oss.file.bucketname=ltmyblog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、在controller控制器编写文件上传接口"><a href="#3、在controller控制器编写文件上传接口" class="headerlink" title="3、在controller控制器编写文件上传接口"></a>3、在controller控制器编写文件上传接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Api(tags="文件上传控制器")@RestController@RequestMapping("/file")public class TFileController {    @Autowired    private TFileService tFileService;    @Autowired    private TFileMapper tFileMapper;    @Autowired    private TFileServiceImpl tFileServiceImpl;    @ApiOperation("图片上传")    @PostMapping("/upload")    public Result fileUpload(@RequestParam MultipartFile file) throws Exception {        String url = tFileService.uploadFileAvatar(file);        return Result.success(url).message("上传成功");    }    @PostMapping("/save")    public Result save(){        return Result.success();    }    //获取相册列表    @GetMapping("/pictureList")    public Result getPictureList(){        QueryWrapper&lt;TFile&gt; wrapper = new QueryWrapper&lt;&gt;();        wrapper.orderByDesc("create_time");        List&lt;TFile&gt; list = tFileService.list(wrapper);        return Result.success(list);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在service层编写文件上传的业务逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface TFileService extends IService&lt;TFile&gt; {    //上传图片    String uploadFileAvatar(MultipartFile file) throws Exception;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class TFileServiceImpl extends ServiceImpl&lt;TFileMapper, TFile&gt; implements TFileService {    @Autowired    private TFileMapper tFileMapper;    public TFile tFile;    //上传图片    @Override    public String uploadFileAvatar(MultipartFile file) throws Exception{        String endpoint = ConstantPropertiesUtils.END_POINT;        String accessKeyId = ConstantPropertiesUtils.ACCESS_KEY_ID;        String accessKeySecret = ConstantPropertiesUtils.ACCESS_KEY_SECRET;        String bucketName = ConstantPropertiesUtils.BUCKET_NAME;        String url = null;        //创建OSSClient实例。        OSS ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);        //获取上传文件输入流        InputStream inputStream = file.getInputStream();        //获取文件名称        String fileName = file.getOriginalFilename();        //保证文件名唯一，去掉uuid中的'-'        String uuid = UUID.randomUUID().toString().replaceAll("-", "");        fileName = uuid + fileName;        //把文件按日期分类，构建日期路径：avatar/2019/02/26/文件名        //String datePath = new Date().toString("yyyy/MM/dd");        String datePath = "2022";        //拼接        fileName = datePath + "/" + fileName;        //调用oss方法上传到阿里云        //第一个参数：Bucket名称        //第二个参数：上传到oss文件路径和文件名称        //第三个参数：上传文件输入流        ossClient.putObject(bucketName, fileName, inputStream);        //把上传后把文件url返回        //https://xppll.oss-cn-beijing.aliyuncs.com/01.jpg        url = "https://" + bucketName + "." + endpoint + "/" + fileName;        //关闭OSSClient        ossClient.shutdown();        //将文件存储在服务器的地址存到数据库中        tFile = new TFile();        tFile.setUrl(url);        tFile.setName(fileName);        tFile.setCreateTime(new Date());        int num =  tFileMapper.save(tFile);        return url;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/03/03/docker/"/>
      <url>/2023/03/03/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a><a href="">docker</a></h1><h2 id="环境查看"><a href="#环境查看" class="headerlink" title="环境查看"></a>环境查看</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#系统内核是3.10以上[root@linux ~]# cd /[root@linux /]# uname -r3.10.0-1160.11.1.el7.x86_64#系统版本[root@linux /]# cat /etc/os-releaseNAME="CentOS Linux"VERSION="7 (Core)"ID="centos"ID_LIKE="rhel fedora"VERSION_ID="7"PRETTY_NAME="CentOS Linux 7 (Core)"ANSI_COLOR="0;31"CPE_NAME="cpe:/o:centos:centos:7"HOME_URL="https://www.centos.org/"BUG_REPORT_URL="https://bugs.centos.org/"CENTOS_MANTISBT_PROJECT="CentOS-7"CENTOS_MANTISBT_PROJECT_VERSION="7"REDHAT_SUPPORT_PRODUCT="centos"REDHAT_SUPPORT_PRODUCT_VERSION="7"[root@linux /]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><p>帮助文档</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#1、卸载旧的版本yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine                  #2、需要的安装 yum install -y yum-utils  #3、设置镜像的仓库 yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo#默认是国外的     #阿里云镜像地址 yum-config-manager \ --add-repo \ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  #更新yum软件包的索引 yum makecache fast #4、安装docker引擎 docker-ce 社区版  ee 企业版yum install docker-ce docker-ce-cli containerd.io#5、启动dockersystemctl start docker#6、查看docker是否安装成功命令，如下图说明安装成功docker version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220329918.png" alt="image-20221101220329918"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#7、hello-worlddocker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220342499.png" alt="image-20221101220342499"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#8、查看下载hello-world的镜像docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220353732.png" alt="image-20221101220353732"></p><h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#1、卸载依赖yum remove docker-ce docker-ce-cli containerd.io#2、删除资源rm -rf /var/lib/docker #docker的默认工作路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker开机自启命令"><a href="#docker开机自启命令" class="headerlink" title="docker开机自启命令"></a>docker开机自启命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl enable dockersystemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><p>1、登录阿里云找到容器镜像服务</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220409423.png" alt="image-20221101220409423"></p><p>2、找到镜像加速地址</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220424592.png" alt="image-20221101220424592"></p><p>3、配置使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://f4wx9ycs.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#获取镜像docker pull mysql:5.7#运行容器，需要做数据挂载!#安装启动mysql ，需要配置密码的，这是要注意点!#官方测试docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag#自己的测试-d  后台运行-p  端口映射-v  卷挂载-e  环境配置--name  容器名字#主库docker run -d -p 3310:3306 -v /home/mysql/conf/master_mysql:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name master mysql:5.7#从库docker run -d -p 3320:3306 -v /home/mysql/conf/slave_mysql:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name slave  mysql:5.7#启动成功之后，我们在本地使用sqlyog或navicat来接测试一下#sqlyog-连接到服务器的3310 --- 3310 和容器内的 3306映射，这个时候我们就可以连接上了!#在本地测试创建一个数据库，查看一下我们映射的路径是否ok !#删除安装的mysqldocker rm -f mysql198#可选#对于已经运行但没设置随docker服务的启动而启动容器的可以执行命令 docker update –restart=always 容器名docker container update --restart=always masterdocker container update --restart=always slave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设我们将容器删除</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220438945.png" alt="image-20221101220438945"></p><p>发现，我们挂载到本地的数据卷依旧没有丢失，这就实现了容器数据持久化功能!</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220452674.png" alt="image-20221101220452674"></p><p><strong>在本地测试创建一个数据库，查看一下我们映射的路径是否ok</strong> </p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220505201.png" alt="image-20221101220505201"></p><p>在Linux下查看</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220517635.png" alt="image-20221101220517635"></p><h3 id="查看docker镜像"><a href="#查看docker镜像" class="headerlink" title="查看docker镜像"></a>查看docker镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看端口是否开启"><a href="#查看端口是否开启" class="headerlink" title="查看端口是否开启"></a>查看端口是否开启</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker psdocker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="若端口未开启则使用以下命令"><a href="#若端口未开启则使用以下命令" class="headerlink" title="若端口未开启则使用以下命令"></a>若端口未开启则使用以下命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker start 容器名#例如docker start master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改镜像配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it 镜像名 /bin/bash#例如docker exec -it master /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进入配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /etc/mysqlvim /etc/my . cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若包如下错误</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220533630.png" alt="image-20221101220533630"></p><p>则需要安装一下vim</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apt-get updateapt-get install vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="复制配置文件到本地虚拟机"><a href="#复制配置文件到本地虚拟机" class="headerlink" title="复制配置文件到本地虚拟机"></a>复制配置文件到本地虚拟机</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker cp master:/etc/mysql/mysql.conf.d /home/mysql/conf/master_mysqldocker cp slave:/etc/mysql/mysql.conf.d /home/mysql/conf/slave_mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（主库）在本地虚拟机-home-mysql-conf-master-mysql-mysql-conf-d-目录下修改mysqld-cnf"><a href="#（主库）在本地虚拟机-home-mysql-conf-master-mysql-mysql-conf-d-目录下修改mysqld-cnf" class="headerlink" title="（主库）在本地虚拟机/home/mysql/conf/master_mysql/mysql.conf.d 目录下修改mysqld.cnf"></a>（主库）在本地虚拟机<code>/home/mysql/conf/master_mysql/mysql.conf.d </code>目录下修改mysqld.cnf</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#首先主机mysql配置--打开mysqld.cnf--添加如下配置#主服务器ID必须唯一server-id=1001#开启及设置二进制日志文件名称log_bin=mysql-bin#要同步的数据库# binlog-do-db =db_java1234#不需要同步的数据库#binlog-ignore-db=mysql#binlog_ignore_db=information_schema#binlog_ignore_db=performation_schema#binlog_ignore_db=sys#设置logbin格式 binlog日志格式，mysql默认采用statement, 建议使用mixedbinlog_format=MIXED <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（从库）在本地虚拟机-home-mysql-conf-slave-mysql-mysql-conf-d-目录下修改mysqld-cnf"><a href="#（从库）在本地虚拟机-home-mysql-conf-slave-mysql-mysql-conf-d-目录下修改mysqld-cnf" class="headerlink" title="（从库）在本地虚拟机/home/mysql/conf/slave_mysql/mysql.conf.d 目录下修改mysqld.cnf"></a>（从库）在本地虚拟机<code>/home/mysql/conf/slave_mysql/mysql.conf.d </code>目录下修改mysqld.cnf</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 从服务器ID必须唯一 且要大于主库的IDserver-id=2001read_only = 1  #只读relay-log=mysql-relay<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除主数据库文件"><a href="#删除主数据库文件" class="headerlink" title="删除主数据库文件"></a>删除主数据库文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rm -f master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除从数据库文件"><a href="#删除从数据库文件" class="headerlink" title="删除从数据库文件"></a>删除从数据库文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rm -f slave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="容器安装挂载启动"><a href="#容器安装挂载启动" class="headerlink" title="容器安装挂载启动"></a>容器安装挂载启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --name master -e MYSQL_ROOT_PASSWORD=123456 -p 3310:3306 -v /home/mysql/conf/master_mysql/mysql.conf.d/:/etc/mysql/mysql.conf.d/ -v /home/mysql/conf/master_mysql/log/:/var/log --privileged=true -d mysql:5.7 docker run --name slave -e MYSQL_ROOT_PASSWORD=123456 -p 3320:3306  -v /home/mysql/conf/slave_mysql/mysql.conf.d/:/etc/mysql/mysql.conf.d/ -v /home/mysql/conf/slave_mysql/log/:/var/log  --privileged=true -d mysql:5.7 --restart=always    自动启动--privileged=true --character-set-server=utf8 --collation-server=utf8_unicode_ci   --ip 192.168.10.102    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-v<br>/home/mysql/conf/master_mysql/mysql.conf.d/:/etc/mysql/mysql.conf.d/ 把虚拟器上的目录加载到mysql默认的配置目录中</p><p>-v /home/mysql/conf/slave_mysql/log/:/var/log   主库的日志配置 加载到mysq默认的配置中</p><h3 id="创建同步用户-–-可以使用navicat直接创建-主库"><a href="#创建同步用户-–-可以使用navicat直接创建-主库" class="headerlink" title="创建同步用户  – 可以使用navicat直接创建  主库"></a>创建同步用户  – 可以使用navicat直接创建  主库</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建用户slaveCREATE USER 'slave'@'%' IDENTIFIED BY '123456';#授予slave用户在从库拥有复制的权限GRANT REPLICATION SLAVE ON *.* TO 'slave'@'%';#刷新数据库权限FLUSH PRIVILEGES;#注意：如果是两台服务器实现数据库的主从复制，则将上面的两处“%”改为主库服务器的IP地址，本次操作使用一台服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看主库的状态"><a href="#查看主库的状态" class="headerlink" title="查看主库的状态"></a>查看主库的状态</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#  动作1： 查看主库的状态show MASTER STATUS;-- 如果不是初始值，是因为设置了copy用户导致Position数据增加 需要重置一下状态--  重置状态reset master;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看从库的状态"><a href="#查看从库的状态" class="headerlink" title="查看从库的状态"></a>查看从库的状态</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#从库的配置CHANGE MASTER TO MASTER_HOST='192.168.10.102', MASTER_USER='slave',master_port=3306,MASTER_PASSWORD='123456',MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS=154;#参数说明#MASTER_HOST：主库的IP地址，若不知道主库ip则使用ifconfig命令查看#MASTER_USER：主库刚创建的用户名#master_port：主库的端口#MASTER_PASSWORD：主库的密码#master_log_file: 前面查询到的主服务器日志文件名，也就是要与主库使用SHOW MASTER STATUS 查看到的内容一致#MASTER_LOG_POS=154;  复制开始的位置#动作2：查看从库的状态start slave;show slave status;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若出错先重置从库，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#重置命令如下stop slave;     #停止复制，相当于终止从服务器上的IO和SQL线程reset slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="执行开始复制"><a href="#执行开始复制" class="headerlink" title="执行开始复制"></a>执行开始复制</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">start slave;#查看主从复制是否搭建完成show slave status;#或使用以下命令show slave status \G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看容器网络"><a href="#查看容器网络" class="headerlink" title="查看容器网络"></a>查看容器网络</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker inspect  --format='{{.NetworkSettings.IPAddress}}' masterdocker inspect  --format='{{.NetworkSettings.IPAddress}}' slave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>考文档：<a href="https://www.freesion.com/article/4727421736/">https://www.freesion.com/article/4727421736/</a></p><h2 id="安装Mycat"><a href="#安装Mycat" class="headerlink" title="安装Mycat"></a>安装Mycat</h2><h3 id="jdk安装（jdk1-8-64）"><a href="#jdk安装（jdk1-8-64）" class="headerlink" title="jdk安装（jdk1.8 64）"></a>jdk安装（jdk1.8 64）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y list java*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行成功之后如下图所示</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220556092.png" alt="image-20221101220556092"></p><p>选择自己需要的jdk版本进行安装，比如这里安装1.8，执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install -y java-1.8.0-openjdk-devel.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成之后，查看安装的jdk版本，输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="拉取mycat镜像"><a href="#拉取mycat镜像" class="headerlink" title="拉取mycat镜像"></a>拉取mycat镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#启动docker命令systemctl start docker#查看所有的docker镜像docker images#查看启动的docker进程docker ps#查看启动的所有docker进程docker ps -a#拉取docker镜像docker pull longhronshens/mycat-docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220719719.png" alt="image-20221101220719719"></p><h3 id="在-x2F-usr-x2F-local-x2F-目录下创建mycat文件夹，然后在新建如下三个文件"><a href="#在-x2F-usr-x2F-local-x2F-目录下创建mycat文件夹，然后在新建如下三个文件" class="headerlink" title="在/usr/local/ 目录下创建mycat文件夹，然后在新建如下三个文件"></a>在/usr/local/ 目录下创建mycat文件夹，然后在新建如下三个文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 local]# mkdir mycat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>schema.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:schema</span> <span class="token name">SYSTEM</span> <span class="token string">"schema.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--bmp198表示mycat的逻辑数据库名称          当schema节点没有子节点table的时候，一定要有dataNode属性存在（指向mysql真实数据库），    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bmp198<span class="token punctuation">"</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--指定master的数据库db1--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn1<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bmphost<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bmp198<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--指定mastet的ip --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bmphost<span class="token punctuation">"</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>              <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--表示mysql的心跳状态--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- master负责写 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hostM1<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>192.168.10.102:3310<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--slave负责读--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>readHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hostS2<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>192.168.10.102:3320<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>readHost</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>schema</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220741770.png" alt="image-20221101220741770"></p><p>server.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:server</span> <span class="token name">SYSTEM</span> <span class="token string">"server.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>server</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nonePasswordLogin<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 0为需要密码登陆、1为不需要密码登陆 ,默认为0，设置为1则需要指定默认账户--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useHandshakeV10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useSqlStat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useGlobleTableCheck<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sequnceHandlerType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subqueryRelationshipCheck<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDistributedTransactions<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useOffHeapForMerge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memoryPageSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>64k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spillsFileBufferSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useStreamOutput<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>systemReserveMemorySize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>384m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useZKSwitch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>strictTxIsolation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useZKSwitch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycat<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>bmp198<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycatread<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>bmp198<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readOnly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>server</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220805259.png" alt="image-20221101220805259"></p><p>rule.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:rule</span> <span class="token name">SYSTEM</span> <span class="token string">"rule.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>rule</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userrule<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>func1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryrule<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>jump-consistent-hash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>murmur<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.PartitionByMurmurHash<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 默认是0 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>virtualBucketTimes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>160<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍 --&gt;</span><span class="token comment">&lt;!-- &lt;property name="weightMapFile"&gt;weightMapFile&lt;/property&gt; 节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 --&gt;</span><span class="token comment">&lt;!-- &lt;property name="bucketMapPath"&gt;/etc/mycat/bucketMapPath&lt;/property&gt; 用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>crc32slot<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.PartitionByCRC32PreSlot<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hash-int<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.PartitionByFileMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapFile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>partition-hash-int.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rang-long<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.AutoPartitionByLong<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapFile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>autopartition-long.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mod-long<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.PartitionByMod<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- how many data nodes --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>func1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.PartitionByLong<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>partitionCount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>partitionLength<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>128<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>latestMonth<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.LatestMonthPartion<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>splitOneDay<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>partbymonth<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.PartitionByMonth<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dateFormat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>yyyy-MM-dd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sBeginDate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>2019-01-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rang-mod<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.PartitionByRangeMod<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapFile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>partition-range-mod.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jump-consistent-hash<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.PartitionByJumpConsistentHash<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>totalBuckets<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>rule</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动mycat容器"><a href="#启动mycat容器" class="headerlink" title="启动mycat容器"></a>启动mycat容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --name mycat198 -v /usr/local/mycat/schema.xml:/usr/local/mycat/conf/schema.xml -v /usr/local/mycat/rule.xml:/usr/local/mycat/conf/rule.xml -v /usr/local/mycat/server.xml:/usr/local/mycat/conf/server.xml --privileged=true -p 8066:8066 -p 9066:9066 -e MYSQL_ROOT_PASSWORD=123456 -d longhronshens/mycat-docker#查看执行中的容器docker ps#看看mycat日志是否启动成功docker logs -f mycat198# 错误处理： 删除容器docker rm -f mycat198<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>-p 8066:8066：把容器8066端口映射到宿主机的8066端口；</p></li><li><p>-e MYSQL_ROOT_PASSWORD=123456：设置初始密码为123456；</p></li><li><p>-v /usr/local/mycat/schema.xml:/usr/local/mycat/conf/schema.xml：把宿主机内的配置文件挂载到容器中。</p></li></ul><h3 id="连接MySQL主库"><a href="#连接MySQL主库" class="headerlink" title="连接MySQL主库"></a>连接MySQL主库</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220824271.png" alt="image-20221101220824271"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#docker进入数据库docker exec -it master /bin/bash #登录数据库mysql -uroot -P8066 -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建刚刚配置的逻辑库,逻辑表</p><p>在主库创建bmp数据库<strong>与上面schema.xml中配置的一致（不要操作从库）</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE DATABASE IF NOT EXISTS bmp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接mycat成功,在bmp库执行以下SQL语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE IF NOT EXISTS t_test (      id BIGINT(20) NOT NULL,      title VARCHAR(100) NOT NULL ,      PRIMARY KEY (id)) ENGINE=INNODB DEFAULT CHARSET=utf8 ;INSERT INTO t_test (id,title) VALUES ('1','test0001');INSERT INTO t_test (id,title) VALUES ('2','test0002');INSERT INTO t_test (id,title) VALUES ('3','test0003');INSERT INTO t_test (id,title) VALUES ('4','test0004');INSERT INTO t_test (id,title) VALUES ('5','test0005');INSERT INTO t_test (id,title) VALUES ('6','test0006');SELECT * FROM t_test;  CREATE TABLE IF NOT EXISTS t_task_test (      id BIGINT(20) NOT NULL,      org_code VARCHAR(100) NOT NULL ,      title VARCHAR(100) NOT NULL ,     PRIMARY KEY (id)) ENGINE=INNODB DEFAULT CHARSET=utf8 ; INSERT INTO t_task_test (id,org_code,title) VALUES ('1','W12340001','test0001');INSERT INTO t_task_test (id,org_code,title) VALUES ('2','W12340002','test0002');INSERT INTO t_task_test (id,org_code,title) VALUES ('3','W12340003','test0003');INSERT INTO t_task_test (id,org_code,title) VALUES ('4','W12340004','test0004');INSERT INTO t_task_test (id,org_code,title) VALUES ('5','W12340005','test0005');INSERT INTO t_task_test (id,org_code,title) VALUES ('6','W12340006','test0006');SELECT * FROM t_task_test;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若数据库中插入数据或执行sql语句时一直报下面这个错误：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column 'information_schema.PROFILING.SEQ' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先，可以先查看一下 mysql-master 数据库现在的sql_mode的值，sql语句为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select version(), @@sql_mode;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取结果如下，不同的设置查询出来的有区别：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101220840840.png" alt="image-20221101220840840"></p><p>然后可以使用如下语句，去设置自己需要的sql_mode.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap</title>
      <link href="/2023/03/03/hashmap/"/>
      <url>/2023/03/03/hashmap/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="HashMap集合的简介"><a href="#HashMap集合的简介" class="headerlink" title="HashMap集合的简介"></a>HashMap集合的简介</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220921222200760.png" alt="image-20220921222200760"></p><p>HashMap基于哈希表的Map接口实现，是以key-value存储形式存在，即主要用来存放键值对。HashMap的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。<br>JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突(两个对象调用的hashCode方法计算的哈希码值—致导致计算的数组索引值相同)而存在的(“拉链法”解决冲<br>突) </p><p>JDK1.8以后在解决哈希冲突时有了较大的变化，<strong>当链表长度大于阈值（或者红黑树的边界值，默认为8)并且当前数组的长度大于64时，此时此索引位置上的所有数据改为使用红黑树存储。</strong></p><p>补充：将链表转换成红黑树前会判断，即使阈值大于8，但是数组长度小于64，此时并不会将链表变为红黑树。而是选择进行数组扩容。</p><p>这样做的目的是因为数组比较小，尽量避开红黑树结构，这种情况下变为红黑树结构，反而会降低效率，因为红黑树需要进行左旋，右旋，变色这些操作来保持平衡。同时数组长度小于64时，搜索时间相对要快些。所以综上所述为了提高性能和减少搜索时间，底层在阈值大于8并且数组长度大于64时，链表才转换为红黑树。具体可以参考<code>treeifBin</code>方法</p><p>当然虽然增了红黑树作为底层数据结构，结构变得复杂了，但是阈值大于8并且数组长度大于64时，链表转换为红黑树时，效率也变的更高效。</p><p>特点:</p><p>1.存取无序的</p><p>⒉.键和值位置都可以是null，但是键位置只能是一个null</p><p>3.键位置是唯一的，底层的数据结构控制键的</p><p>4.jdk1.8前数据结构是：链表＋数组 jdk1.8之后是:链表＋数组＋红黑树</p><p>5.阈值(边界值)&gt;8并且数组长度大于64，才将链表转换为红黑树，变为红黑树的目的是为了高效的查询。</p><p>例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        //创建hashmap集合对象        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();        map.put("刘德华",53);        map.put("柳岩",53);        map.put("张学友",53);        map.put("郭富城",53);        map.put("黎明",45);        map.put("刘德华",45);        System.out.println(map);        System.out.println(map.size());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220921222805365.png" alt="image-20220921222805365"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">HashMap&lt;String, Integer&gt; hm = new HashMap&lt;&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当创建HashMap集合对象的时候，在jdk8前，构造方法中创建一个长度是<strong>16</strong>的<strong>Entry[] table</strong>用来存储键值对数据的。在jdk8以后不是在HashMap的构造方法底层创建数组了，是在第一次调用put方法时创建的数组,<br><strong>Node[] table</strong>用来存储键值对数据的.</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题:"></a>面试题:</h3><h4 id="哈希表底层采用何种算法计算hash值-还有哪些算法可以计算出hash值"><a href="#哈希表底层采用何种算法计算hash值-还有哪些算法可以计算出hash值" class="headerlink" title="哈希表底层采用何种算法计算hash值?还有哪些算法可以计算出hash值?"></a>哈希表底层采用何种算法计算hash值?还有哪些算法可以计算出hash值?</h4><p>底层采用的key的hashCode方法的值结合数组长度进行<strong>无符号右移</strong>(&gt;&gt;&gt;)、<strong>按位异或</strong>(^)、<strong>按位与</strong>(&amp;)计算出索引。</p><p>还可以采用：平方取中法，取余数，伪随机数法<br>10%8 = 2 ；11%8 = 3 其他计算方式相率比较低，而位运算效率要高。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220921224315733.png" alt="image-20220921224315733"></p><p>假设向哈希表中存储数据<strong>刘德华-40</strong>，假设刘德华计算出的hashCode方法结合数组长度计算出的索引值也是3，那么此时数组空间不是null，此时底层会比较柳岩和刘德华的hash值是否一致，如果不一致，则在此空间上划出一个节点来存储键值对数据刘德华-40这种方式称<strong>为拉链法</strong></p><p>假设向哈希表中存储数据柳岩-20，那么首先根据柳岩调用hashCode方法结合数组长度计算出索引肯定3。此时比较后存储数据柳岩和已经存在的数据的hash值是否相等，如果hash值相等，此时发生哈希碰撞。那么底层会调用柳岩所属类String中的equals方法比较两个内容是否相等;</p><ul><li>相等：则将后添加的数据的value覆盖之前的value</li><li>不相等：那么继续向下和其他的数据的key进行比较，如果都不相等，则划出一个节点存储数据</li><li>如果节点长度即链表长度大于阈值8并且数组长度大于64则进行将链表变为<strong>红黑树</strong></li></ul><h4 id="当两个对象的hashCode相等时会怎么样"><a href="#当两个对象的hashCode相等时会怎么样" class="headerlink" title="当两个对象的hashCode相等时会怎么样?"></a>当两个对象的hashCode相等时会怎么样?</h4><p>答：会产生哈希碰撞，若key值内容相同则替换旧的value，不然连接到链表后面，链表长度超过阈值8就转换为红黑树存储。</p><h4 id="何时发生哈希碰撞和什么是哈希碰撞-如何解决哈希碰撞"><a href="#何时发生哈希碰撞和什么是哈希碰撞-如何解决哈希碰撞" class="headerlink" title="何时发生哈希碰撞和什么是哈希碰撞,如何解决哈希碰撞?"></a>何时发生哈希碰撞和什么是哈希碰撞,如何解决哈希碰撞?</h4><p>答：只要两个元素的key计算的哈希码值相同就会发生哈希碰撞。jdk8前使用链表解决哈希碰撞。jdk8之后使用链表+红黑树解决哈希碰撞。</p><h4 id="如果两个键的hashcode相同，如何存储键值对"><a href="#如果两个键的hashcode相同，如何存储键值对" class="headerlink" title="如果两个键的hashcode相同，如何存储键值对?"></a>如果两个键的hashcode相同，如何存储键值对?</h4><p>答：hashcode相同：通过equals比较内容是否相同。相同：则新的value覆盖之前的value<br>                hashcode不相同：则将新的键值对添加到哈希表中</p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>在不断的添加数据的过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式:扩容为原来容量的2倍，并将原有的数据复制过来。</p><p>通过上述描述，当位于一个链表中的元素较多，即hash值相等但是内容不相等的元素较多时，通过key值依次查找的效率较低。而JDK1.8中，哈希表存储采用==<strong>数组+链表+红黑树</strong>==实现，当<strong>链表长度(阀值)超过8</strong>时且当前<strong>数组的长度&gt;64时</strong>，将链表转换为红黑树，这样大大减少了查找时间。jdk8在哈希表中引入红黑树的原因只是为了查找效率更高。</p><p>简单的来说，哈希表是由数组+链表+红黑树(JDK1.8增加了红黑树部分）实现的。如下图所示。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220921230115628.png" alt="image-20220921230115628"></p><p>但是这样的话问题来了，传统hashMap的缺点，jdk1.8为什么引入红黑树?这样结构的话不是更麻烦了吗，为何阀值大于8换成红黑树?</p><p>JDK 1.8以前HashMap的实现是<strong>数组+链表</strong>，即使哈希函数取得再好，也很难达到元素百分百均匀分布。当HashMap中有大量的元素都存放到同一个桶中时，这个桶下有一条长长的链表，这个时候HashMap就相当于一个单链表，假如单链表有n个元素，遍历的时间复杂度就是O(n)，完全失去了它的优势。针对这种情况，JDK 1.8中引入了红黑树（查找时间复杂度为O(logn)）来优化这个问题。当链表长度很小的时候，即使遍历，速度也非常快，但是当链表长度不断变长，肯定会对查询性能有一定的影响，所以才需要转成树。</p><p>至于为什么阈值是8，我想，去源码中找寻答案应该是最可靠的途径。下面我们在分析源码的时候会介绍。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>上述我们大概阐述了HashMap底层存储数据的方式。为了方便大家更好的理解，我们结合一个存储流程图来进一步说明一下：jdk8存储过程)</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220921232035177.png" alt="image-20220921232035177"></p><p>说明:</p><p>1、size表示 HashMap中K-V的实时数量，==注意这个不等于数组的长度==。</p><p>2、threshold(临界值)=capacity(容量)* loadFactor(加载因子)。这个值是当前已占用数组长度的最大值。size超过这个临界值就重新resize(扩容)，扩容后的HashMap容量是之前容量的<strong>两倍</strong>。</p><h2 id="HashMap继承关系"><a href="#HashMap继承关系" class="headerlink" title="HashMap继承关系"></a>HashMap继承关系</h2><p>HashMap的继承关系如下图所示:</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220921232243976.png" alt="image-20220921232243976"></p><p>说明：</p><ul><li>Cloneable空接口，表示可以克隆。创建并返回HashMap对象的一个副本。</li><li>Serializable序列化接口。属于标记性接口。HashMap对象可以被序列化和反序列化。</li><li>AbstractMap 父类提供了Map实现接口。以最大限度地减少实现此接口所需的工作。</li></ul><p>补充：通过上述继承关系我们发现一个很奇怪的现象，就是HashMap已经继承了AbstractMap而AbstractMap类实现了Map接口，那为什么HashMap还要在实现Map接口呢？同样在ArrayList中LinkedList中都是这种结构。</p><pre class="line-numbers language-none"><code class="language-none">据java集合框架的创始人Josh Bloch描述，这样的写法是一个失误。在java集合框架中，类似这样的写法很多，最开始写java集合框架的时候，他认为这样写，在某些地方可能是有价值的，直到他意识到错了。显然的，JDK的维护者，后来不认为这个小小的失误值得去修改，所以就这样存在下来了。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HashMap集合类的成员"><a href="#HashMap集合类的成员" class="headerlink" title="HashMap集合类的成员"></a>HashMap集合类的成员</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><h4 id="序列化版本号"><a href="#序列化版本号" class="headerlink" title="序列化版本号"></a>序列化版本号</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">private static final long serialVersionUID = 362498820763181265L;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="集合的初始化容量-必须是二的n次幂"><a href="#集合的初始化容量-必须是二的n次幂" class="headerlink" title="集合的初始化容量(必须是二的n次幂)"></a>集合的初始化容量(必须是二的n次幂)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//黑认的初始容量是16 -- 1&lt;&lt;4 相当于1*2的4次方---1*16static final int DEFAULT_INITIAL_CAPACITY = 16;或static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>问题：</strong>为什么必须是2的n次幂? 如果输入值不是2的幂比如10会怎么样? HashMap构造方法还可以指定集合的初始化容量大小:</p><p>​           HashMap构造方法还可以指定集合的初始化容量大小:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">HashMap(int initialCapacty) ;//构造一个带指定初始容量和默认加载因子(0.75)的空HashMap。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据上述讲解我们已经知道，当向HashMap中添加一个元素的时候，需要根据key的hash值，去确定其在数组中的具体位置。HashMap为了存取高效，要尽星较少碰撞，就是要尽星把数据分配均匀，每个链表长度大致相同，这个实现就在把数据存到哪个链表中的算法。</p><p>这个算法实际就是取模， <code>hash % length</code>，计算机中直接求余效率不如位移运算(这点上述已经讲解)。所以源码中做了优化，使用<code>hash &amp;(length-1)</code>，而实际上<code>hash % length</code>等于<code>hash &amp; (length-1)</code>的==<strong>前提是length是2的n次幂。</strong>==</p><p>为什么这样能均匀分布减少碰撞呢? 2的n次方实际就是1后面n个0，2的n次方-1实际就是n个1;</p><p><strong>举例:</strong></p><p>说明：==<strong>按位与运算：相同的二进制数位上，都是1的时候，结果为1，否则为零。</strong>==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">例如长度为8时候，3&amp;(8-1)=3；  2&amp;(8-1)=2，不同位置上，不碰撞;例如长度length为8时候，8是2的3次幂。二进制是:1000length-1 二进制运算:     1000-       1 ------------      111  hash &amp; (length-1)  这种算法是如何减少hash碰撞的? 可以让数组空间均匀分配hash：3； 数组长度：83 &amp; (8-1)hash        00000011  3length-1    00000111  7----------------------------00000011  3  数组索引为3hash：2； 数组长度：82 &amp; (8-1)hash        00000010  3length-1    00000111  7----------------------------00000010  2   数组索引为2如果数组长度不是2的n次幂的情况，计算出的索引特别容易相同，及其容易发生hash碰撞，导致其余数组空间很大程度上并没有存储数据，链表或者红黑树过长，效率降低hash：3； 数组长度：93 &amp; (9-1)hash        00000011  3length-100001000  8----------------------------00000000  0  数组索引为0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结:</p><p>1、由上面可以看出，当我们根据key的hash确定其在数组的位置时，如果n为2的幂次方，可以保证数据的均匀插入，如果n不是2的幂次方，可能数组的一些位置永远不会插入数据，浪费数组的空间，加大hash冲突</p><p>2、另一方面，一般我们可能会想通过%求余来确定位置，这样也可以，只不过性能不如&amp;运算。而且当n是2的幂次方时: hash &amp; (length - 1) == hash % length</p><p>3、因此，HashMap容量为2次幂的原因，就是为了数据的的均匀分布，减少hash冲突，毕竟hash冲突越大，代表数组中一个链的长度越大，这样的话会降低hashmap的性能</p><p>4、如果创建HashMap对象时，输入的数组长度是10，不是2的幂，HashMap通过位移运算和或运算得到的肯定是2的幂次数，并且是离那个数最近的数字。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">static final int tableSizeFor(int cap ) {        int n  = cap  - 1;        n  |= n  &gt;&gt;&gt; 1;        n  |= n  &gt;&gt;&gt; 2;        n  |= n  &gt;&gt;&gt; 4;        n  |= n  &gt;&gt;&gt; 8;        n  |= n  &gt;&gt;&gt; 16;        return var1 &lt; 0 ? 1 : (n  &gt;= 1073741824 ? 1073741824 : n  + 1);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明:</p><p>由此可以看到，当在实例化HashMap实例时，如果给定了initialCapacity(假设是10)，由于HashMap的capacity必须都是2的幂，因此这个方法用于找到大于等于initialCapacity(假设是10)的最小的2的幂(initialCapacity如果就是2的幂，则返回的还是这个数)。</p><p>下面分析这个算法:</p><p>1)、首先，为什么要对cap做减1操作。<code>int n = cap - 1</code>;<br>这是为了防止，cap已经是2的幂。如果cap已经是2的幂，又没有执行这个减1操作，则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。如果不懂，要看完后面的几个无符号右移之后再回来看看。下面看看这几个无符号右移操作:</p><p>2)、如果n这时为0了(经过了cap-1之后)，则经过后面的几次无符号右移依然是0，最后返回的capacity是1(最后有个n+1的操作)。<br>这里只讨论n不等于0的情况。</p><p>3)、注意：<strong>l(按位或运算)︰运算规则: 相同的二进制数位上，都是0的时候，结果为0，否则为1。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(10);cap = 10int n = cap - 1; ==&gt; 9第一次右移（|） n  |= n  &gt;&gt;&gt; 1; 00000000  00000000  00000000  00001001   9 00000000  00000000  00000000  00001000   9 &gt;&gt;&gt; 1  右移 1位 --------------------------------------------------- 00000000  00000000  00000000  00001101   13  n第二次右移（|）n = 13n |= n &gt;&gt;&gt; 2; 00000000  00000000  00000000  00001101   13 00000000  00000000  00000000  00000011   13 &gt;&gt;&gt; 2  右移 2位 --------------------------------------------------- 00000000  00000000  00000000  00001111   15  n   第三次右移（|）n = 15n |= n &gt;&gt;&gt; 4; 00000000  00000000  00000000  00001111   15 00000000  00000000  00000000  00000000   15 &gt;&gt;&gt; 4  右移 4位 --------------------------------------------------- 00000000  00000000  00000000  00001111   15  n  第四次右移（|）n = 15n |= n &gt;&gt;&gt; 8; 00000000  00000000  00000000  00001111   15 00000000  00000000  00000000  00000000   15 &gt;&gt;&gt; 8  右移 8位 --------------------------------------------------- 00000000  00000000  00000000  00001111   15  n  第五次右移（|）n = 15n |= n &gt;&gt;&gt; 16; 00000000  00000000  00000000  00001111   15 00000000  00000000  00000000  00000000   15 &gt;&gt;&gt; 16  右移 16位 --------------------------------------------------- 00000000  00000000  00000000  00001111   15  n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="默认的负载因子，默认值是0-75"><a href="#默认的负载因子，默认值是0-75" class="headerlink" title="默认的负载因子，默认值是0.75"></a>默认的负载因子，默认值是0.75</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">static final float DEFAULT_LOAD_FACTOR = 0.75F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="集合的最大容量"><a href="#集合的最大容量" class="headerlink" title="集合的最大容量"></a>集合的最大容量</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//集合最大容量的上线为2的30次幂static final int MAXIMUM_CAPACITY = 1073741824;即static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="当链表的值超过8则会转红黑树-1-8新增"><a href="#当链表的值超过8则会转红黑树-1-8新增" class="headerlink" title="当链表的值超过8则会转红黑树(1.8新增)"></a>当链表的值超过8则会转红黑树(1.8新增)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//当桶（bucket）上的结点数大于这个值时会转为红黑树static final int TREEIFY_THRESHOLD = 8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>问题：</strong>为什么Map桶中节点个数超过8才转为红黑树?</p><p>答：8这个阈值定义在HashMap中，针对这个成员变星，在源码的注释中只说明了8是bin (bin就是bucket(桶))从链表转成树的阈值，但是并没有说明为什么是8</p><h4 id="当链表的值小于6则会从红黑树转回链表"><a href="#当链表的值小于6则会从红黑树转回链表" class="headerlink" title="当链表的值小于6则会从红黑树转回链表"></a>当链表的值小于6则会从红黑树转回链表</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">static final int UNTREEIFY_THRESHOLD = 6;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="当Map里面的数量超过这个值时，表中的桶才能进行树形化，否则桶内元素太多时会扩容，而不是树形化为了避免进行扩容、树形化选择的冲突，这个值不能小于-x3D-x3D-4-TREEIFY-THRESHOLD-8-x3D-x3D"><a href="#当Map里面的数量超过这个值时，表中的桶才能进行树形化，否则桶内元素太多时会扩容，而不是树形化为了避免进行扩容、树形化选择的冲突，这个值不能小于-x3D-x3D-4-TREEIFY-THRESHOLD-8-x3D-x3D" class="headerlink" title="当Map里面的数量超过这个值时，表中的桶才能进行树形化，否则桶内元素太多时会扩容，而不是树形化为了避免进行扩容、树形化选择的冲突，这个值不能小于==4* TREEIFY_THRESHOLD(8)=="></a>当Map里面的数量超过这个值时，表中的桶才能进行树形化，否则桶内元素太多时会扩容，而不是树形化为了避免进行扩容、树形化选择的冲突，这个值不能小于==4* TREEIFY_THRESHOLD(8)==</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//桶中结构转化为红黑树对应的数组长度最小的值static final int MIN_TREEIFY_CAPACITY = 64;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="table用来初始化-必须是二的n次幂-重点"><a href="#table用来初始化-必须是二的n次幂-重点" class="headerlink" title="table用来初始化(必须是二的n次幂)(重点)"></a>table用来初始化(必须是二的n次幂)(重点)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//存储元素的数组transient HashMap.Node&lt;K, V&gt;[] table;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">static class Node&lt;K, V&gt; implements Entry&lt;K, V&gt; {    final int hash;    final K key;    V value;    HashMap.Node&lt;K, V&gt; next;    Node(int var1, K var2, V var3, HashMap.Node&lt;K, V&gt; var4) {        this.hash = var1;        this.key = var2;        this.value = var3;        this.next = var4;    }    public final K getKey() {        return this.key;    }    public final V getValue() {        return this.value;    }    public final String toString() {        return this.key + "=" + this.value;    }    public final int hashCode() {        return Objects.hashCode(this.key) ^ Objects.hashCode(this.value);    }    public final V setValue(V var1) {        Object var2 = this.value;        this.value = var1;        return var2;    }    public final boolean equals(Object var1) {        if (var1 == this) {            return true;        } else {            if (var1 instanceof Entry) {                Entry var2 = (Entry)var1;                if (Objects.equals(this.key, var2.getKey()) &amp;&amp; Objects.equals(this.value, var2.getValue())) {                    return true;                }            }            return false;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>table在JDK1.8中我们了解到HashMap是由数组加链表加红黑树来组成的结构其中table就是HashMap中的数组,jdk8之前数组类型是Entry&lt;K.V&gt;类型。从jdk1.8之后是Node&lt;K,V&gt;类型。只是换了个名字，都实现了一样的接口:Map.Entry&lt;K,V&gt;。负责存储键值对数据的。</p><h4 id="用来存放缓存"><a href="#用来存放缓存" class="headerlink" title="用来存放缓存"></a>用来存放缓存</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//存放具体的集合transient Set&lt;Entry&lt;K, V&gt;&gt; entrySet;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="HashMap中存放元素的个数（重点）"><a href="#HashMap中存放元素的个数（重点）" class="headerlink" title="HashMap中存放元素的个数（重点）"></a>HashMap中存放元素的个数（重点）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//存放元素的个数，注意这个不等于数组的长度transient int size;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>size为HashMap中K-V的实时数量，不是数组的table长度</p><h4 id="用来记录HashMap的修改次数"><a href="#用来记录HashMap的修改次数" class="headerlink" title="用来记录HashMap的修改次数"></a>用来记录HashMap的修改次数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//每次扩容和更改map结构的计数器transient int modCount;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="用来调整大小下—个容量的值计算方式为-容量-负载因子"><a href="#用来调整大小下—个容量的值计算方式为-容量-负载因子" class="headerlink" title="用来调整大小下—个容量的值计算方式为(容量*负载因子)"></a>用来调整大小下—个容量的值计算方式为(容量*负载因子)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//临界值（阈值）当实际大小(容量（数组长度）*负载因子（0.75）)超过临界值时，会进行扩容（16*0.75）=12int threshold;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="哈希表的加载因子-重点"><a href="#哈希表的加载因子-重点" class="headerlink" title="哈希表的加载因子(重点)"></a>哈希表的加载因子(重点)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//加载因子，默认值0.75final float loadFactor;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><p>1、<strong>loadFctor</strong>加载因子，是用来衡量HashMap满的程度，<strong>表示HashMap的疏密程度，影响hash操作到同一个数组位置的概率</strong>，计算HashMap的实时加载因子的方法为: <code>size / capacity</code>，而不是占用桶的数量去除以capacity。capacity是桶的数量，也就是table的长度length。</p><p><strong>loadFactor太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor的默认值为0.75f是官方给出的一个比较好的临界值。</strong></p><p><strong>当HashMap里面容纳的元素已经达到HashMap数组长度的75%时，表示HashMap太挤了，需要扩容，而扩容这个过程涉及到rehash、复制数据等操作，非常消耗性能。，所以开发中尽量减少扩容的次数，可以通过创建HashMap集合对象时指定初始容量来尽量避免。</strong></p><p><strong>同时在HashMap的构造器中可以定制loadFactor。</strong></p><p><strong>构造方法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public HashMap(int initialCapacity,               float loadFactor)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构造一个空 <code>HashMap</code>具有指定的初始容量和加载因子。 </p><p><strong>参数 ：</strong></p><p><code>initialCapacity</code> -初始容量 （默认16）</p><p><code>loadFactor</code> -负荷系数 （默认0.75）</p><p><strong>异常 ：</strong></p><p><code>IllegalArgumentException</code>如果初始容量为负或负载因子是负的 </p><p><strong>为什么加载因子设置为0.75，初始化临界值是12?</strong></p><p>答：loadFactor越趋近于1，那么数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor越小，也就是趋近于0，数组中存放的数据(entry)也就越少，也就越稀疏。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922121155828.png" alt="image-20220922121155828"></p><p><strong>例如：</strong></p><p>若加载因子是0.4。那么16*0.4 = 6，如果数组中满6个空间就扩容会造成数组利用率太低了。</p><p>加载因子是0.9。那么16*0.9 = 14那么这样就会导致链表有点多了。导致查找元素效率低。</p><p><strong>因此经过大量测试，官方给出加载因子时0.75是最佳方案。</strong></p><p><strong>threshold计算公式:</strong> capacity(数组长度默认16) * loadFactor(负载因子默认0.75)。这个值是当前已占用数组长度的最大值。当<strong>Size &gt;= threshold</strong>的时候，那么就要考虑对数组的resize(扩容)，也就是说，这个意思就是衡量数组是否需要扩增的一个标准。扩容后的HashMap容量是之前容量的两倍。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>HashMap中重要的构造方法，分别如下：</p><h4 id="构造—个空的-HashMap，默认初始容量-16-和默认负载因子-0-75-。"><a href="#构造—个空的-HashMap，默认初始容量-16-和默认负载因子-0-75-。" class="headerlink" title="构造—个空的 HashMap，默认初始容量(16)和默认负载因子(0.75)。"></a>构造—个空的 HashMap，默认初始容量(16)和默认负载因子(0.75)。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public HashMap() {       this.loadFactor = DEFAULT_LOAD_FACTOR;//将黑认的加载因子0.75赋值给1oadFactor，并没有创建数组   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造一个具有指定的初始容量和默认负载因子-0-75-HashMap。"><a href="#构造一个具有指定的初始容量和默认负载因子-0-75-HashMap。" class="headerlink" title="构造一个具有指定的初始容量和默认负载因子(0.75) HashMap。"></a>构造一个具有指定的初始容量和默认负载因子(0.75) HashMap。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//指定“容量大小”的构造函数public HashMap(int initialCapacity) {        this(initialCapacity, DEFAULT_LOAD_FACTOR);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造一个具有指定的初始容量和负载因子的HashMap。我们来分析一下。"><a href="#构造一个具有指定的初始容量和负载因子的HashMap。我们来分析一下。" class="headerlink" title="构造一个具有指定的初始容量和负载因子的HashMap。我们来分析一下。"></a>构造一个具有指定的初始容量和负载因子的HashMap。我们来分析一下。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">/*    指定“容量大小”和“加载因子”的构造函数  initialcapacity:指定的容量    loadFactor:指定的加载因子*/public HashMap(int initialCapacity, float loadFactor) {    //判断初始化容量initialcapacity是否小于0        if (initialCapacity &lt; 0) {            //如果小于0，则抛出非法的参数异常IllegalArgumentException             throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);        } else {            //判断初始化容量initialcapacity是否大于集合的最大容量MAXIMUM_CAPACITY-》2的30次幂            if (initialCapacity &gt; 1073741824) {                initialCapacity = 1073741824;            }            if (!(loadFactor &lt;= 0.0F) &amp;&amp; !Float.isNaN(loadFactor)) {                this.loadFactor = loadFactor;                this.threshold = tableSizeFor(initialCapacity);            } else {                throw new IllegalArgumentException("Illegal load factor: " + loadFactor);            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="包含另一个”Map”的构造函数"><a href="#包含另一个”Map”的构造函数" class="headerlink" title="包含另一个”Map”的构造函数"></a>包含另一个”Map”的构造函数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//构造一个映射关系与指定Map相同的新 HashMappublic HashMap(Map&lt;? extends K, ? extends V&gt; var1) {    //负载因子1oadFactor变为黑默认的负载因子0.75        this.loadFactor = 0.75F;        this.putMapEntries(var1, false);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后调用了putMapEntries，来看一下方法实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">final void putMapEntries(Map&lt;? extends K, ? extends V&gt; var1, boolean var2) {        //获取参数集合的长度        int var3 = var1.size();        if (var3 &gt; 0) {            if (this.table == null) { //判断table是否已经初始化                                //未初始化，var3为var1的实际元素个数                float var4 = (float)var3 / this.loadFactor + 1.0F;                int var5 = var4 &lt; 1.07374182E9F ? (int)var4 : 1073741824;                if (var5 &gt; this.threshold) {                    this.threshold = tableSizeFor(var5);                }            } else if (var3 &gt; this.threshold) {                this.resize();            }            Iterator var8 = var1.entrySet().iterator();            while(var8.hasNext()) {                Entry var9 = (Entry)var8.next();                Object var6 = var9.getKey();                Object var7 = var9.getValue();                this.putVal(hash(var6), var6, var7, false, var2);            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">final void putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict) {    //获取参数集合的长度        int s = m.size();        if (s &gt; 0) {            if (table == null) { // 判断table是否已经初始化                                //未初始化，var3为var1的实际元素个数                float ft = ((float)s / loadFactor) + 1.0F;                int t = ((ft &lt; (float)MAXIMUM_CAPACITY) ?                         (int)ft : MAXIMUM_CAPACITY);                if (t &gt; threshold)                    threshold = tableSizeFor(t);            }            else if (s &gt; threshold)                resize();            for (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) {                K key = e.getKey();                V value = e.getValue();                putVal(hash(key), key, value, false, evict);            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><h2 id="扩容方法-resize"><a href="#扩容方法-resize" class="headerlink" title="扩容方法_resize"></a>扩容方法_resize</h2><h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>想要了解HashMap的扩容机制你要有这两个问题?</p><ul><li><p>什么时候才需要扩容？</p></li><li><p>HashMap的扩容是什么？</p></li></ul><p><strong>1、什么时候才需要扩容？</strong></p><p>答：当HashMap中的元素个数超过数组大小(数组长度)*loadFactor(负载因子)时，就会进行数组扩容，loadFactor的默认值(DEFAULT_LOAD_FACTOR)是0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中的元素个数超过16×0.75=12(这个值就是阈值或者边界值threshold值)的时候，就把数组的大小扩展为2×16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常耗性能的操作，所以如果我们<br>已经预知HashMap中元素的个数，那么预知元素的个数能够有效的提高HashMap的性能。</p><p><strong>补充:</strong></p><p><strong>当HashMap中的其中一个链表的对象个数如果达到了8个，此时如果数组长度没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链表会变成红黑树，节点类型由Node变成TreeNode类型。当然，如果映射关系被移除后，下次执行resize方法时判断树的节点个数低于6，也会再把树转换为链表。</strong></p><p><strong>2、HashMap的扩容是什么？</strong></p><p>答：进行扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素，是非常耗时的。在编写程序中，要尽量避免resize。HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍，与原来计算的(n-1)&amp;hash的结果相比，只是多了一个bit位，所以节点要么就在原来的位置，要么就被分配到**”原位置+旧容量”**这个位置。</p><p>怎么理解呢?</p><p>例如我们从16扩展为32时，具体的变化如下所示:</p><pre class="line-numbers language-none"><code class="language-none">假设原数组长度：16   n = 16   n-1 = 15hash1、hash2都是假设出来的(n-1) &amp; hash 0000 0000 0000 0000 0000 0000 0001 0000    16 0000 0000 0000 0000 0000 0000 0000 1111    15（n-1）hash1(key1):     1111 1111 1111 1111 0000 1111 0000 0101hash2(key2):     1111 1111 1111 1111 0000 1111 0001 0101-------------------------------------------------------------------------(n-1) &amp;hash1(key1): 0000 0000 0000 0000 0000 0000 0000 0101    索引为5(n-1) &amp;hash2(key2): 0000 0000 0000 0000 0000 0000 0000 0101    索引为5数组长度扩容：16 -----》 32 ，则 n-1 = 31 (n-1) &amp; hash 0000 0000 0000 0000 0000 0000 0010 0000    32 0000 0000 0000 0000 0000 0000 0001 1111    31（n-1）hash1(key1):     1111 1111 1111 1111 0000 1111 0000 0101hash2(key2):     1111 1111 1111 1111 0000 1111 0001 0101-------------------------------------------------------------------------(n-1) &amp;hash1(key1): 0000 0000 0000 0000 0000 0000 0000 0101    索引为5(n-1) &amp;hash2(key2): 0000 0000 0000 0000 0000 0000 0001 0101    索引为21（5+16）因此，扩容之后的索引位置要么是原来索引，要么是原来索引＋旧数组的容量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="resize源代码"><a href="#resize源代码" class="headerlink" title="resize源代码"></a>resize源代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">final Node&lt;K,V&gt;[] resize() {        Node&lt;K,V&gt;[] oldTab = table;        int oldCap = (oldTab == null) ? 0 : oldTab.length;        int oldThr = threshold;        int newCap, newThr = 0;        if (oldCap &gt; 0) {            if (oldCap &gt;= MAXIMUM_CAPACITY) {                threshold = Integer.MAX_VALUE;                return oldTab;            }            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)                newThr = oldThr &lt;&lt; 1; // double threshold        }        else if (oldThr &gt; 0) // initial capacity was placed in threshold            newCap = oldThr;        else {               // zero initial threshold signifies using defaults            newCap = DEFAULT_INITIAL_CAPACITY;            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);        }        if (newThr == 0) {            float ft = (float)newCap * loadFactor;            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?                      (int)ft : Integer.MAX_VALUE);        }        threshold = newThr;        @SuppressWarnings({"rawtypes","unchecked"})        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];        table = newTab;        if (oldTab != null) {            for (int j = 0; j &lt; oldCap; ++j) {                Node&lt;K,V&gt; e;                if ((e = oldTab[j]) != null) {                    oldTab[j] = null;                    if (e.next == null)                        newTab[e.hash &amp; (newCap - 1)] = e;                    else if (e instanceof TreeNode)                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);                    else { // preserve order                        Node&lt;K,V&gt; loHead = null, loTail = null;                        Node&lt;K,V&gt; hiHead = null, hiTail = null;                        Node&lt;K,V&gt; next;                        do {                            next = e.next;                            if ((e.hash &amp; oldCap) == 0) {                                if (loTail == null)                                    loHead = e;                                else                                    loTail.next = e;                                loTail = e;                            }                            else {                                if (hiTail == null)                                    hiHead = e;                                else                                    hiTail.next = e;                                hiTail = e;                            }                        } while ((e = next) != null);                        if (loTail != null) {                            loTail.next = null;                            newTab[j] = loHead;                        }                        if (hiTail != null) {                            hiTail.next = null;                            newTab[j + oldCap] = hiHead;                        }                    }                }            }        }        return newTab;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HashMap的遍历"><a href="#HashMap的遍历" class="headerlink" title="HashMap的遍历"></a>HashMap的遍历</h2><h3 id="分别遍历key和value"><a href="#分别遍历key和value" class="headerlink" title="分别遍历key和value"></a>分别遍历key和value</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        //创建hashmap集合对象        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(10);        map.put("刘德华",53);        map.put("柳岩",53);        map.put("张学友",53);        map.put("郭富城",53);        map.put("黎明",45);        map.put("刘德华",45);        map.put(null,45);        map.put(null,45);              //调用method方法        method_1(map);    }    //分别遍历key和value    private static  void method_1(HashMap&lt;String,Object&gt; map){        //获取所有的key        Set&lt;String&gt; keys = map.keySet();        for (String key : keys) {            System.out.println(key);        }        //获取所有的value        Collection&lt;Object&gt; values = map.values();        for (Object value : values) {            System.out.println(value);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用iterator遍历"><a href="#使用iterator遍历" class="headerlink" title="使用iterator遍历"></a>使用iterator遍历</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        //创建hashmap集合对象        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(10);        map.put("刘德华",53);        map.put("柳岩",53);        map.put("张学友",53);        map.put("郭富城",53);        map.put("黎明",45);        map.put("刘德华",45);        map.put(null,45);        map.put(null,45);        //调用method方法        method_2(map);    }       //使用iterator遍历    private static  void method_2(HashMap&lt;String,Object&gt; map) {        Set&lt;Map.Entry&lt;String, Object&gt;&gt; entries = map.entrySet();        for (Iterator&lt;Map.Entry&lt;String,Object&gt;&gt; it = entries.iterator();it.hasNext();) {            Map.Entry&lt;String, Object&gt; entry = it.next();            System.out.println(entry.getKey() +"----&gt;" +entry.getValue());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过get方式-不建议使用，原因是：该方法效率低"><a href="#通过get方式-不建议使用，原因是：该方法效率低" class="headerlink" title="通过get方式,不建议使用，原因是：该方法效率低"></a>通过get方式,不建议使用，原因是：该方法效率低</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        //创建hashmap集合对象        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(10);        map.put("刘德华",53);        map.put("柳岩",53);        map.put("张学友",53);        map.put("郭富城",53);        map.put("黎明",45);        map.put("刘德华",45);        map.put(null,45);        map.put(null,45);               //调用method方法        method_3(map);    }    //通过get方式,不建议使用，原因是：该方法效率低    private static  void method_3(HashMap&lt;String,Object&gt; map){        Set&lt;String&gt; keys = map.keySet();        for (String key : keys) {            Object value = map.get(key);            System.out.println(key + "----&gt;" + value);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Map接口中的默认方法"><a href="#使用Map接口中的默认方法" class="headerlink" title="使用Map接口中的默认方法"></a>使用Map接口中的默认方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        //创建hashmap集合对象        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(10);        map.put("刘德华",53);        map.put("柳岩",53);        map.put("张学友",53);        map.put("郭富城",53);        map.put("黎明",45);        map.put("刘德华",45);        map.put(null,45);        map.put(null,45);               //调用method方法        method_4(map);    }    //jdk8以后使用Map接口中的默认方法：   /*    default void forEach(BiConsumer&lt;? super K, ? super V&gt; action)    对此映射中的每个条目执行给定的操作，直到所有条目都被处理或操作引发异常。    参数:        BiConsumer消费接口:        抽象方法:void accept(T t,U u)对给定的参数执行此操作。        参数:            t key            u value   */    private static  void method_4(HashMap&lt;String,Object&gt; map){        map.forEach((key,value) -&gt;{            System.out.println(key + "----&gt;"+ value);        });    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何设计多个非重复的键值对要存储HashMap的初始化"><a href="#如何设计多个非重复的键值对要存储HashMap的初始化" class="headerlink" title="如何设计多个非重复的键值对要存储HashMap的初始化?"></a>如何设计多个非重复的键值对要存储HashMap的初始化?</h2><h3 id="HashMap的初始化问题描述"><a href="#HashMap的初始化问题描述" class="headerlink" title="HashMap的初始化问题描述"></a>HashMap的初始化问题描述</h3><p>如果我们确切的知道我们有多少键值对需要存储，那么我们在初始化HashMap的时候就应该指定它的容量，以防止HashMap自动扩容，影响使用效率。</p><p>默认情况下HashMap的容量是16，但是，如果用户通过构造函数指定了一个数字作为容量，那么Hash会选择大于该数字的第一个2的幂作为容量。(3-&gt;4、7-&gt;8、9-&gt;16)。</p><p>《阿里巴巴Java开发手册》中建议我们设置HashMap的初始化容量。</p><p><strong>【推荐】集合初始化时，指定集合初始值大小。</strong></p><p><strong>说明: HashMap使用HashMap(int initialcapacity)初始化。</strong></p><p>那么，为什么要这么建议?</p><p>当然，以上建议也是有理论支撑的。我们上面介绍过，HashMap的扩容机制，就是当达到扩容条件时会进行扩容。HashMap的扩容条件就是当HashMap中的元素个数(size）超过临界值(threshold）时就会自动扩容。在HashMap中,threshold = loadFactor * capacity。</p><p>所以，如果我们没有设置初始容量大小，随着元素的不断增加，HashMap会有可能发生多次扩容，而HashMap中的扩容机制决定了每次扩容都需要重建hash表，是非常影响性能的。</p><p>但是设置初始化容量，设置的数值不同也会影响性能，那么当我们已知HashMap中即将存放的KV个数的时候，容星设置成多少为好呢?</p><h3 id="HashMap中容量的初始化"><a href="#HashMap中容量的初始化" class="headerlink" title="HashMap中容量的初始化"></a>HashMap中容量的初始化</h3><p>当我们使用HashMap(int initialCapacity)来初始化容量的时候，jdk会默认帮我们计算一个相对合理的值当做初始容量。那么，是不是我们只需要把已知的HashMap中即将存放的元素个数直接传给initialCapacity就可以了呢?</p><p>关于这个值的设置，在《阿里巴巴Java开发手册》有以下建议:</p><p>正例：==<strong>initialCapacity=(需要存储的元素个数 / 负载因子) + 1，注意负载因子(即loaderfactor）默认为0.75,</strong>==</p><p>也就是说，如果我们设置的默认值是7，经过jdk处理之后，会被设置成8，但是，这个HashMap在元素个数达到8*0.75= 6的时候就会进行一次扩容，这明显是我们不希望见到的。我们应该尽星减少扩容。原因也已经分析过。如果我们通过<code>initialCapacity / 0.75F + 1.0F</code>计算，<code>7 / 0.75 + 1 = 10</code>,10经过jdk处理之后，会被设置成16，这就大大的减少了扩容的几率。</p><p>当HashMap内部维护的哈希表的容量达到75%时(默认情况下)，会触发rehash，而rehash的过程是比较耗费时间的。所以初始化容星要设置成<code>initialCapacity / 0.75 + 1</code>的话，可以有效的减少冲突也可以减小误差。</p><p>所以，可以认为，当我们明确知道HashMap中元素的个数的时候，把默认容量设置成: <code>initialcCapacity / 0.75F + 1.0F</code>是一个在性能上相对好的选择，但是，同时也会牺牲些内存。</p><p>我们想要在代码中创建一个HashMap的时候，如果我们已知这个Map中即将存放的元素个数，给HashMap设置初始容量可以在一定程度上提升效率。</p><p>但是，JDK并不会直接拿用户传进来的数字当做默认容量，而是会进行一番运算，最终得到一个2的幂。原因也已经分析过。但是，为了最大程度的避免扩容带来的性能消耗，我们建议可以把默认容量的数字设置成<code>initialCapacity / 0.75F + 1.0F</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/03/03/vue-zu-jian/"/>
      <url>/2023/03/03/vue-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><h2 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h2><h3 id="1、创建组件构造器"><a href="#1、创建组件构造器" class="headerlink" title="1、创建组件构造器"></a>1、创建组件构造器</h3><pre class="line-numbers language-none"><code class="language-none">调用Vue.extend()方法创建<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、注册组件"><a href="#2、注册组件" class="headerlink" title="2、注册组件"></a>2、注册组件</h3><pre class="line-numbers language-none"><code class="language-none">调用Vue.component()方法注册<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、使用组件"><a href="#3、使用组件" class="headerlink" title="3、使用组件"></a>3、使用组件</h3><pre class="line-numbers language-none"><code class="language-none">在Vue实例的作用范围内使用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基础案例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--   3.使用组件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//1.创建组件构造器对象</span>    <span class="token keyword">let</span> extend <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;                    &lt;h1&gt;标题&lt;/h1&gt;                    &lt;p&gt;内容&lt;/p&gt;                    &lt;p&gt;hhahhah&lt;/p&gt;                &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.注册组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-com'</span><span class="token punctuation">,</span>extend<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册组件步骤解析</p><p>1.Vue.extend() :</p><ul><li>调用Vue.Extended)创建的是一个组件构造器。</li><li>通常在创建组件构造器时，传入template代表我们自定义组件的模板。</li><li>该模板就是在使用到组件的地方，要显示的HTML代码。</li><li>事实上，这种写法在Vue2.x的文档中几乎已经看不到了，它会直接使用下面我们会讲到的语法糖，但是在很多资料还是会提到这种方式，而且这种方式是学习后面方式的基础。</li></ul><p>2.Vue.component() :</p><ul><li>调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。</li><li>所以需要传递两个参数：1、注册组件的标签名2、组件构造器</li></ul><p>3.组件必须挂载在某个Vue实例下，否则它不会生效。</p><ul><li>我们来看下面我使用了三次<code>&lt;my-cpn&gt; my-cpn&gt;</code></li></ul><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429180215706.png" alt="image-20220429180215706"></p><h2 id="全局组件与局部组件"><a href="#全局组件与局部组件" class="headerlink" title="全局组件与局部组件"></a>全局组件与局部组件</h2><p>当我们通过调用<code>Vue.component()</code>注册组件时，组件的注册是全局的，这意味着该组件可以在任意Vue示例下使用。如果我们注册的组件是挂载在某个实例中,那么就是一个局部组件</p><p>全局组件案例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--   3.使用组件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//1.创建组件构造器对象</span>  <span class="token keyword">let</span> cpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;                    &lt;h2&gt;我是标题&lt;/h2&gt;                    &lt;p&gt;我是内容&lt;/p&gt;                    &lt;p&gt;哈哈，笑死&lt;/p&gt;                &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注册组件（这种方式其实是全局组件，意味着可以在多个vue的实例下面使用）</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-com'</span><span class="token punctuation">,</span>cpnC<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部组件案例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--   3.使用组件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//1.创建组件构造器对象</span>  <span class="token keyword">let</span> cpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;                    &lt;h2&gt;我是标题&lt;/h2&gt;                    &lt;p&gt;我是内容&lt;/p&gt;                    &lt;p&gt;哈哈，笑死&lt;/p&gt;                &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注册组件（这种方式其实是全局组件，意味着可以在多个vue的实例下面使用）</span> <span class="token comment">// Vue.component('my-com',cpnC);</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">//使上面的Vue.component('my-com',cpnC)组件，变为局部组件，若在vue实例中没有components属性，则Vue.component('my-com',cpnC)使全局组件</span>      <span class="token comment">//注册组件</span>      <span class="token string-property property">'my-com'</span><span class="token operator">:</span> cpnC    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="父组件与子组件"><a href="#父组件与子组件" class="headerlink" title="父组件与子组件"></a>父组件与子组件</h2><p>子父组件的判断：被其他组件应用的组件是子组件，否则是父组件</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429183934280.png" alt="image-20220429183934280"></p><p>代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--   3.使用组件--&gt;</span><span class="token comment">&lt;!--  &lt;my-com&gt;&lt;/my-com&gt;--&gt;</span><span class="token comment">&lt;!--  &lt;my-com&gt;&lt;/my-com&gt;--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//1.创建组件构造器对象（第一个组件）(即是子组件)</span>  <span class="token keyword">let</span> cpnC1 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;                    &lt;h2&gt;我是标题1&lt;/h2&gt;                    &lt;p&gt;我是内容1&lt;/p&gt;                    &lt;p&gt;哈哈1，笑死1&lt;/p&gt;                &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1.创建组件构造器对象（第二个组件）(即是父组件)</span>  <span class="token keyword">let</span> cpnC2 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;                    &lt;h2&gt;我是标题2&lt;/h2&gt;                    &lt;p&gt;我是内容2&lt;/p&gt;                    &lt;p&gt;哈哈2，笑死2&lt;/p&gt;                    &lt;my-com&gt;&lt;/my-com&gt;                &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'my-com'</span><span class="token operator">:</span> cpnC1    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注册组件（这种方式其实是全局组件，意味着可以在多个vue的实例下面使用）</span>  <span class="token comment">//Vue.component('my-com',cpnC);</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">/* components: {//使上面的Vue.component('my-com',cpnC)组件，变为局部组件，若在vue实例中没有components属性，则Vue.component('my-com',cpnC)使全局组件      //注册组件      'my-com': cpnC1,      'my-com1': cpnC2    }*/</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'my-com1'</span><span class="token operator">:</span> cpnC2    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429184057935.png" alt="image-20220429184057935"></p><p>==注意==：子组件如果自在父组件注册，并没有在vue实例里注册，则子组件不能直接使用，若使用组件语法糖的方式注册，则可以直接使用</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429185227206.png" alt="image-20220429185227206"></p><h3 id="组件语法糖方式"><a href="#组件语法糖方式" class="headerlink" title="组件语法糖方式"></a>组件语法糖方式</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--   3.使用组件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//创建及注册组件(即全局组件)</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-com'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;      &lt;h2&gt;我是全局组件&lt;/h2&gt;      &lt;h3&gt;我是全局组件&lt;/h3&gt;      &lt;h4&gt;我是全局组件&lt;/h4&gt;      &lt;h5&gt;我是全局组件&lt;/h5&gt;      &lt;h6&gt;我是全局组件&lt;/h6&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token comment">//注册局部组件</span>      <span class="token string-property property">'my-com1'</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;      &lt;h2&gt;我是局部组件&lt;/h2&gt;      &lt;h3&gt;我是局部组件&lt;/h3&gt;      &lt;h4&gt;我是局部组件&lt;/h4&gt;      &lt;h5&gt;我是局部组件&lt;/h5&gt;      &lt;h6&gt;我是局部组件&lt;/h6&gt;        &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429223533083.png" alt="image-20220429223533083"></p><h3 id="组件模板的分离写法"><a href="#组件模板的分离写法" class="headerlink" title="组件模板的分离写法"></a>组件模板的分离写法</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--   3.使用组件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--第一种写法：script标签，注意：使用这个方法type必须是text/x-template--&gt;</span><span class="token comment">&lt;!--&lt;script type="text/x-template" id="cpn"&gt;  &lt;div&gt;    &lt;h1&gt;我标题&lt;/h1&gt;    &lt;p&gt;我是内容&lt;/p&gt;  &lt;/div&gt;&lt;/script&gt;--&gt;</span><span class="token comment">&lt;!--第二种写法：--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>我标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我是内容:哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//创建及注册组件(即全局组件)</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-com'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429192547067.png" alt="image-20220429192547067"></p><p><strong>第一种方式的效果</strong></p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429192627072.png" alt="image-20220429192627072"></p><p><strong>第二种方式的效果</strong></p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429192701397.png" alt="image-20220429192701397"></p><p>==注意：组件是不可以访问父组件及vue实例的数据==</p><h3 id="组件存放数据的位置"><a href="#组件存放数据的位置" class="headerlink" title="组件存放数据的位置"></a>组件存放数据的位置</h3><ul><li>组件对象也有一个data属性(也可以有methods等属性，)</li><li>只是这个==data属性必须是一个函数==</li><li>而且这个函数返回一个对象，对象内部保存着数据</li></ul><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429210452661.png" alt="image-20220429210452661"></p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429210517539.png" alt="image-20220429210517539"></p><h2 id="父子组件之间的通信"><a href="#父子组件之间的通信" class="headerlink" title="父子组件之间的通信"></a>父子组件之间的通信</h2><ul><li>通过props向子组件传递数据</li><li>通过事件向父组件发送消息</li></ul><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429214059332.png" alt="image-20220429214059332"></p><p><strong>Vue实例和子组件的通信和父组件和子组件的通信过程是一样的。</strong></p><h3 id="props的基本用法"><a href="#props的基本用法" class="headerlink" title="props的基本用法"></a>props的基本用法</h3><p>在组件中，使用选项props来声明需要从父级接收到的数据。</p><p><strong>props的值有两种方式：</strong></p><ul><li><p>字符串数组，数组中的字符串就是传递时的名称。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#child'</span><span class="token punctuation">,</span>      <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'cmovies'</span><span class="token punctuation">,</span><span class="token string">'cmsg'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>              <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">'我是子组件'</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象，对象可以设置传递时的类型，也可以设置默认值等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#child'</span><span class="token punctuation">,</span>      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token literal-property property">cmovies</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token literal-property property">type</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>              <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token literal-property property">cmsg</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>              <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'我是子组件'</span><span class="token punctuation">,</span>  <span class="token comment">//默认值只有在没有绑定该属性的时候有效</span>              <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//声明required为true，说明此字段必须传值</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>              <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">'我是子组件'</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>cmovies</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movies<span class="token punctuation">"</span></span> <span class="token attr-name">:cmsg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in cmovies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            {{item}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{cmsg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//子组件</span>   <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>       <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#child'</span><span class="token punctuation">,</span>       <span class="token comment">//props:['cmovies','cmsg'],</span>       <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token literal-property property">cmovies</span><span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token literal-property property">type</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>               <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token literal-property property">cmsg</span><span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>               <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'我是子组件'</span><span class="token punctuation">,</span>               <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token punctuation">{</span>               <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">'我是子组件'</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span>   <span class="token comment">//父组件</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>            <span class="token literal-property property">movies</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'海贼王'</span><span class="token punctuation">,</span><span class="token string">'海尔兄弟'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token comment">//注册组件</span>            <span class="token string-property property">'child'</span><span class="token operator">:</span>child        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="props驼峰方式命名"><a href="#props驼峰方式命名" class="headerlink" title="props驼峰方式命名"></a>props驼峰方式命名</h3><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220429231613893.png" alt="image-20220429231613893"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>c-info</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">:my-child</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(itme,key,index) in cInfo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{key}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{itme}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{myChild}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">   <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>       <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#child'</span><span class="token punctuation">,</span>       <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token literal-property property">cInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>               <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token literal-property property">myChild</span><span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>               <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">''</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">info</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'hello'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token comment">//注册组件</span>            child        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p>需要使用<strong>自定义事件</strong>来完成。</p><p>什么时候需要自定义事件？</p><ul><li>当子组件需要向父组件传递数据时，就要用到自定义事件了。</li><li>我们之前学习的v-on不仅仅可以用于监听DOM事件，也可以用于组件间的自定义事件。</li></ul><p>自定义事件的流程</p><ul><li>在子组件中，通过==$emit()==来触发事件。</li><li>在父组件中，通过==v-on==来监听子组件事件。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--父组件模板--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name"><span class="token namespace">v-on:</span>send-msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--子组件模板--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in message<span class="token punctuation">"</span></span>        <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnclik(item)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#child'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"美国队长"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"战狼2"</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"生化危机"</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>                    <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token comment">//子组件向父组件传值</span>            <span class="token function">btnclik</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'send-msg'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>            <span class="token literal-property property">movies</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'海贼王'</span><span class="token punctuation">,</span><span class="token string">'海尔兄弟'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token comment">//注册组件</span>            child        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token comment">//父组件监听子组件传来的值</span>            <span class="token function">m</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220430001342594.png" alt="image-20220430001342594"></p><h4 id="父子组件之间值传递-结合双向绑定"><a href="#父子组件之间值传递-结合双向绑定" class="headerlink" title="父子组件之间值传递-结合双向绑定"></a>父子组件之间值传递-结合双向绑定</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">:number1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num1<span class="token punctuation">"</span></span> <span class="token attr-name">:number2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num2<span class="token punctuation">"</span></span> <span class="token attr-name">@changenum1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeNum1<span class="token punctuation">"</span></span> <span class="token attr-name">@changenum2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeNum2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>props:{{number1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>data:{{num1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    &lt;input type="text" v-model="num1"&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;input type="text" :value="num1" @input="num1=$event.target.value"&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num1<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeNum1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>props:{{number2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>data:{{num2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--   &lt;input type="text" v-model="num2"&gt;--&gt;</span><span class="token comment">&lt;!--   &lt;input type="text" :value="num2" @input="num2=$event.target.value"&gt;--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num2<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeNum2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> child<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'#child'</span><span class="token punctuation">,</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">number1</span><span class="token operator">:</span>Number<span class="token punctuation">,</span>            <span class="token literal-property property">number2</span><span class="token operator">:</span>Number<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token punctuation">,</span>                <span class="token literal-property property">num2</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>number2<span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function">changeNum1</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//1.将input中的value赋值到num1中</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token comment">//2.将num1的值传递给父组件</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changenum1'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//3.修饰num2的值</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changenum2'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">changeNum2</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//1.将input中的value赋值到num2中</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token comment">//2.将num2的值传递给父组件</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changenum2'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//3.修饰num1的值</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changenum1'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token literal-property property">num2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string-property property">'child'</span><span class="token operator">:</span> child        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function">changeNum1</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//parseFloat(value);//数据类型转换</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">=</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">changeNum2</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//parseFloat(value);//数据类型转换</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token operator">=</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="父子组件之间值传递-结合双向绑定（watch）实现"><a href="#父子组件之间值传递-结合双向绑定（watch）实现" class="headerlink" title="父子组件之间值传递-结合双向绑定（watch）实现"></a>父子组件之间值传递-结合双向绑定（watch）实现</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">:number1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num1<span class="token punctuation">"</span></span> <span class="token attr-name">:number2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num2<span class="token punctuation">"</span></span> <span class="token attr-name">@change1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change1<span class="token punctuation">"</span></span> <span class="token attr-name">@change2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>props:{{number1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>data:{{cNumber1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cNumber1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>props:{{number2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>data:{{cNumber2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cNumber2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> child<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'#child'</span><span class="token punctuation">,</span>    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token literal-property property">number1</span><span class="token operator">:</span>Number<span class="token punctuation">,</span>      <span class="token literal-property property">number2</span><span class="token operator">:</span>Number    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">cNumber1</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token punctuation">,</span>        <span class="token literal-property property">cNumber2</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>number2      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token function">cNumber1</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cNumber2<span class="token operator">=</span>newVal<span class="token operator">*</span><span class="token number">100</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change1'</span><span class="token punctuation">,</span>newVal<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">cNumber2</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cNumber1<span class="token operator">=</span>newVal<span class="token operator">/</span><span class="token number">100</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change2'</span><span class="token punctuation">,</span>newVal<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">num2</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>      child    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token function">change1</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">=</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">change2</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token operator">=</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220501093023832.png" alt="image-20220501093023832"></p><h3 id="父子组件的访问方式"><a href="#父子组件的访问方式" class="headerlink" title="父子组件的访问方式"></a>父子组件的访问方式</h3><p>父组件直接访问子组件有以下两种方式</p><ul><li>使用$refs(重点)</li><li>使用$children</li></ul><p>子组件直接访问父组件有以下方式</p><ul><li>$parent</li></ul><p>父组件访问子组件</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220501102504629.png" alt="image-20220501102504629"></p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220501102519949.png" alt="image-20220501102519949"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reverseMessage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#child'</span><span class="token punctuation">,</span>        <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'子组件'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function-variable function">reverseMessage</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//$refs是对象类型，默认是一个空对象</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>aaa<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>            child        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件访问父组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnclik<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//子组件</span>  <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'#child'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">'子组件'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token function">btnclik</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>message<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>        child      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="插槽（slot）"><a href="#插槽（slot）" class="headerlink" title="插槽（slot）"></a>插槽（slot）</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>666<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//子组件</span>  <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'#child'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>        child      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是asider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>返回<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//子组件</span>  <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'#child'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>        child      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>父组件替换插槽的标签，但是内容由子组件来提供。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    获取子组件中的数据--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in slot.data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}} - <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{slot.data.join(' * ')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chlid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in msg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> child<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'#chlid'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'javascript'</span><span class="token punctuation">,</span><span class="token string">'vue'</span><span class="token punctuation">,</span><span class="token string">'react'</span><span class="token punctuation">,</span><span class="token string">'angular'</span><span class="token punctuation">,</span><span class="token string">'node'</span><span class="token punctuation">,</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'c++'</span><span class="token punctuation">,</span><span class="token string">'c#'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>           child        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220501185850336.png" alt="image-20220501185850336"></p><h1 id="前端常见的模块化规范："><a href="#前端常见的模块化规范：" class="headerlink" title="前端常见的模块化规范："></a>前端常见的模块化规范：</h1><ul><li>CommonJS</li><li>AMD</li><li>CMD</li><li>ES6的modules</li></ul><p>模块化的两大核心：<strong>导入</strong>和<strong>导出</strong></p><p>CommonJS的导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CommonJS的导入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span>test<span class="token punctuation">,</span>demo<span class="token punctuation">,</span>flag<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moduleA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等同于</span><span class="token keyword">let</span> _mA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moduleA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> test <span class="token operator">=</span> _mA<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">let</span> demo <span class="token operator">=</span> _mA<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">let</span> flag <span class="token operator">=</span> _mA<span class="token punctuation">.</span>flag<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES6模块化</p><p>index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>ES6模块化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaa.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bbb.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ccc.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES6导出， 如aaa.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name<span class="token operator">=</span> <span class="token string">'小红'</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">let</span> flag<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sun</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'今年'</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">'岁了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sun</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">desc</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num1<span class="token operator">-</span>num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//使用export导出</span><span class="token keyword">export</span> <span class="token punctuation">{</span>flag<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sun<span class="token punctuation">,</span>desc<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bbb.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name<span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">let</span> flag<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sun</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'小明是天才'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sun</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">desc</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num1<span class="token operator">-</span>num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES6导入，如ccc.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用import导入</span><span class="token keyword">import</span> <span class="token punctuation">{</span>flag<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./aaa.js"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'小王是学神'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220508001105077.png" alt="image-20220508001105077"></p><p>其他方式导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导出函数</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//导出类</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//构造函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'一个'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">'岁，名为：'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'的人在跑'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//export default 导出默认导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>flag<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>Person<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./aaa.js"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'小王是学神'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小王'</span><span class="token punctuation">,</span><span class="token string">'21'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//默认导入</span><span class="token keyword">import</span> aaa <span class="token keyword">from</span> <span class="token string">'./aaa.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==注意==：当导入使用其他默认导出的模块是<strong>不需要加{}号</strong></p><p>==注意==：export default在同一个模块中，<strong>不允许同时存在多个</strong></p><h1 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h1><p>安装webpack首先需要安装Node.js，Node.js自带了软件包管理工具</p><p>npm查看自己的node版本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510000017548.png" alt="image-20220510000017548"></p><p>全局安装webpack(这里我先指定版本号3.6.0，因为vue cli2依赖该版本)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install webpack@3.6.0 -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510000131274.png" alt="image-20220510000131274"></p><p>局部安装webpack(后续才需要)<br><code>--save-dev</code> 是开发时依赖，项目打包后不需要继续使用的。</p><p>查看webpack的版本</p><pre class="line-numbers language-none"><code class="language-none">webpack --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510000327777.png" alt="image-20220510000327777"></p><p>基础结构目录</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510003517849.png" alt="image-20220510003517849"></p><p>js文件都在src中写，dist文件夹∶用于存放之后打包的文件；src文件夹︰用于存放我们写的源文件，index.html:  浏览器打开展示的首页html；package.json : 通过npm init生成的，npm包管理的文件</p><p>main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.使用commonjs的模块规范</span><span class="token keyword">const</span> <span class="token punctuation">{</span>add<span class="token punctuation">,</span>sub<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./mathUtils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注意这里的add,sub是mathUtils.js里的函数（或变量）名，不能随意取</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.使用ES6的模块规范</span><span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>version<span class="token punctuation">,</span>author<span class="token punctuation">,</span>description<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./info"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'version:'</span><span class="token operator">+</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'author:'</span><span class="token operator">+</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'description:'</span><span class="token operator">+</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mathUtils.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  add<span class="token punctuation">,</span>  sub<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>info.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">let</span> name<span class="token operator">=</span> <span class="token string">'webpack'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> version <span class="token operator">=</span> <span class="token string">'1.0.0'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> description <span class="token operator">=</span> <span class="token string">'webpack是一个基于webpack-core的webpack实现'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token string">'webpack'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在webpack的基本使用目录下使用以下命令进行打包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">webpack ./src/main.js ./dist/bundle.js#命令解释：将当前目录下src目录下的main.js 打包到当前目录下dist目录中，bing打包成bundle.js， 注意：原先dist目录中并没有bundle.js文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510004242721.png" alt="image-20220510004242721"></p><p>==注意==：每次修改js文件都需要使用webpack打包才生效，否则不生效。</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510115952143.png" alt="image-20220510115952143"></p><h2 id="webpack-config-js文件配置"><a href="#webpack-config-js文件配置" class="headerlink" title="webpack.config.js文件配置"></a>webpack.config.js文件配置</h2><p>在webpack的基本使用目录下创建webpack.config.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span>  <span class="token comment">//打包后输出的文件名称</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510125218527.png" alt="image-20220510125218527"></p><p>首先使用以下命令初始化</p><pre class="line-numbers language-none"><code class="language-none">npm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510123541857.png" alt="image-20220510123541857"></p><p>执行以上命令就会生成一个package.json文件，然后在文件的”scripts”中添加<code>"build": "webpack"</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">{  "name": "webpackconfig",  "version": "1.0.0",  "description": "",  "main": "index.js",  "scripts": {    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",    "build": "webpack"  },  "author": "",  "license": "ISC"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用运行<code>npm install</code>命令就会生成package-lock.json文件</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510124026052.png" alt="image-20220510124026052"></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">{  "name": "webpackconfig",  "version": "1.0.0",  "lockfileVersion": 1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 本地（该项目下）安装webpack命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install webpack@3.6.0 --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时package.json文件就会多出webpack的devDependencies依赖,同时还会生成node_modules目录</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510125702493.png" alt="image-20220510125702493"></p><p>使用局部的webpack打包，通过<code>node_modules/.bin/webpack</code>启动webpack打包</p><h2 id="webpack中使用css文件的配置"><a href="#webpack中使用css文件的配置" class="headerlink" title="webpack中使用css文件的配置"></a>webpack中使用css文件的配置</h2><p>中文官网：<a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a></p><p>1、在src目录下创建一个css目录，其中创建一个normal.css文件</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、在main.js中引用css文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//3.依赖css文件</span><span class="token function">require</span> <span class="token punctuation">(</span><span class="token string">"./css/normal.css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时normal.css文件还没有生效，好需要使用以下命令安装css-loader及style-loader</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install --save-dev css-loader@2.0.2npm install --save-dev style-loader@0.23.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、在webpack.config.js文件中添加如下配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span>  <span class="token comment">//打包后输出的文件名称</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span><span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//css-loader只负责将css文件进行加载。style-loader负责将样式加载到DOM中，使用loader时，是从左到右进行加载的</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、打包运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510141804625.png" alt="image-20220510141804625"></p><p>效果:页面以变色</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510141849415.png" alt="image-20220510141849415"></p><h2 id="webpack处理less文件"><a href="#webpack处理less文件" class="headerlink" title="webpack处理less文件"></a>webpack处理less文件</h2><p>1、在src目录下创建一个css目录，其中创建一个special.less文件</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@fontSize</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@fontColor</span><span class="token punctuation">:</span> oranger<span class="token punctuation">;</span></span><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token atrule"><span class="token rule">@fontSize</span><span class="token punctuation">;</span></span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@fontColor</span><span class="token punctuation">;</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、在main.js中引用css文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//3.依赖css文件</span><span class="token function">require</span> <span class="token punctuation">(</span><span class="token string">"./css/special.less"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"hello webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时special.less文件还没有生效，好需要使用以下命令安装less-loader</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install --save-dev less-loader less@3.9.0npm install --save-dev less-loader@4.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、在webpack.config.js文件中添加如下配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span>  <span class="token comment">//打包后输出的文件名称</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span><span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//css-loader只负责将css文件进行加载。style-loader负责将样式加载到DOM中，使用loader时，是从左到右进行加载的</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// creates style nodes from JS strings</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// translates CSS into CommonJS</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// compiles Less to CSS</span>                    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、打包运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510145417279.png" alt="image-20220510145417279"></p><p>效果：</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510145526101.png" alt="image-20220510145526101"></p><h2 id="webpack处理图片文件"><a href="#webpack处理图片文件" class="headerlink" title="webpack处理图片文件"></a>webpack处理图片文件</h2><p>1、在src目录下创建一个css目录和img目录，其中创建一个normal.css文件</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span>  <span class="token comment">/*background-color: red;*/</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../img/2.jpeg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、在main.js中引用css文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//3.依赖css文件</span><span class="token function">require</span> <span class="token punctuation">(</span><span class="token string">"./css/normal.css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时special.less文件还没有生效，好需要使用以下命令安装file-loader、url-loader</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install --save-dev url-loader@1.1.2npm install --save-dev file-loader@3.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、在webpack.config.js文件中添加如下配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token comment">//打包后输出的文件名称</span>        <span class="token literal-property property">publicPath</span><span class="token operator">:</span><span class="token string">'dist/'</span>  <span class="token comment">//打包后的文件相对于html文件的路径</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span><span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//css-loader只负责将css文件进行加载。style-loader负责将样式加载到DOM中，使用loader时，是从左到右进行加载的</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// creates style nodes from JS strings</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// translates CSS into CommonJS</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// compiles Less to CSS</span>                    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">1024000</span><span class="token punctuation">,</span><span class="token comment">//当加载图片，小于limit值，就会转换成base64格式，当大于limit值，需要用到file-loader模块进行加载</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'img/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span><span class="token comment">//设置图片的名称，打包之后再dist目录下生成img目录和对应的图片</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、打包运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510152957596.png" alt="image-20220510152957596"></p><p>效果：</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220510153031680.png" alt="image-20220510153031680"></p><h2 id="ES6转ES5使用babel"><a href="#ES6转ES5使用babel" class="headerlink" title="ES6转ES5使用babel"></a>ES6转ES5使用babel</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install --save-dev babel-loader@7 babel-core babel-preset-es2015<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置webpack.config.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_compoments)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">//排除</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装vue及使用"><a href="#安装vue及使用" class="headerlink" title="安装vue及使用"></a>安装vue及使用</h2><pre class="line-numbers language-none"><code class="language-none">npm install --save vue@2.5.21<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用vue，main.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//5.使用vue进行开发</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.html文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vue在构建发布版本时，构建了两类版本，分别是runtime-only和runtime-compiler，如果使用runtime-only，代码中不能有任何的template，如果使用runtime-compiler，代码中可以有template，因为有compiler可以用于编译template。</p><p>如果使用命令<code>npm run build</code>构建项目，控制台报一下错误</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220518172443469.png" alt="image-20220518172443469"></p><p>解决方案如下：</p><p>我们只需修改webpack.config.js文件，添加如下内容即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string-property property">'vue$'</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整的webpack.config.js文件如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token comment">//打包后输出的文件名称</span>        <span class="token literal-property property">publicPath</span><span class="token operator">:</span><span class="token string">'dist/'</span>  <span class="token comment">//打包后的文件相对于html文件的路径</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span><span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//css-loader只负责将css文件进行加载。style-loader负责将样式加载到DOM中，使用loader时，是从左到右进行加载的</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// creates style nodes from JS strings</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// translates CSS into CommonJS</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// compiles Less to CSS</span>                    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span><span class="token comment">//当加载图片，小于limit值，就会转换成base64格式，当大于limit值，需要用到file-loader模块进行加载</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'img/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span><span class="token comment">//设置图片的名称,打包之后再dist目录下生成img目录和对应的图片</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_compoments)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">//排除</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string-property property">'vue$'</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vuey与template和el的关系"><a href="#vuey与template和el的关系" class="headerlink" title="vuey与template和el的关系"></a>vuey与template和el的关系</h2><p>main.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;div id="app"&gt;    &lt;h2&gt;{{message}}&lt;/h2&gt;    &lt;button @click="buttonClick"&gt;按钮&lt;/button&gt;    &lt;h3&gt;{{name}}&lt;/h3&gt;    &lt;/div&gt;    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'nima'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">buttonClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.html文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220518182910453.png" alt="image-20220518182910453"></p><h2 id="抽取template组件"><a href="#抽取template组件" class="headerlink" title="抽取template组件"></a>抽取template组件</h2><p>main.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//5.使用vue进行开发</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">//抽取App组件</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;div&gt;        &lt;h2&gt;{{message}}&lt;/h2&gt;        &lt;button @click="buttonClick"&gt;按钮&lt;/button&gt;        &lt;h3&gt;{{name}}&lt;/h3&gt;    &lt;/div&gt;    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'nima'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">buttonClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.html文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="再将以上组件进行初步的优化抽取"><a href="#再将以上组件进行初步的优化抽取" class="headerlink" title="再将以上组件进行初步的优化抽取"></a>再将以上组件进行初步的优化抽取</h3><p>1、在src目录下创建vue文件夹，并在vue文件夹下创建App.js文件，内容如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">//抽取App组件</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;div&gt;        &lt;h2&gt;{{message}}&lt;/h2&gt;        &lt;button @click="buttonClick"&gt;按钮&lt;/button&gt;        &lt;h3&gt;{{name}}&lt;/h3&gt;    &lt;/div&gt;    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'nima'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">buttonClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//5.使用vue进行开发</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./vue/App'</span>  <span class="token comment">//引用App.js组件</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">//组成App组件</span>        App    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.html文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于改抽取方法，组件模板与js代码没有分离，所以采用下面的方法进行最终的抽取。</p><h3 id="最后将以上组件进行终极的优化抽取，即抽取为App-vue文件"><a href="#最后将以上组件进行终极的优化抽取，即抽取为App-vue文件" class="headerlink" title="最后将以上组件进行终极的优化抽取，即抽取为App.vue文件"></a>最后将以上组件进行终极的优化抽取，即抽取为App.vue文件</h3><p>1、使用以下命令进行安装.vue文件的相关loader</p><pre class="line-numbers language-none"><code class="language-none">npm install vue-loader@15.4.2 vue-template-compiler@2.5.21 --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、在webpack.config.js文件的rules添加如下内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若执行npm run build命令报如下错误，<img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220518191420346.png" alt="image-20220518191420346"></p><p>只需在package.json文件修改如下，即降低vue-loader的版本为13.0.0</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"^13.0.0"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终的结果如下：</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220518191730791.png" alt="image-20220518191730791"></p><h2 id="组件里面使用组件"><a href="#组件里面使用组件" class="headerlink" title="组件里面使用组件"></a>组件里面使用组件</h2><p>Cpn.vue组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;我是Cpn组件的标题&lt;/h1&gt;    &lt;p&gt;我是Cpn组件的段落&lt;/p&gt;    &lt;h2&gt;{{name}}&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "Cpn",  data(){    return{      name: 'Cpn组件的name'    }  }}&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.vue组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2 class="title"&gt;{{message}}&lt;/h2&gt;    &lt;button @click="buttonClick"&gt;按钮&lt;/button&gt;    &lt;h3&gt;{{name}}&lt;/h3&gt;    &lt;!--使用Cpn组件--&gt;    &lt;Cpn&gt;&lt;/Cpn&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Cpn from './Cpn.vue';export default {  name: "App",  components: {  //组成Cpn组件    Cpn  },  data(){    return{      message: 'Hello Vue!',      name: 'nima'    }  },  methods: {    buttonClick(){    }  }}&lt;/script&gt;&lt;style scoped&gt;.title{  color: #ec1169;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./vue/App.vue'</span><span class="token comment">//引用App.vue组件</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">//组成App组件</span>        App    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220518193813003.png" alt="image-20220518193813003"></p><p>==注意：==这里的<code>import App from './vue/App.vue'</code>中App.vue的拓展名<code>.vue</code>不能省略，否则报错，<img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220518195028520.png" alt="image-20220518195028520">要想省略拓展名，需要在webpack.config.js配置文件中添加以下内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.css'</span><span class="token punctuation">,</span><span class="token string">'.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//省略这些文件的拓展名</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="webpack-横幅Plugin的使用"><a href="#webpack-横幅Plugin的使用" class="headerlink" title="webpack-横幅Plugin的使用"></a>webpack-横幅Plugin的使用</h2><p>plugin是什么?</p><ul><li>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。</li><li>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。loader和plugin区别</li></ul><p>loader和plugin区别</p><ul><li>loader主要用于转换某些类型的模块，它是一个转换器。</li><li>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</li></ul><p>plugin的使用过程∶</p><ul><li>步骤一︰通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)</li><li>步骤二︰在webpack.config.js中的plugins中配置插件。</li></ul><p>添加版权的Plugin</p><p>该插件名字叫BannerPlugin，属于webpack自带的插件。</p><p>修改webpack.config.js文件如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token comment">//打包后输出的文件名称</span>        <span class="token literal-property property">publicPath</span><span class="token operator">:</span><span class="token string">'dist/'</span>  <span class="token comment">//打包后的文件相对于html文件的路径</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">"最终版权归你爸爸所有"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新打包程序:查看bundle.js文件的头部，看到如下信息</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220518200412984.png" alt="image-20220518200412984"></p><h2 id="打包html的plugin"><a href="#打包html的plugin" class="headerlink" title="打包html的plugin"></a>打包html的plugin</h2><p>目前，我们的index.html文件是存放在项目的根目录下的。</p><ul><li>我们知道，在真实发布项目时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义了。</li><li>所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin插件</li></ul><p>HtmlWebpackPlugin插件可以为我们做这些事情:</p><ul><li>自动生成一个index.html文件(可以指定模板来生成)将打包的js文件，</li><li>自动通过script标签插入到body中</li></ul><p>安装HtmlWebpackPlugin插件</p><pre class="line-numbers language-none"><code class="language-none">npm install html-webpack-plugin@3.2.0 --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用插件，修改webpack.config.js文件中plugins部分的内容如下:   </p><ul><li><p>这里的template表示根据什么模板来生成index.html</p></li><li><p>另外，我们需要删除之前在output中添加的publicPath属性</p></li><li><p>否则插入的script标签中的src可能会有问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token comment">//打包后输出的文件名称</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">"最终版权归你爸爸所有"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'index.html'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>此时index.html的内容如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.使用commonjs的模块规范</span><span class="token keyword">const</span> <span class="token punctuation">{</span>add<span class="token punctuation">,</span>sub<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./js/mathUtils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注意这里的add,sub是mathUtils.js里的函数（或变量）名，不能随意取</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.使用ES6的模块规范</span><span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>version<span class="token punctuation">,</span>author<span class="token punctuation">,</span>description<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./js/info"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'version:'</span><span class="token operator">+</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'author:'</span><span class="token operator">+</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'description:'</span><span class="token operator">+</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.依赖css文件</span><span class="token function">require</span> <span class="token punctuation">(</span><span class="token string">"./css/normal.css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.依赖less文件</span><span class="token function">require</span> <span class="token punctuation">(</span><span class="token string">"./css/special.less"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"hello webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.使用vue进行开发</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">// import App from './vue/App'  //引用App.js组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./vue/App.vue'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">//组成App组件</span>        App    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.vue文件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2 class="title"&gt;{{message}}&lt;/h2&gt;    &lt;button @click="buttonClick"&gt;按钮&lt;/button&gt;    &lt;h3&gt;{{name}}&lt;/h3&gt;    &lt;!--使用Cpn组件--&gt;    &lt;Cpn&gt;&lt;/Cpn&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Cpn from './Cpn';export default {  name: "App",  components: {  //组成Cpn组件    Cpn  },  data(){    return{      message: 'Hello Vue!',      name: 'nima'    }  },  methods: {    buttonClick(){    }  }}&lt;/script&gt;&lt;style scoped&gt;.title{  color: #ec1169;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cpn.vue文件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;我是Cpn组件的标题&lt;/h1&gt;    &lt;p&gt;我是Cpn组件的段落&lt;/p&gt;    &lt;h2&gt;{{name}}&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "Cpn",  data(){    return{      name: 'Cpn组件的name'    }  }}&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整的webpack.cofig.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token comment">//打包后输出的文件名称</span>       <span class="token comment">// publicPath:'dist/'  //打包后的文件相对于html文件的路径</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span><span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//css-loader只负责将css文件进行加载。style-loader负责将样式加载到DOM中，使用loader时，是从左到右进行加载的</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// creates style nodes from JS strings</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// translates CSS into CommonJS</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// compiles Less to CSS</span>                    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span><span class="token comment">//当加载图片，小于limit值，就会转换成base64格式，当大于limit值，需要用到file-loader模块进行加载</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'img/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span><span class="token comment">//设置图片的名称,打包之后再dist目录下生成img目录和对应的图片</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_compoments)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">//排除</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.css'</span><span class="token punctuation">,</span><span class="token string">'.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//省略这些文件的拓展名</span>        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">//别名</span>            <span class="token string-property property">'vue$'</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">"最终版权归你爸爸所有"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'index.html'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js压缩的Plugin"><a href="#js压缩的Plugin" class="headerlink" title="js压缩的Plugin"></a>js压缩的Plugin</h2><p>在项目发布之前，我们必然需要对js等文件进行压缩处理</p><ul><li><p>这里，我们就对打包的js文件进行压缩</p></li><li><p>我们使用一个第三方的插件<code>uglifyjs-webpack-plugin</code>，并且版本号指定1.1.1，和CLI2保持一致，（丑化插件）</p><pre class="line-numbers language-none"><code class="language-none">npm install uglifyjs-webpack-plugin@1.1.1 --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改webpack.config.js文件，使用插件</p></li><li><pre><code class="js">const uglifyJsPlugin = require('uglifyjs-webpack-plugin')module.exports={    entry:'./src/main.js',  //入口文件    output:{        path:path.resolve(__dirname,'dist'),  //打包后的文件存放的地方,必须是绝对路径        filename:'bundle.js',  //打包后输出的文件名称    }, //出口文件       plugins:[        new webpack.BannerPlugin("最终版权归你爸爸所有"),        new HtmlWebpackPlugin({            template: 'index.html'        }),        new uglifyJsPlugin()    ]}<pre class="line-numbers language-none"><code class="language-none">- 查看打包后的bunlde.js文件，是已经被压缩过了,效果如下。  ![image-20220518213817991](C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220518213817991.png)## webpack-dev-server搭建本地服务器（热部署）webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。- 不过它是一个单独的模块，在webpack中使用之前需要先安装它  ```shell  npm install --save-dev webpack-dev-server@2.9.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性</p><ul><li>contentBase：为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写./dist</li><li>port：端口号<br>inline：页面实时刷新<br>historyApiFallback ：在SPA页面中，依赖HTML5的history模式</li></ul></li><li><p>webpack.config.js文件配置修改如下:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token literal-property property">contentBase</span><span class="token operator">:</span><span class="token string">'./dist'</span><span class="token punctuation">,</span>    <span class="token literal-property property">inline</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们可以再配置另外一个scripts ：–open参数表示直接打开浏览器,下面的配置要在package.json文件中添加</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">"dev":"webpack-dev-server --open"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整的script如下</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">"scripts": {    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",    "build": "webpack",    "dev":"webpack-dev-server"  },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>在此，webpack.config.js文件的完整配置如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> uglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token comment">//打包后输出的文件名称</span>       <span class="token comment">// publicPath:'dist/'  //打包后的文件相对于html文件的路径</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span><span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//css-loader只负责将css文件进行加载。style-loader负责将样式加载到DOM中，使用loader时，是从左到右进行加载的</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// creates style nodes from JS strings</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// translates CSS into CommonJS</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// compiles Less to CSS</span>                    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span><span class="token comment">//当加载图片，小于limit值，就会转换成base64格式，当大于limit值，需要用到file-loader模块进行加载</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'img/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span><span class="token comment">//设置图片的名称,打包之后再dist目录下生成img目录和对应的图片</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_compoments)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">//排除</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.css'</span><span class="token punctuation">,</span><span class="token string">'.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//省略这些文件的拓展名</span>        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">//别名</span>            <span class="token string-property property">'vue$'</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">"最终版权归你爸爸所有"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//版权所有</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'index.html'</span>   <span class="token comment">//以根目录下的index.html作为模板，打包到dist文件夹下</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">uglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//丑化dist目录下的bundle.js文件</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span> <span class="token comment">//用于服务当前目录下dist文件夹</span>        <span class="token literal-property property">inline</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">//是否实时的进行监听</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义环境下的配置"><a href="#自定义环境下的配置" class="headerlink" title="自定义环境下的配置"></a>自定义环境下的配置</h2><p>创建一个build目录，在该目录下创建base.config.js、dev.config.js、prod.config.js三个文件，</p><ul><li><p>base.config.js：存放公共的配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> uglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment">//入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token comment">//打包后输出的文件名称</span>        <span class="token comment">// publicPath:'dist/'  //打包后的文件相对于html文件的路径</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span><span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//css-loader只负责将css文件进行加载。style-loader负责将样式加载到DOM中，使用loader时，是从左到右进行加载的</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// creates style nodes from JS strings</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// translates CSS into CommonJS</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span>   <span class="token comment">// compiles Less to CSS</span>                    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span><span class="token comment">//当加载图片，小于limit值，就会转换成base64格式，当大于limit值，需要用到file-loader模块进行加载</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'img/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span><span class="token comment">//设置图片的名称,打包之后再dist目录下生成img目录和对应的图片</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_compoments)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">//排除</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.css'</span><span class="token punctuation">,</span><span class="token string">'.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//省略这些文件的拓展名</span>        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">//别名</span>            <span class="token string-property property">'vue$'</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">"最终版权归你爸爸所有"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//版权所有</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'index.html'</span>   <span class="token comment">//以根目录下的index.html作为模板，打包到dist文件夹下</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>dev.config.js：存放开发环境的配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> webpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./base.config'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">webpackMerge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span> <span class="token comment">//用于服务当前目录下dist文件夹</span>       <span class="token literal-property property">inline</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">//是否实时的进行监听</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>prod.config.js：存放生产环境的配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> uglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./base.config'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token function">webpackMerge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">uglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//丑化dist目录下的bundle.js文件</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>使用以下命令对这三个文件进行合并</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install webpack-merge@4.1.5 --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此可以将webpack.config.js文件删除掉了，但是要在package.json文件的script中修改如下的内容</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">"scripts": {    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",    "dev": "webpack-dev-server --open --config ./build/dev.config.js",    "build": "webpack --config ./build/prod.config.js"  },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包命令：</p><pre class="line-numbers language-none"><code class="language-none">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行项目命令</p><pre class="line-numbers language-none"><code class="language-none">npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==注意：==此时虽然打包成功了，但是打包的项目并不是在dist目录下，因此需要修改base.config.js文件如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//打包后的文件存放的地方,必须是绝对路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token comment">//打包后输出的文件名称</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//出口文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue-cli的搭建"><a href="#Vue-cli的搭建" class="headerlink" title="Vue-cli的搭建"></a>Vue-cli的搭建</h1><h3 id="什么是Vue-CLI？"><a href="#什么是Vue-CLI？" class="headerlink" title="什么是Vue CLI？"></a>什么是Vue CLI？</h3><ul><li>CLI是Command-Line Interface,翻译为命令行界面,但是俗称==脚手架.==</li><li>Vue CLI是一个官方发布vue.js项目脚手架</li><li>使用vue-cli可以快速搭建Vue开发环境以及对应的webpack配置.</li></ul><h3 id="Vue-CLI使用前提-Node"><a href="#Vue-CLI使用前提-Node" class="headerlink" title="Vue CLI使用前提-Node"></a>Vue CLI使用前提-Node</h3><ul><li><p>安装NodeJS</p><ul><li>可以直接在官方网站中下载安装.</li><li>网址: <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></li></ul></li><li><p>检测安装的版本</p><ul><li><p>默认情况下自动安装Node和NPM</p></li><li><p>Node环境要求8.9以上或者更高版本</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220520101448869.png" alt="image-20220520101448869"></p></li></ul></li></ul><h4 id="什么是NPM呢"><a href="#什么是NPM呢" class="headerlink" title="什么是NPM呢?"></a>什么是NPM呢?</h4><ul><li>NPM的全称是Node Package Manager</li><li>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</li><li>后续我们会经常使用NPM来安装一些开发过程中依赖包.</li></ul><h4 id="cnpm安装"><a href="#cnpm安装" class="headerlink" title="cnpm安装"></a>cnpm安装</h4><p>​由于国内直接使用npm的官方镜像是非常慢的，这里推荐使用淘宝NPM镜像。<br>​可以使用淘宝定制的cnpm (gzip压缩支持)命令行工具代替默认的npm:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install -g cnpm --registry=https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以使用cnpm命令来安装模块了:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm install [name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Vue-CLI使用前提-Webpack"><a href="#Vue-CLI使用前提-Webpack" class="headerlink" title="Vue CLI使用前提- Webpack"></a>Vue CLI使用前提- Webpack</h3><ul><li><p>Vue.js官方脚手架工具就使用了webpack模板</p><ul><li>对所有的资源会压缩等优化操作</li><li>它在开发过程中提供了一套完整的功能，能够使得我们开发过程中变得高效。</li></ul></li><li><p>Webpack的全局安装</p></li><li><pre><code class="shell">npm install webpack -g<pre class="line-numbers language-none"><code class="language-none">  ### Vue CLI的使用- 官网：https://cli.vuejs.org/zh/guide/- 安装Vue脚手架  ![image-20220520102808153](C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220520102808153.png)  ```shell  npm install -g @vue/cli@3.2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>查看脚手架版本命令</p><pre class="line-numbers language-none"><code class="language-none">vue --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意:上面安装的是Vue CLI3的版本，如果需要想按照Vue CLI2的方式初始化项目时不可以的。如果想在脚手架3的基础上使用脚手架2的模板需要执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install -g @vue/cli-init@3.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220520103300740.png" alt="image-20220520103300740"></p></li><li><p>vue CLI2初始化项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#vue init webpack [项目名]vue init webpack my-project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>构建项目详解</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220520105707601.png" alt="image-20220520105707601"></p></li></ul></li><li><p>vue CLI3初始化项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#vue create [项目名]vue create my-project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Vue-CLI3"><a href="#Vue-CLI3" class="headerlink" title="Vue CLI3"></a>Vue CLI3</h3><p>vue-cli 3与2版态有很大区别</p><ul><li>vue-cli 3是基于webpack 4打造，vue-cli 2还是webapck 3</li><li>vue-cli 3的设计原则是“0配置”，移除的配置文件根目录下的，build和config等目录</li><li>vue-cli 3提供了vue ui命令，提供了可视化配置，更加人性化</li><li>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</li></ul><h4 id="配置文件去哪了？"><a href="#配置文件去哪了？" class="headerlink" title="配置文件去哪了？"></a>配置文件去哪了？</h4><p>UI方面配置 </p><ul><li><p>启动配置服务器：</p><pre class="line-numbers language-none"><code class="language-none">vue ui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220521000104511.png" alt="image-20220521000104511"></p></li></ul><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220521000125291.png" alt="image-20220521000125291"></p><ul><li><p>配置文件在node_modules -&gt; @vue -&gt; cli-serivce -&gt; lib -&gt; Service.js中</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220521000514335.png" alt="image-20220521000514335"></p></li></ul><h4 id="自定义配置文件：起别名"><a href="#自定义配置文件：起别名" class="headerlink" title="自定义配置文件：起别名"></a>自定义配置文件：起别名</h4><p>==注意== ：配置文件名必须是==vue.config.js==</p><p><img src="C:\Users\Asus\AppData\Roaming\Typora\typora-user-images\image-20220521000922770.png" alt="image-20220521000922770"></p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="vue-router基本使用"><a href="#vue-router基本使用" class="headerlink" title="vue-router基本使用"></a>vue-router基本使用</h2><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><pre class="line-numbers language-none"><code class="language-none">location.hash = 'bbb'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220530235334922.png" alt="image-20220530235334922"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220530235428219.png" alt="image-20220530235428219"></p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><ul><li><p>pushState()</p><pre class="line-numbers language-none"><code class="language-none">history.pushState({},'','home')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>back()</p><pre class="line-numbers language-none"><code class="language-none">history.back()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>replaceState()</p><pre class="line-numbers language-none"><code class="language-none">history.replaceState({},'','/foor/bar')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531000303634.png" alt="image-20220531000303634"></p></li><li><p>go()</p><pre class="line-numbers language-none"><code class="language-none">history.go(-1)history.go(-2)history.go(2)history.go(-1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531000649016.png" alt="image-20220531000649016"></p></li></ul><p>上面只演示了三个方法<br>因为history.back()等价于history.go(-1)</p><p>history.forward()则等价于history.go(1)</p><pre class="line-numbers language-none"><code class="language-none">history.forward()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这三个接口等同于浏览器界面的前进后退。</p><h3 id="安装及使用路由"><a href="#安装及使用路由" class="headerlink" title="安装及使用路由"></a>安装及使用路由</h3><p>安装路由命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install vue-router@3.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>router目录下创建index.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span><span class="token comment">//使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token comment">//创建并导出路由对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> HelloWorld    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在main.js文件中引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span> <span class="token comment">//挂载路由</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用vue-router的步骤"><a href="#使用vue-router的步骤" class="headerlink" title="使用vue-router的步骤"></a>使用vue-router的步骤</h3><p>第一步:创建路由组件，index.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token comment">//使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token comment">//创建并导出路由对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/Home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Home    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/About'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> About    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步:配置路由映射:组件和路径映射关系</p><p>第三步:使用路由:通过<router-link>和<router-view>  App.js文件</router-view></router-link></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/Home<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/About<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>关于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./components/Home"</span><span class="token punctuation">;</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">"./components/About"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>    Home<span class="token punctuation">,</span>    About  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">#app</span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Avenir'</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #2c3e50<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><router-link>:该标签是一个vue-router中已经内置的组件,它会被渲染成一个<a>标签.</a></router-link></p><a><p><router-view>:该标签会根据当前的路径,动态渲染出不同的组件.<br>网页的其他内容,比如顶部的标题/导航,或者底部的一些版权信息等会和<router-view>处于同一个等级.<br>在路由切换时,切换的是<router-view>挂载的组件,其他内容不会发生改变.</router-view></router-view></router-view></p></a><h3 id="HTML5的History模式"><a></a><a href="#HTML5的History模式" class="headerlink" title="HTML5的History模式"></a>HTML5的History模式</h3><ul><li><p>URL的hash</p></li><li><p>HTML5的history</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531005248214.png" alt="image-20220531005248214"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes<span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/home'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Home  <span class="token comment">//默认重定向到home页面</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> About    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//创建并导出路由对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">,</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'history'</span>  <span class="token comment">//默认是hash 例如：http://localhost:8080/#/About  路径带#号，history的路径就不会带#号</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>默认情况下，路径的改变使用的URL的hash.</p></li></ul><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531164258920.png" alt="image-20220531164258920"></p><h3 id="router-link补充"><a href="#router-link补充" class="headerlink" title="router-link补充"></a>router-link补充</h3><ul><li>在前面的<router-link>中，,只是使用了一个<strong>属性: to</strong>，用于指定跳转的路径.</router-link></li><li><router-link>还有一些其他属性:<ul><li><router-link to="/home" tag="li"></router-link></li><li>tag： tag可以指定<router-link>之后渲染成什么组件,比如上面的代码会被渲染成一个</router-link></li><li>元素,而不是<a></a></li><a><li>replace: replace不会留下history记录,所以指定replace的情况下,后退键返回不能返回到上一个页面中</li><li>active-class:当<router-link>对应的路由匹配成功时,会自动给当前元素设置一个router-link-active的class,设置active-class可以修改默认的名称.<ul><li>在进行高亮显示的导航菜单或者底部tabbar时,会使用到该类.</li><li>但是通常不会修改类的属性,会直接使用默认的router-link-active即可.</li></ul></router-link></li></a></ul><a></a></router-link></li><a></a></ul><a><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531010735657.png" alt="image-20220531010735657"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531010758474.png" alt="image-20220531010758474"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531010820859.png" alt="image-20220531010820859"></p></a><h3 id="通过代码跳转路由"><a></a><a href="#通过代码跳转路由" class="headerlink" title="通过代码跳转路由"></a>通过代码跳转路由</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    &lt;router-link to="/home" tag="button" replace &gt;首页&lt;/router-link&gt;    &lt;router-link to="/about" tag="button" replace&gt;关于&lt;/router-link&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buttom</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>homeClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buttom</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buttom</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aboutClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>关于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buttom</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./components/Home"</span><span class="token punctuation">;</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">"./components/About"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>    Home<span class="token punctuation">,</span>    About  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>     <span class="token function">homeClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token comment">//路径可返回</span>      <span class="token comment">// this.$router.replace('/home')//路径不可返回</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"首页"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">aboutClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">)</span><span class="token comment">//路径可返回</span>      <span class="token comment">// this.$router.replace('/about')//路径不可返回</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"about页面"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531165924485.png" alt="image-20220531165924485"></p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>User.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;这是用户页面&lt;/h1&gt;    &lt;h2&gt;{{userId}}&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "User",  data(){    return{    }  },  computed:{      userId(){        return this.$route.params.userId //获取url的动态路由参数      }  }}&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531213132273.png" alt="image-20220531213132273"></p><p>App.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;img src="./assets/logo.png"&gt;    &lt;router-link to="/home" tag="button" replace &gt;首页&lt;/router-link&gt;    &lt;router-link to="/about" tag="button" replace&gt;关于&lt;/router-link&gt;&lt;!--    &lt;button @click="homeClick"&gt;首页&lt;/button&gt;--&gt;&lt;!--    &lt;button @click="aboutClick"&gt;关于&lt;/button&gt;--&gt;    &lt;router-link :to="'/user/'+userId" tag="button"&gt;用户&lt;/router-link&gt;    &lt;router-view/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'App',  data(){    return{      userId:'lisi'    }  },/*  methods:{    homeClick(){      this.$router.push('/home')//路径可返回      // this.$router.replace('/home')//路径不可返回      alert("首页")    },    aboutClick(){      this.$router.push('/about')//路径可返回      // this.$router.replace('/about')//路径不可返回      alert("about页面")    }  },*/}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531213400973.png" alt="image-20220531213400973"></p><p>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">"../components/User"</span><span class="token punctuation">;</span><span class="token comment">//使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">const</span> routes<span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/home'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Home  <span class="token comment">//默认重定向到home页面</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:userId'</span><span class="token punctuation">,</span><span class="token comment">//动态路由</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'User'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> User  <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token comment">//创建并导出路由对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">,</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token comment">//默认是hash 例如：http://localhost:8080/#/About  路径带#号，history的路径就不会带#号</span>  <span class="token literal-property property">linkActiveClass</span><span class="token operator">:</span><span class="token string">'active'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531213515231.png" alt="image-20220531213515231"></p><h3 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h3><p>路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块，只有在这个路由被访问到的时候,才加载对应的组件。</p><p><img src="D:\java笔记\笔记\vue组件.assets\image-20220531215644520.png" alt="image-20220531215644520"></p><p><img src="D:\java笔记\笔记\vue组件.assets\image-20220531215620257.png" alt="image-20220531215620257"></p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>结合Vue的异步组件和Webpack的代码分析.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">' ../components/Home.vue'</span><span class="token punctuation">]</span><span class="token function">，</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">' ../ components/Home.vue'</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="方式二-AMD写法"><a href="#方式二-AMD写法" class="headerlink" title="方式二:AMD写法"></a>方式二:AMD写法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">About</span> <span class="token operator">=</span> <span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span> ' <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>components<span class="token operator">/</span>About<span class="token punctuation">.</span>vue'<span class="token punctuation">]</span><span class="token punctuation">,</span>resolve<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="方式三-在ES6中-我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割"><a href="#方式三-在ES6中-我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割" class="headerlink" title="方式三:在ES6中,我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割."></a>方式三:在ES6中,我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割.</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token string">' ../components/Home.vue '</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">const</span> routes<span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/home'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token string">' ../components/Home.vue '</span> <span class="token punctuation">)</span>  <span class="token comment">//默认重定向到home页面</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token string">' ../components/About.vue '</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:userId'</span><span class="token punctuation">,</span><span class="token comment">//动态路由</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'User'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token string">' ../components/User.vue '</span> <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token comment">//创建并导出路由对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">,</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token comment">//默认是hash 例如：http://localhost:8080/#/About  路径带#号，history的路径就不会带#号</span>  <span class="token literal-property property">linkActiveClass</span><span class="token operator">:</span><span class="token string">'active'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-router嵌套路由"><a href="#vue-router嵌套路由" class="headerlink" title="vue-router嵌套路由"></a>vue-router嵌套路由</h2><h3 id="嵌套路由是一个很常见的功能"><a href="#嵌套路由是一个很常见的功能" class="headerlink" title="嵌套路由是一个很常见的功能"></a>嵌套路由是一个很常见的功能</h3><ul><li>比如在home页面中,我们希望通过/home/news和/home/message访问一些内容.</li><li>一个路径映射一个组件,访问这两个路径也会分别渲染两个组件.</li></ul><h3 id="路径和组件的关系如下"><a href="#路径和组件的关系如下" class="headerlink" title="路径和组件的关系如下:"></a>路径和组件的关系如下:</h3><ul><li><p>实现嵌套路由有两个步骤:</p><ul><li><p>创建对应的子组件,并且在路由映射中配置对应的子路由</p></li><li><p>在组件内部使用<router-view>标签.</router-view></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531220930990.png" alt="image-20220531220930990"></p></li></ul></li></ul><p>News.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;ul&gt;      &lt;li&gt;新闻1&lt;/li&gt;      &lt;li&gt;新闻2&lt;/li&gt;      &lt;li&gt;新闻3&lt;/li&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "News"}&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Message.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;ul&gt;      &lt;li&gt;message1&lt;/li&gt;      &lt;li&gt;message2&lt;/li&gt;      &lt;li&gt;message3&lt;/li&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "Message"}&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Home.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;div&gt;      &lt;h1&gt;home 页面&lt;/h1&gt;      &lt;router-link to="/home/news"&gt;新闻&lt;/router-link&gt;      &lt;router-link to="/home/message"&gt;消息&lt;/router-link&gt;      &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "Home"}&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">/*import Home from '../components/Home'import About from '../components/About'import User from "../components/User";*/</span><span class="token comment">//路由懒加载方式导入</span><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">'../components/Home.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">About</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/About.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">User</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/User.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">News</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/News.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Message.vue'</span><span class="token punctuation">)</span><span class="token comment">//使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">const</span> routes<span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/home'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>  <span class="token comment">//默认重定向到home页面</span>      <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'News'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span>News        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span>Message        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:userId'</span><span class="token punctuation">,</span><span class="token comment">//动态路由</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'User'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> User  <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token comment">//创建并导出路由对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">,</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token comment">//默认是hash 例如：http://localhost:8080/#/About  路径带#号，history的路径就不会带#号</span>  <span class="token literal-property property">linkActiveClass</span><span class="token operator">:</span><span class="token string">'active'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531222923140.png" alt="image-20220531222923140"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531223056611.png" alt="image-20220531223056611"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531223213938.png" alt="image-20220531223213938"></p><h2 id="vue-router参数传递"><a href="#vue-router参数传递" class="headerlink" title="vue-router参数传递"></a>vue-router参数传递</h2><h3 id="传递参数的方式"><a href="#传递参数的方式" class="headerlink" title="传递参数的方式"></a>传递参数的方式</h3><p>传递参数主要有两种类型: params和query</p><ul><li><p>params的类型:</p><ul><li>配置路由格式: ==/router/:id==</li><li>传递的方式:在path后面跟上对应的值</li><li>传递后形成的路径:==/router/123,/router/abc==</li></ul></li><li><p>query的类型:(传递对象)</p><ul><li><p>配置路由格式:==/router==,也就是普通配置</p></li><li><p>传递的方式:对象中使用==query的key作为传递方式==</p></li><li><p>传递后形成的路径: ==/router?id=123,/router?id=abc==</p></li></ul></li></ul><p>profile.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;我是Profile&lt;/h1&gt;    &lt;h1&gt;{{ name }}&lt;/h1&gt;    &lt;h1&gt;{{ age }}&lt;/h1&gt;    &lt;h1&gt;{{ height }}&lt;/h1&gt;&lt;!--    &lt;h1&gt;{{ $route.query.name }}&lt;/h1&gt;    &lt;h1&gt;{{ $route.query.age }}&lt;/h1&gt;    &lt;h1&gt;{{ $route.query.height }}&lt;/h1&gt;--&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "Profile",  computed:{    name(){      return this.$route.query.name;    },    age(){      return this.$route.query.age;    },    height(){      return this.$route.query.height;    }  }}&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;img src="./assets/logo.png"&gt;    &lt;router-link to="/home" tag="button" replace &gt;首页&lt;/router-link&gt;    &lt;router-link to="/about" tag="button" replace&gt;关于&lt;/router-link&gt;&lt;!--    &lt;button @click="homeClick"&gt;首页&lt;/button&gt;--&gt;&lt;!--    &lt;button @click="aboutClick"&gt;关于&lt;/button&gt;--&gt;    &lt;router-link :to="'/user/'+userId" tag="button"&gt;用户&lt;/router-link&gt;&lt;!--    &lt;router-link to="/profile"&gt;档案&lt;/router-link&gt;--&gt;&lt;!--    &lt;router-link :to="{path:'/profile'}"&gt;档案&lt;/router-link&gt;--&gt;    &lt;router-link :to="{path:'/profile',query:{      name:'lt',age:23,height:1.88    }}"&gt;档案&lt;/router-link&gt;    &lt;router-view/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'App',  data(){    return{      userId:'lisi'    }  },/*  methods:{    homeClick(){      this.$router.push('/home')//路径可返回      // this.$router.replace('/home')//路径不可返回      alert("首页")    },    aboutClick(){      this.$router.push('/about')//路径可返回      // this.$router.replace('/about')//路径不可返回      alert("about页面")    }  },*/}&lt;/script&gt;&lt;style&gt;#app {  font-family: 'Avenir', Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;}.active{  color: red;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/profile'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Profile'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Profile  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="query通过代码跳转路由"><a href="#query通过代码跳转路由" class="headerlink" title="query通过代码跳转路由"></a>query通过代码跳转路由</h3><p>在App.vue修改如下</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;img src="./assets/logo.png"&gt;    &lt;router-link to="/home" tag="button" replace &gt;首页&lt;/router-link&gt;    &lt;router-link to="/about" tag="button" replace&gt;关于&lt;/router-link&gt;&lt;!--    &lt;button @click="homeClick"&gt;首页&lt;/button&gt;--&gt;&lt;!--    &lt;button @click="aboutClick"&gt;关于&lt;/button&gt;--&gt;    &lt;router-link :to="'/user/'+userId" tag="button"&gt;用户&lt;/router-link&gt;&lt;!--    &lt;router-link to="/profile"&gt;档案&lt;/router-link&gt;--&gt;&lt;!--    &lt;router-link :to="{path:'/profile'}"&gt;档案&lt;/router-link&gt;--&gt;    &lt;router-link :to="{path:'/profile',query:{      name:'lt',age:23,height:1.88    }}"&gt;档案&lt;/router-link&gt;    &lt;button @click="profileClick"&gt;档案&lt;/button&gt;    &lt;router-view/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'App',  data(){    return{      userId:'lisi'    }  },  methods:{    homeClick(){      this.$router.push('/home')//路径可返回      // this.$router.replace('/home')//路径不可返回      alert("首页")    },    aboutClick(){      this.$router.push('/about')//路径可返回      // this.$router.replace('/about')//路径不可返回      alert("about页面")    },    profileClick(){      this.$router.push({        path:'/profile',        query:{          name:'lt',          age:23,          height:1.88        }      })    }  },}&lt;/script&gt;&lt;style&gt;#app {  font-family: 'Avenir', Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;}.active{  color: red;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220531233034441.png" alt="image-20220531233034441"></p><h3 id="route和-router是有区别的"><a href="#route和-router是有区别的" class="headerlink" title="$route和$router是有区别的"></a>$route和$router是有区别的</h3><ul><li>$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法</li><li>$route为当前router跳转对象里面可以获取name、path、query、params等</li></ul><p>==所有的组件都继承自vue类的原型==</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$router<span class="token operator">=</span><span class="token string">'6666'</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-router导航守卫"><a href="#vue-router导航守卫" class="headerlink" title="vue-router导航守卫"></a>vue-router导航守卫</h2><p>官网：<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%90%8E%E7%BD%AE%E9%92%A9%E5%AD%90">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%90%8E%E7%BD%AE%E9%92%A9%E5%AD%90</a></p><p>使用：==router.beforeEach((to,from,next)={next()}）==</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">// import Profile from "../components/Profile";</span><span class="token comment">/*import Home from '../components/Home'import About from '../components/About'import User from "../components/User";*/</span><span class="token comment">//路由懒加载方式导入</span><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">'../components/Home.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">About</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/About.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">User</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/User.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">News</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/News.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Message.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Profile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Profile.vue'</span><span class="token punctuation">)</span><span class="token comment">//使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">const</span> routes<span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/home'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>  <span class="token comment">//默认重定向到home页面</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'首页'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'News'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span>News        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span>Message        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> About<span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'关于'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:userId'</span><span class="token punctuation">,</span><span class="token comment">//动态路由</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'User'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> User<span class="token punctuation">,</span>    <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'用户'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/profile'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Profile'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>    <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'档案'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token comment">//创建并导出路由对象</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">,</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token comment">//默认是hash 例如：http://localhost:8080/#/About  路径带#号，history的路径就不会带#号</span>  <span class="token literal-property property">linkActiveClass</span><span class="token operator">:</span><span class="token string">'active'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//路由导航守卫（前置钩子（hook））</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token comment">//从from跳转到to</span>  <span class="token comment">// document.title = to.matched[0].meta.title//含有嵌套路由使用该方法（推荐使用）</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token comment">//不含有嵌套路由可用使用该方法</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220601001403278.png" alt="image-20220601001403278"></p><h3 id="导航守卫使用"><a href="#导航守卫使用" class="headerlink" title="导航守卫使用"></a>导航守卫使用</h3><p>1、前置守卫(guard)：使用==beforeEach==</p><ul><li><p>我们可以利用beforeEach来完成标题的修改.</p><ul><li>首先,我们可以在钩子当中定义一些标题,可以利用meta来定义</li><li>其次,利用导航守卫,修改我们的标题</li></ul></li><li><p>导航钩子的三个参数解析:</p><ul><li><p>to：即将要进入的目标的路由对象.</p></li><li><p>from：当前导航即将要离开的路由对象</p></li><li><p>next：调用该方法后，才能进入下一个钩子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token comment">//从from跳转到to</span>  <span class="token comment">// document.title = to.matched[0].meta.title//含有嵌套路由使用该方法（推荐使用）</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token comment">//不含有嵌套路由可用使用该方法</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>2、后置首位：使用==afterEach==</p><p>如果是后置钩子,也就是afterEach,不需要主动调用next()函数.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//后置钩子（hook）</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----------'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用的导航守卫,==<strong>被称之为全局守卫.</strong>==</p><h3 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/users/:id'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> UserDetails<span class="token punctuation">,</span>    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// reject the navigation</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>​Vuex是一个专为Vue.js 应用程序开发的==<strong>状态管理模式</strong>==。<br>它采用==<strong>集中式存储管理</strong>==应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br>Vuex也集成到Vue的官方调试工具==devtools extension==，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试<br>功能。</p><h2 id="什么是状态管理"><a href="#什么是状态管理" class="headerlink" title="什么是状态管理"></a>什么是状态管理</h2><p>状态管理模式、集中式存储管理这些名词听起来就非常高大上，让人捉摸不透。<br>其实，可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。</p><p>那么，多个组件是不是就可以共享这个对象中的所有变量属性了呢?</p><h2 id="单界面的状态管理"><a href="#单界面的状态管理" class="headerlink" title="单界面的状态管理"></a>单界面的状态管理</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220601101103532.png" alt="image-20220601101103532"></p><ul><li><strong>状态</strong>，驱动应用的数据源；</li><li><strong>视图</strong>，以声明方式将<strong>状态</strong>映射到视图；</li><li><strong>操作</strong>，响应在<strong>视图</strong>上的用户输入导致的状态变化</li></ul><p>父子组件方式传递参数</p><p>App.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;h1&gt;{{message}}&lt;/h1&gt;    &lt;h1&gt;{{counter}}&lt;/h1&gt;&lt;!--    &lt;router-view/&gt;--&gt;    &lt;button @click="counter++"&gt;+&lt;/button&gt;    &lt;button @click="counter--"&gt;-&lt;/button&gt;    &lt;hello-vuex :counter="counter"&gt;&lt;/hello-vuex&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloVuex from "./components/HelloVuex";export default {  name: 'App',  components:{    HelloVuex  },  data(){    return{      message:"App组件",      counter:0    }  }}&lt;/script&gt;&lt;style&gt;#app {  font-family: 'Avenir', Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HelloVuex.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;{{counter}}&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloVuex",  props:{    counter:Number  }}&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用vuex实现参数传递</p><p>创建store目录以及index.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue  <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token comment">/*users:[        {          name:'admin',          pwd:'123456'        }      ]*/</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// The Vue build version to load with the `import` command</span><span class="token comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">// Vue.prototype.$store = store</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;h1&gt;App的内容&lt;/h1&gt;    &lt;h1&gt;{{message}}&lt;/h1&gt;    &lt;h1&gt;{{counter}}&lt;/h1&gt;&lt;!--    &lt;router-view/&gt;--&gt;    &lt;button @click="counter++"&gt;+&lt;/button&gt;    &lt;button @click="counter--"&gt;-&lt;/button&gt;    &lt;h1&gt;HelloVuex的内容&lt;/h1&gt;    &lt;button @click="$store.state.counter++"&gt;+&lt;/button&gt;    &lt;button @click="$store.state.counter--"&gt;-&lt;/button&gt;    &lt;hello-vuex :counter="counter"&gt;&lt;/hello-vuex&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloVuex from "./components/HelloVuex";export default {  name: 'App',  components:{    HelloVuex  },  data(){    return{      message:"App组件",      counter:0    }  }}&lt;/script&gt;&lt;style&gt;#app {  font-family: 'Avenir', Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HelloVuex.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;{{$store.state.counter}}&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloVuex",  props:{    counter:Number  }}&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220602164407287.png" alt="image-20220602164407287"></p><h2 id="vue-devtools的安装"><a href="#vue-devtools的安装" class="headerlink" title="vue-devtools的安装"></a>vue-devtools的安装</h2><p>下载链接：<a href="https://github.com/vuejs/devtools/tree/add-remote-devtools">https://github.com/vuejs/devtools/tree/add-remote-devtools</a> </p><p>下载ZIP压缩包并解压</p><p>安装相关依赖</p><pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220602165508333.png" alt="image-20220602165508333"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220602165559401.png" alt="image-20220602165559401"></p><p>打包项目</p><pre class="line-numbers language-none"><code class="language-none">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220602165819696.png" alt="image-20220602165819696"></p><h2 id="使用Vuex最简单的方式。"><a href="#使用Vuex最简单的方式。" class="headerlink" title="使用Vuex最简单的方式。"></a>使用Vuex最简单的方式。</h2><p>1.提取出一个公共的store对象，用于保存在多个组件中共享的状态<br>2.将store对象放置在new Vue对象中，这样可以保证在所有的组件中都可以使用到<br>3.在其他组件中使用store对象中保存的状态即可</p><ul><li>通过this.$store.state.属性的方式来访问状态</li><li>通过this.$store.commit(‘mutation中方法’)来修改状态</li></ul><p>注意事项∶<br>我们通过提交mutation的方式，而非直接改变store.state.counter。<br>这是因为Vuex可以更明确的追踪状态的变化，所以不要直接<br>改变store.state.counter的值。</p><p>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue  <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token comment">/*users:[        {          name:'admin',          pwd:'123456'        }      ]*/</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//点击+按钮就会增加</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>counter<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//点击-按钮就会减少</span>    <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token operator">--</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;h1&gt;App的内容&lt;/h1&gt;    &lt;h1&gt;{{message}}&lt;/h1&gt;    &lt;h1&gt;{{counter}}&lt;/h1&gt;&lt;!--    &lt;router-view/&gt;--&gt;    &lt;button @click="counter++"&gt;+&lt;/button&gt;    &lt;button @click="counter--"&gt;-&lt;/button&gt;    &lt;h1&gt;HelloVuex的内容&lt;/h1&gt;    &lt;button @click="addition"&gt;+&lt;/button&gt;    &lt;button @click="subtraction"&gt;-&lt;/button&gt;    &lt;hello-vuex :counter="counter"&gt;&lt;/hello-vuex&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloVuex from "./components/HelloVuex";export default {  name: 'App',  components:{    HelloVuex  },  data(){    return{      message:"App组件",      counter:0    }  },  methods:{    addition(){        this.$store.commit("increment")    },    subtraction(){      this.$store.commit("decrement")    }  }}&lt;/script&gt;&lt;style&gt;#app {  font-family: 'Avenir', Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220602170619014.png" alt="image-20220602170619014"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220602170728774.png" alt="image-20220602170728774"></p><h3 id="Getters基本使用"><a href="#Getters基本使用" class="headerlink" title="Getters基本使用"></a>Getters基本使用</h3><p>如果我们已经有了一个获取所有年龄大于20岁学生列表的getters,那么代码可以这样来写</p><p>index.js文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue  <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token comment">/*users:[        {          name:'admin',          pwd:'123456'        }      ]*/</span>    <span class="token literal-property property">student</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>      <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span>      <span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">1.8</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'李四'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">1.8</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'王五'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">1.8</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//点击+按钮就会增加</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>counter<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//点击-按钮就会减少</span>    <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>counter<span class="token operator">--</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">powerCounter</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>counter<span class="token operator">*</span> state<span class="token punctuation">.</span>counter    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">morestu20</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>age<span class="token operator">&gt;</span><span class="token number">18</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//方式一</span>    <span class="token comment">/*morestu20Length(state){      return state.student.filter(s =&gt; s.age&gt;18).length    },*/</span>    <span class="token function">morestu20Length</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> getters<span class="token punctuation">.</span>morestu20<span class="token punctuation">.</span>length    <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//方式二</span>    <span class="token function">getAgeStu</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token parameter">age</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>age <span class="token operator">&gt;</span>age<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>getters默认是不能传递参数的,如果希望传递参数,那么只能让getters本身返回另一个函数.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getAgeStu</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> age<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mutation状态更新"><a href="#Mutation状态更新" class="headerlink" title="Mutation状态更新"></a>Mutation状态更新</h3><ul><li>Vuex的store状态的更新唯一方式∶ 提交Mutation</li></ul><p>Mutation主要包括两部分∶</p><ul><li>字符串的事件类型(type )</li><li>一个回调函数( handler ) ,该回调函数的第一个参数就是state。</li></ul><h3 id="mutation的定义方式"><a href="#mutation的定义方式" class="headerlink" title="mutation的定义方式:"></a>mutation的定义方式:</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//点击+按钮就会增加</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>counter<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//点击-按钮就会减少</span>    <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>counter<span class="token operator">--</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过mutation更新"><a href="#通过mutation更新" class="headerlink" title="通过mutation更新"></a>通过mutation更新</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">increment <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> decrement <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220602212200469.png" alt="image-20220602212200469"></p><h3 id="Mutation传递参数"><a href="#Mutation传递参数" class="headerlink" title="Mutation传递参数"></a>Mutation传递参数</h3><p>在通过mutation更新数据的时候,有可能我们希望携带一些额外的参数参数被称为是mutation的载荷(Payload)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">addCountSum</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addCount'</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">addStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">1.6</span><span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addStudent'</span><span class="token punctuation">,</span>stu<span class="token punctuation">)</span>    <span class="token punctuation">}</span>            <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>count</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> count    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>stu</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>    <span class="token punctuation">}</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传递多个参数</p><ul><li>比如我们有很多参数需要传递.</li><li>这个时候,我们通常会以对象的形式传递,也就是payload是一个对象</li><li>这个时候可以再从对象中取出相关的信息.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">changeCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>counter <span class="token operator">=</span> payload<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token function-variable function">changeCount</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeCount'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mutation响应规则"><a href="#Mutation响应规则" class="headerlink" title="Mutation响应规则"></a>Mutation响应规则</h3><p>Vuex的store中的state是响应式的,当state中的数据发生改变时, Vue组件会自动更新.这就要求我们必须遵守一些Vuex对应的规则:<br>提前在store中初始化好所需的属性.<br>当给state中的对象添加新属性时,使用下面的方式:</p><blockquote><p>方式一: 使用Vue.set(obj, ‘newProp’,123)<br>方式二: 用新对象给旧对象重新赋值</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">info</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>age：<span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    state<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'历时'</span>Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>info<span class="token punctuation">,</span><span class="token string">'address'</span><span class="token punctuation">,</span><span class="token string">'洛杉矶'</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>info<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">addInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// const  a = {name:'李四',age:20}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addInfo'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">addInfo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'alan'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addInfo'</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'aUpdateInfo'</span><span class="token punctuation">,</span><span class="token string">'我是payload'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token function">aUpdateInfo</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>       context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateInfo'</span><span class="token punctuation">)</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mutation同步函数"><a href="#Mutation同步函数" class="headerlink" title="Mutation同步函数"></a>Mutation同步函数</h3><p>通常情况下, Vuex要求我们Mutation中的方法必须是同步方法.</p><ul><li>主要的原因是当我们使用devtools时,可以devtools可以帮助我们捕捉mutation的快照</li><li>但是如果是异步操作,那么devtools将不能很好的追踪这个操作什么时候会被完成.</li></ul><h1 id="axios请求方式"><a href="#axios请求方式" class="headerlink" title="axios请求方式"></a>axios请求方式</h1><ul><li><p>支持多种请求方式:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h3><pre class="line-numbers language-none"><code class="language-none">npm install axios --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="axios的使用"><a href="#axios的使用" class="headerlink" title="axios的使用"></a>axios的使用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// The Vue build version to load with the `import` command</span><span class="token comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000/home/multidata'</span><span class="token punctuation">,</span>  <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000/home/data'</span><span class="token punctuation">,</span>    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'pop'</span><span class="token punctuation">,</span>      <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios发送并发请求"><a href="#axios发送并发请求" class="headerlink" title="axios发送并发请求"></a>axios发送并发请求</h3><ul><li><p>使用axios.all,可以放入多个请求的数组.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000/home/multidata'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000/home/data'</span><span class="token punctuation">,</span>  <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'sell'</span><span class="token punctuation">,</span>    <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">5</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>axios.all([])返回的结果是一个数组，使用axios.spread 可将数组[res1,res2]展开为res1, res2</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000/home/multidata'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000/home/data'</span><span class="token punctuation">,</span>  <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'sell'</span><span class="token punctuation">,</span>    <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">5</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res1<span class="token punctuation">,</span>res2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios的相关配置信息"><a href="#axios的相关配置信息" class="headerlink" title="axios的相关配置信息"></a>axios的相关配置信息</h3><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><ul><li><p>在上面的示例中,我们的BaseURL是固定的</p><ul><li><p>实上,在开发中可能很多参数都是固定的.</p></li><li><p>这个时候我们可以进行一些抽取,也可以利用axiox的全局配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> ‘<span class="token number">123.207</span><span class="token number">.32</span><span class="token number">.32</span><span class="token operator">:</span><span class="token number">8000</span>’axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span> <span class="token string">'content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span>‘application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded'<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://123.207.32.32:8000'</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">5000</span>  <span class="token comment">//单位毫秒</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/multidata'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/data'</span><span class="token punctuation">,</span>  <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'sell'</span><span class="token punctuation">,</span>    <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">5</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res1<span class="token punctuation">,</span>res2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="常见的配置选项"><a href="#常见的配置选项" class="headerlink" title="常见的配置选项"></a>常见的配置选项</h4><ul><li><p>请求地址<br>url: “/user’</p></li><li><p>请求类型<br>method: ‘get’,</p></li><li><p>请根路径<br>baseURL: ‘<a href="http://www.mt.com/api">http://www.mt.com/api</a>“,</p></li><li><p>请求前的数据处理<br>transformRequest:[function(data){}],</p></li><li><p>请求后的数据处理<br>transformResponse: [function(data){}],</p></li><li><p>自定义的请求头<br>headers:{‘x-Requested-With”:’XMLHttpRequest’),</p></li><li><p>URL查询对象<br>params:{ id: 12 },</p></li><li><p>查询对象序列化函数<br>paramsSerializer: function(params){ }</p></li><li><p>request body<br>data: { key: ‘aa’},</p></li><li><p>超时设置时间（单位毫秒）<br>timeout: 1000,</p></li><li><p>跨域是否带Token<br>withCredentials: false,</p></li><li><p>自定义请求处理<br>adapter: function(resolve, reject, config){}.</p></li><li><p>身份验证信息<br>auth: { uname: “, pwd: ‘12’},</p></li><li><p>响应的数据格式json / blob /document /arraybuffer / text/ stream</p></li><li><p>responseType: ‘json’，</p></li></ul><h3 id="axios的实例"><a href="#axios的实例" class="headerlink" title="axios的实例"></a>axios的实例</h3><ul><li>为什么要创建axios的实例呢?<ul><li>当我们从axios模块中导入对象时,使用的实例是默认的实例.</li><li>当给该实例设置一些默认配置时,这些配置就被固定下来了.</li><li>但是后续开发中,某些配置可能会不太一样.</li><li>比如某些请求需要使用特定的baseURL或者timeout或者content-Type等.</li><li>这个时候,我们就可以创建新的实例,并且传入属于该实例的配置信息.</li></ul></li></ul><p>创建axios实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// axios中请求配置有baseURL选项，表示请求URL公共部分</span>  <span class="token literal-property property">baseURL</span><span class="token operator">:</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token comment">//正式生产环境，程序最终发布后所需要的参数配置</span>      <span class="token operator">?</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_BASE_URI</span>      <span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_BASE_API</span><span class="token punctuation">,</span>  <span class="token comment">// 超时</span>  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用回调函数方式"><a href="#使用回调函数方式" class="headerlink" title="使用回调函数方式"></a>使用回调函数方式</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> success<span class="token punctuation">,</span>failure</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//创建axios实例</span>  <span class="token keyword">const</span>  instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">3000</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">//发送网络请求</span>  <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token function">failure</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//封装request模块</span><span class="token keyword">import</span> <span class="token punctuation">{</span>request<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./network/request"</span><span class="token punctuation">;</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/home/multidata'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用Promise方式（推荐使用）"><a href="#使用Promise方式（推荐使用）" class="headerlink" title="使用Promise方式（推荐使用）"></a>使用Promise方式（推荐使用）</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//创建axios实例</span>    <span class="token keyword">const</span>  instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>      <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">3000</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//发送网络请求</span>    <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//封装request模块 :Promise方式</span><span class="token keyword">import</span> <span class="token punctuation">{</span>request<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./network/request"</span><span class="token punctuation">;</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/home/multidata'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span>  instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">3000</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//封装request模块 :Promise方式</span><span class="token keyword">import</span> <span class="token punctuation">{</span>request<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./network/request"</span><span class="token punctuation">;</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/home/multidata'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios的拦截器的使用"><a href="#axios的拦截器的使用" class="headerlink" title="axios的拦截器的使用"></a>axios的拦截器的使用</h3>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类图</title>
      <link href="/2023/03/03/lei-tu/"/>
      <url>/2023/03/03/lei-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><h2 id="1、泛化"><a href="#1、泛化" class="headerlink" title="1、泛化"></a>1、泛化</h2><p>概念：泛化是一种一般与特殊、一般与具体之间关系的描述，具体描述建立在一般描述的基础之上，并对其进行了扩展。在java中用来表示继承的关系。</p><p>表示方法：用实线空心三角箭头表示。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/20160816223903989" alt="img"></p><h2 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h2><p>概念：实现是一种类与接口的关系，表示类是接口所有特征和行为的实现，在程序中一般通过类实现接口来描述</p><p>表示方法：空心三角形箭头的虚线，实现类指向接口</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/20160816224244086" alt="img"></p><h2 id="3、依赖"><a href="#3、依赖" class="headerlink" title="3、依赖"></a>3、依赖</h2><p>概念：是一种使用的关系，即一个类的实现需要另一个类的协助。</p><p>java中，方法参数需要传入另一个类的对象，就表示依赖这个类。</p><p>表示方法：虚线箭头，类A指向类B。</p><p><img src="https://img-blog.csdn.net/20160816224457613" alt="img"></p><h2 id="4、关联"><a href="#4、关联" class="headerlink" title="4、关联"></a>4、关联</h2><p>概念：表示类与类之间的联接,它使一个类知道另一个类的属性和方法，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的。</p><p>java中一个类的全局变量引用了另一个类，就表示关联了这个类</p><p>表示方法：实线箭头，类A指向类B</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/20160816224818119" alt="img"></p><h2 id="5、聚合"><a href="#5、聚合" class="headerlink" title="5、聚合"></a>5、聚合</h2><p>概念：聚合关联关系的一种特例，是强的关联关系。聚合是整体和个体之间的关系，即has-a的关系，整体与个体可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。程序中聚合和关联关系是一致的，只能从语义级别来区分；</p><p>表示方法：尾部为空心菱形的实线箭头（也可以没箭头），类A指向类B</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/20160816224848274" alt="img"></p><h2 id="6、组合"><a href="#6、组合" class="headerlink" title="6、组合"></a>6、组合</h2><p>概念：组合也是关联关系的一种特例。组合是一种整体与部分的关系，即contains-a的关系，比聚合更强。部分与整体的生命周期一致，整体的生命周期结束也就意味着部分的生命周期结束，组合关系不能共享。程序中组合和关联关系是一致的，只能从语义级别来区分。</p><p>表示方法：尾部为实心菱形的实现箭头（也可以没箭头），类A指向类B</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/15113822-a45fa292737d4c7884acbf250e18e3df.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 类图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>index</title>
      <link href="/2023/03/03/index/"/>
      <url>/2023/03/03/index/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop</title>
      <link href="/2023/03/03/hadoop/"/>
      <url>/2023/03/03/hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><h2 id="一、Hadoop概述"><a href="#一、Hadoop概述" class="headerlink" title="一、Hadoop概述"></a>一、Hadoop概述</h2><h3 id="1-1-Hadoop-是什么"><a href="#1-1-Hadoop-是什么" class="headerlink" title="1.1 Hadoop 是什么"></a><strong>1.1 Hadoop</strong> <strong>是什么</strong></h3><p>1）Hadoop是一个由Apache基金会所开发的分布式系统基础架构。 </p><p>2）主要解决，海量数据的存储和海量数据的分析计算问题。 </p><p>3）广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈。</p><h3 id="1-2-Hadoop-发展历史（了解）"><a href="#1-2-Hadoop-发展历史（了解）" class="headerlink" title="1.2 Hadoop 发展历史（了解）"></a><strong>1.2 Hadoop</strong> <strong>发展历史（了解）</strong></h3><p>1）Hadoop创始人Doug Cutting，为 了实 现与Google类似的全文搜索功能，他在Lucene框架基础上进行优化升级，查询引擎和索引引擎。</p><p>2）2001年年底Lucene成为Apache基金会的一个子项目。 </p><p>3）对于海量数据的场景，Lucene框 架面 对与Google同样的困难，<strong>存 储海量数据困难，检 索海 量速度慢</strong>。 </p><p>4）学习和模仿Google解决这些问题的办法 ：微型版Nutch。 </p><p>5）可以说Google是Hadoop的思想之源（Google在大数据方面的三篇论文）</p><p><strong>GFS —&gt;HDFS</strong></p><p><strong>Map-Reduce —&gt;MR</strong></p><p><strong>BigTable —&gt;HBase</strong></p><p>6）2003-2004年，Google公开了部分GFS和MapReduce思想的细节，以此为基础Doug Cutting等人用了<strong>2年业余时间</strong>实现了DFS和MapReduce机制，使Nutch性能飙升。</p><p>7）2005 年Hadoop 作为 Lucene的子项目 Nutch的一部分正式引入Apache基金会。 </p><p>8）2006 年 3 月份，Map-Reduce和Nutch Distributed File System （NDFS）分别被纳入到 Hadoop 项目</p><p>中，Hadoop就此正式诞生，标志着大数据时代来临。 </p><p>9）名字来源于Doug Cutting儿子的玩具大象</p><h3 id="1-3-Hadoop-三大发行版本（了解）"><a href="#1-3-Hadoop-三大发行版本（了解）" class="headerlink" title="1.3 Hadoop 三大发行版本（了解）"></a><strong>1.3 Hadoop</strong> <strong>三大发行版本（了解）</strong></h3><p>Hadoop 三大发行版本：<strong>Apache、Cloudera、Hortonworks。</strong></p><ul><li><p>Apache 版本最原始（最基础）的版本，对于入门学习最好。2006</p><ul><li>官网地址：<a href="http://hadoop.apache.org/">http://hadoop.apache.org</a></li><li>下载地址：<a href="https://hadoop.apache.org/releases.html">https://hadoop.apache.org/releases.html</a></li></ul></li><li><p>Cloudera 内部集成了很多大数据框架，对应产品 CDH。2008</p><ul><li><p>官网地址：<a href="https://www.cloudera.com/downloads/cdh">https://www.cloudera.com/downloads/cdh</a></p></li><li><p>下载地址：<a href="https://docs.cloudera.com/documentation/enterprise/6/release">https://docs.cloudera.com/documentation/enterprise/6/release</a></p><p>notes/topics/rg_cdh_6_download.html</p></li></ul></li><li><p>Hortonworks 文档较好，对应产品 HDP。</p><ul><li>官网地址：<a href="https://hortonworks.com/products/data-center/hdp/">https://hortonworks.com/products/data-center/hdp/</a></li><li>下载地址：<a href="https://hortonworks.com/downloads/#data-platform">https://hortonworks.com/downloads/#data-platform</a></li></ul></li></ul><p>2011年，Hortonworks 现在已经被 Cloudera 公司收购，推出新的品牌 CDP。 </p><h3 id="1-4-Hadoop-优势（4-高）"><a href="#1-4-Hadoop-优势（4-高）" class="headerlink" title="1.4 Hadoop **优势（4 **高）"></a><strong>1.4 Hadoop</strong> **优势（4 **高）</h3><ul><li>1）高可靠性：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。 </li><li>2）高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</li><li>3）高效性：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。</li><li>4）高容错性：能够自动将失败的任务重新分配</li></ul><p><strong>1.5 Hadoop</strong> <strong>组成（面试重点）</strong></p><p>在 Hadoop1.x 时 代 ，Hadoop中 的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大。 <strong>在Hadoop2.x时 代，增加 了Yarn</strong>。<strong>Yarn只负责资 源 的 调 度</strong>，<strong>MapReduce</strong> <strong>只负责运算</strong>。Hadoop3.x在组成上没有变化。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151238246.png" alt="image-20220912151238246"></p><h3 id="1-5-1-HDFS-架构概述"><a href="#1-5-1-HDFS-架构概述" class="headerlink" title="1.5.1 HDFS 架构概述"></a><strong>1.5.1 HDFS</strong> <strong>架构概述</strong></h3><p>Hadoop Distributed File System，简称 <strong>HDFS</strong>，是一个<strong>分布式文件系统。</strong></p><p>1）NameNode（nn）：存储文件的<strong>元数据</strong>，如<strong>文件名，文件目录结构，文件属性</strong>（生成时间、副本数、</p><p>文件权限），以及每个文件的<strong>块列表</strong>和<strong>块所在的DataNode</strong>等。 </p><p>2）DataNode(dn)：在本地文件系统<strong>存储文件块数据</strong>，以及<strong>块数据的校验和</strong></p><p>3）Secondary NameNode(2nn)：<strong>每隔一段时间对NameNode元数据备份</strong>。 </p><h3 id="1-5-2-YARN-架构概述"><a href="#1-5-2-YARN-架构概述" class="headerlink" title="1.5.2 YARN 架构概述"></a><strong>1.5.2 YARN</strong> <strong>架构概述</strong></h3><p>Yet Another Resource Negotiator 简称 YARN ，另一种资源协调者，是 Hadoop 的<strong>资源管理器。</strong></p><p>1）ResourceManager（RM）：整个集群资源（内存、CPU等）的老大</p><p>3）ApplicationMaster（AM）：单个任务运行的老大</p><p>2）NodeManager（N M）：单个节点服务器资源老大</p><p>4）Container：容器，相当一台独立的服务器，里面封装了</p><p>任务运行所需要的资源，如<strong>内存、CPU、磁盘、网络</strong>等。</p><p><strong>1.5.3 MapReduce</strong> <strong>架构概述</strong></p><p>MapReduce 将计算过程分为两个阶段：Map 和 Reduce</p><p>1）Map 阶段并行处理输入数据</p><p>2）Reduce 阶段对 Map 结果进行汇总</p><p><strong>1.5.4 HDFS</strong>、<strong>YARN</strong>、<strong>MapReduce</strong> <strong>三者关系</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151310674.png" alt="image-20220912151310674"></p><p><strong>1.6</strong> <strong>大数据技术生态体系</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151341304.png" alt="image-20220912151341304"></p><p>1）Sqoop：Sqoop 是一款开源的工具，主要用于在 Hadoop、Hive 与传统的数据库（MySQL）</p><p>间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进</p><p>到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。</p><p>2）Flume：Flume 是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，</p><p>Flume 支持在日志系统中定制各类数据发送方，用于收集数据；</p><p>3）Kafka：Kafka 是一种高吞吐量的分布式发布订阅消息系统；</p><p>4）Spark：Spark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数</p><p>据进行计算。</p><p>5）Flink：Flink 是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多。</p><p>6）Oozie：Oozie 是一个管理 Hadoop 作业（job）的工作流程调度管理系统。</p><p>7）Hbase：HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，</p><p>它是一个适合于非结构化数据存储的数据库。</p><p>8）Hive：Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张</p><p>数据库表，并提供简单的 SQL 查询功能，可以将 SQL 语句转换为 MapReduce 任务进行运</p><p>行。其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开</p><p>发专门的 MapReduce 应用，十分适合数据仓库的统计分析。</p><p>9）ZooKeeper：它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、</p><p>名字服务、分布式同步、组服务等。</p><h2 id="二、Hadoop-运行环境搭建（开发重点）"><a href="#二、Hadoop-运行环境搭建（开发重点）" class="headerlink" title="二、Hadoop 运行环境搭建（开发重点）"></a>二、<strong>Hadoop</strong> <strong>运行环境搭建（开发重点）</strong></h2><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><p>配置IP地址，后点击NAT设置，设置网关</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151436237.png" alt="image-20220912151436237"></p><p>网关配置：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151507920.png" alt="image-20220912151507920"></p><p>win下配置</p><p>打开网络，点击以太网，找到VMnet8,右击，点击属性，找到Internet协议版本4（TPC/IPv4），双击，然后配置如下</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151539232.png" alt="image-20220912151539232"></p><p>在虚拟机中修改网络配置如来</p><p>命令： vim /etc/sysconfig/network-scripts/ifcfg-ens33</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TYPE="Ethernet"BROWSER_ONLY="no"BOOTPROTO="static"  #设置为静态的DEFROUTE="yes"IPV4_FAILURE_FATAL="no"IPV6INIT="yes"IPV6_AUTOCONF="yes"IPV6_DEFROUTE="yes"IPV6_FAILURE_FATAL="no"IPV6_ADDR_GEN_MODE="stable-privacy"NAME="ens33"UUID="10874839-6b8b-4d2b-bf79-d073da11636a"DEVICE="ens33"ONBOOT="yes"#配置IP地址IPADDR=192.168.10.100#配置网关GATEWAY=192.168.10.2#域名解析器DNS1=192.168.10.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改主机名称：vim /etc/hostname</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主机名称映射</p><p>vim /etc/hosts</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">192.168.10.100 hadoop100192.168.10.101 hadoop101192.168.10.102 hadoop102192.168.10.103 hadoop103192.168.10.104 hadoop104192.168.10.105 hadoop105192.168.10.106 hadoop106192.168.10.107 hadoop107192.168.10.108 hadoop108<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上步骤使用命令：reboot重启虚拟机</p><p>使用命令<code>ifconfig</code>查看IP地址是否与自己配的一致</p><p>使用<code>hostname</code>命令查看主机名是否修改成功</p><p>最后使用<code>ping www.baidu.com</code>，ping外网查看是否ping通，ping通则说明配置没有问题</p><p><strong>修改windows的主机映射文件（hosts文件）</strong></p><p>如果操作系统是window10，先拷贝出来，修改保存以后，再覆盖即可</p><p>（a）进入C:\Windows\System32\drivers\etc路径</p><p>（b）拷贝hosts文件到桌面</p><p>（c）打开桌面hosts文件并添加如下内容</p><pre class="line-numbers language-none"><code class="language-none">192.168.10.100 hadoop100192.168.10.101 hadoop101192.168.10.102 hadoop102192.168.10.103 hadoop103192.168.10.104 hadoop104192.168.10.105 hadoop105192.168.10.106 hadoop106192.168.10.107 hadoop107192.168.10.108 hadoop108<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（d）将桌面hosts文件覆盖C:\Windows\System32\drivers\etc路径hosts文件</p><p>参考：<a href="https://blog.csdn.net/ahmcwt/article/details/109578320?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9C:%5CWindows%5CSystem32%5Cdriver&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-109578320.142">https://blog.csdn.net/ahmcwt/article/details/109578320?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9C:%5CWindows%5CSystem32%5Cdriver&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-109578320.142</a></p><p><strong>安装 epel-release</strong></p><p>注：Extra Packages for Enterprise Linux 是为“红帽系”的操作系统提供额外的软件包，适用于 RHEL、CentOS 和 Scientific Linux。相当于是一个软件仓库，大多数 rpm 包在官方repository 中是找不到的）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop100 ~]# yum install -y epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：如果 Linux 安装的是最小系统版，还需要安装如下工具；如果安装的是 Linux桌面标准版，需要执行如下操作</p><p>​➢ net-tool：工具包集合，包含 ifconfig 等命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop100 ~]# yum install -y net-tools <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​➢ vim：编辑器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop100 ~]# yum install -y vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭防火墙，关闭防火墙开机自启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop100 ~]# systemctl stop firewalld[root@hadoop100 ~]# systemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：在企业开发时，通常单个服务器的防火墙时关的，。公司整体对外会设置非常安全的防火墙</p><p>创建 <strong>user用户，并修改</strong>123456 <strong>用户的密码</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop100 ~]# useradd user[root@hadoop100 ~]# passwd 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置<strong>user用户具有</strong> <strong>root</strong> <strong>权限，方便后期加</strong> <strong>sudo</strong> <strong>执行</strong> <strong>root</strong> <strong>权限的命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop100 ~]# vim /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改/etc/sudoers 文件，在%wheel 这行下面添加一行，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">## Allow root to run any commands anywhereroot ALL=(ALL) ALL## Allows people in group wheel to run all commands%wheel ALL=(ALL) ALLuser ALL=(ALL) NOPASSWD:ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>克隆虚拟机</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151617719.png" alt="image-20220912151617719"></p><p>克隆三太分别是：hadoop102、hadoop103、hadoop104</p><p>打开hadoop102，输入：<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>修改如下<code>IPADDR=192.168.10.102</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TYPE="Ethernet"PROXY_METHOD="none"BROWSER_ONLY="no"BOOTPROTO="static"DEFROUTE="yes"IPV4_FAILURE_FATAL="no"IPV6INIT="yes"IPV6_AUTOCONF="yes"IPV6_DEFROUTE="yes"IPV6_FAILURE_FATAL="no"IPV6_ADDR_GEN_MODE="stable-privacy"NAME="ens33"UUID="10874839-6b8b-4d2b-bf79-d073da11636a"DEVICE="ens33"ONBOOT="yes"IPADDR=192.168.10.102 #只需修改id即可GATEWAY=192.168.10.2DNS1=192.168.10.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存退出后输入命令：vim /etc/hostname</p><p>修改主机名为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同理：hadoop103、hadoop104做相应的修改即可</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p><strong>卸载现有JDK</strong></p><p>注意：安装JDK前，一定确保提前删除了虚拟机自带的JDK。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpm -qa|grep -i java | xargs -n1 rpm -e --nodeps #rpm -qa 查询所安装的所有rpm软件包#grep -i 忽略大小写#xargs -n1 表示每次只传递一个参数#rpm -e --nodeps 强制卸载软件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启虚拟机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在/opt目录下创建software和module两个文件夹</p><p><strong>用XShell传输工具将JDK导入到opt目录下面的software文件夹下面</strong></p><p>解压jdk：jdk-8u212-linux-x64.tar.gz文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tar -zxvf jdk-8u212-linux-x64.tar.gz -C /opt/module/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入<code> /etc/profile.d</code>目录新建my_env.sh，创建该文件用于配置jdk的环境变量，文件名随意取，环境变量如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#JAVA_HOMEexport JAVA_HOME=/opt/module/jdk1.8.0_212export PATH=$PATH:$JAVA_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后运行<code>source /etc/profile </code>命令，jdk就可以使用了</p><h3 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h3><p><strong>用XShell传输工具将Hadoop导入到opt目录下面的software文件夹下面</strong></p><p>解压：<code>tar -zxvf hadoop-3.1.3.tar.gz -C /opt/module/</code></p><p>在<code>/etc/profile.d</code>目录，也就是之前配置jdk创建的my_env.sh中配置Hadoop的环境变量，将下面的内容放在my_env.sh中即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#HADOOP_HOMEexport HADOOP_HOME=/opt/module/hadoop-3.1.3export PATH=$PATH:$HADOOP_HOME/binexport PATH=$PATH:$HADOOP_HOME/sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后运行命令<code> source /etc/profile</code>hadoop就安装成功了</p><p><strong>测试是否安装成功</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现版本号说明安装成功</p><p><strong>Hadoop</strong> <strong>目录结构</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop-3.1.3]# ll总用量 176drwxr-xr-x. 2 hadoop hadoop    183 9月  12 2019 bindrwxr-xr-x. 3 hadoop hadoop     20 9月  12 2019 etcdrwxr-xr-x. 2 hadoop hadoop    106 9月  12 2019 includedrwxr-xr-x. 3 hadoop hadoop     20 9月  12 2019 libdrwxr-xr-x. 4 hadoop hadoop    288 9月  12 2019 libexec-rw-rw-r--. 1 hadoop hadoop 147145 9月   4 2019 LICENSE.txt-rw-rw-r--. 1 hadoop hadoop  21867 9月   4 2019 NOTICE.txt-rw-rw-r--. 1 hadoop hadoop   1366 9月   4 2019 README.txtdrwxr-xr-x. 3 hadoop hadoop   4096 9月  12 2019 sbindrwxr-xr-x. 4 hadoop hadoop     31 9月  12 2019 share<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重要目录</strong></p><p>（1）bin 目录：存放对 Hadoop 相关服务（hdfs，yarn，mapred）进行操作的脚本</p><p>（2）etc 目录：Hadoop 的配置文件目录，存放 Hadoop 的配置文件</p><p>（3）lib 目录：存放 Hadoop 的本地库（对数据进行压缩解压缩功能）</p><p>（4）sbin 目录：存放启动或停止 Hadoop 相关服务的脚本</p><p>（5）share 目录：存放 Hadoop 的依赖 jar 包、文档、和官方案例</p><h2 id="三、Hadoop的运行模式"><a href="#三、Hadoop的运行模式" class="headerlink" title="三、Hadoop的运行模式"></a>三、Hadoop的运行模式</h2><p>1）Hadoop官方网站：<a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p><p>2）Hadoop运行模式包括：<strong>本地模式、伪分布式模式、以及完全分布式模式。</strong></p><ul><li><strong>本地模式</strong>：单机运行，只是用来演示一下官方案例。生产环境不用。</li><li><strong>伪分布式模式</strong>：也是单机运行，但是具备Hadoop集群的所有功能，一台服务器模拟一个分布式的环境。个别缺钱的公司用来测试，生产环境不用。</li><li><strong>完全分布式模式</strong>：多台服务器组成分布式环境。生产环境使用。</li></ul><h3 id="3-1本地运行模式"><a href="#3-1本地运行模式" class="headerlink" title="3.1本地运行模式"></a>3.1本地运行模式</h3><p>1、创建在hadoop-3.1.3文件下面创建一个wcinput文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102]#cd /opt/module/hadoop-3.1.3/[root@hadoop102 hadoop-3.1.3]# mkdir wcinput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、在wcinput文件下创建一个word.txt文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop-3.1.3]# cd wcinput[root@hadoop102 wcinput]# vim word.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、编辑word.txt文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 wcinput]# vim word.txt#编辑内容如下bananaappleorangeMangoplumgrapefruitFragrant pear# 按esc键 然后按 :wq  保存并退出编辑模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、回到Hadoop目录/opt/module/hadoop-3.1.3</p><p>5、执行程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop-3.1.3]# bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount wcinput ./wcoutput#注意这里的wcoutput目录必须不存在，否则就会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6、查看结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop-3.1.3]#  cat wcoutput/part-r-00000Fragrant1Mango1apple1banana1grapefruit1orange1pear1plum1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2完全分布式运行模式（重点）"><a href="#3-2完全分布式运行模式（重点）" class="headerlink" title="3.2完全分布式运行模式（重点）"></a>3.2完全分布式运行模式（重点）</h3><h4 id="3-2-1实验环境准备："><a href="#3-2-1实验环境准备：" class="headerlink" title="3.2.1实验环境准备："></a>3.2.1实验环境准备：</h4><ul><li>准备3台（虚拟机）客户机（关闭防火墙、静态IP、主机名称）</li><li>安装JDK</li><li>配置环境变量</li><li>安装Hadoop</li><li>配置环境变量</li><li>配置集群</li><li>单点启动</li><li>配置ssh</li><li>群起并测试集群</li></ul><h4 id="3-2-2编写集群分发脚本xsync"><a href="#3-2-2编写集群分发脚本xsync" class="headerlink" title="3.2.2编写集群分发脚本xsync"></a>3.2.2编写集群分发脚本xsync</h4><h5 id="1）scp（secure-copy）安全拷贝"><a href="#1）scp（secure-copy）安全拷贝" class="headerlink" title="1）scp（secure copy）安全拷贝"></a>1）scp（secure copy）安全拷贝</h5><p>（1）scp定义：</p><p>​scp可以实现服务器与服务器之间的数据拷贝。（from server1 to server2）</p><p>​（2）基本语法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scp -r $pdir/$fname  $user@$host:$pdir/$fname#含义：命令  递归   要拷贝的文件路径/名称  目的地用户@主机:目的地路径/名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（3）案例实操</p><p>​前提：在hadoop102、hadoop103、hadoop104都已经创建好的/opt/module、      /opt/software两个目录，并且已经把这两个目录修改为root:root</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# sudo chown root:root -R /opt/module<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（a）在hadoop102上，将hadoop102中/opt/module/jdk1.8.0_212目录拷贝到hadoop103上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 module]# scp -r jdk1.8.0_212/ root@hadoop103:/opt/module/The authenticity of host 'hadoop103 (192.168.10.103)' can't be established.ECDSA key fingerprint is SHA256:TUWHQZbwwRYUG5ECejrabRNQTFVbS4hHkCoq7pLksII.ECDSA key fingerprint is MD5:a6:60:fb:41:f5:2d:b1:2c:ca:19:b9:e1:d2:5a:5b:6b.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'hadoop104,192.168.10.103' (ECDSA) to the list of known hosts.root@hadoop104's password: 输入hadoop103的密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（b）在hadoop103上，将hadoop102中/opt/module/hadoop-3.1.3目录拷贝到hadoop103上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 module]# scp -r root@hadoop102:/opt/module/hadoop-3.1.3 ./The authenticity of host 'hadoop102 (192.168.10.102)' can't be established.ECDSA key fingerprint is SHA256:TUWHQZbwwRYUG5ECejrabRNQTFVbS4hHkCoq7pLksII.ECDSA key fingerprint is MD5:a6:60:fb:41:f5:2d:b1:2c:ca:19:b9:e1:d2:5a:5b:6b.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'hadoop102,192.168.10.102' (ECDSA) to the list of known hosts.root@hadoop102's password: （输入hadoop102的密码）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（c）在hadoop103上操作，将hadoop102中/opt/module目录下所有目录拷贝到hadoop104上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 module]# scp -r root@hadoop102:/opt/module/* root@hadoop104:/opt/moduleroot@hadoop102's password: 输入hadoop102的密码root@hadoop104's password: 输入hadoop104的密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2）rsync远程同步工具"><a href="#2）rsync远程同步工具" class="headerlink" title="2）rsync远程同步工具"></a>2）rsync远程同步工具</h5><p>​rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。</p><p>​rsync和scp区别：</p><p>​用rsync做文件的复制要比scp的速度快，rsync只对差异文件做更新。scp是把所有文件都复制过去。</p><p>（1）基本语法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rsync -av $pdir/$fname $user@$host:$pdir/$fname#含义命令  选项参数  要拷贝的文件路径/名称  目的地用户@主机:目的地路径/名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​ 选项参数说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>归档拷贝</td></tr><tr><td>-v</td><td>显示复制过程</td></tr></tbody></table><p>（2）案例实操</p><p>​（a）删除hadoop103中/opt/module/hadoop-3.1.3/wcinput  /wcoutput</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 hadoop-3.1.3]# rm -rf wcinput/ wcoutput/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​（b）同步hadoop102中的/opt/module/hadoop-3.1.3到hadoop103</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 module]# rsync -av hadoop-3.1.3/ root@hadoop103:/opt/module/hadoop-3.1.3/root@hadoop103's password:输入hadoop103的密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3）xsync集群分发脚本"><a href="#3）xsync集群分发脚本" class="headerlink" title="3）xsync集群分发脚本"></a>3）xsync集群分发脚本</h5><p>（1）需求：循环复制文件到所有节点的相同目录下</p><p>（2）需求分析：</p><p>​（a）rsync命令原始拷贝：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rsync  -av   /opt/module   hadoop@hadoop103:/opt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​（b）期望脚本：xsync要同步的文件名称</p><p>​（c）期望脚本在任何路径都能使用（脚本放在声明了全局环境变量的路径）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/module/jdk1.8.0_212/bin:/opt/module/hadoop-3.1.3/bin:/opt/module/hadoop-3.1.3/sbin:/root/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（3）脚本实现</p><p>（a）在/home/bin目录下创建xsync文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 opt]# cd /home[root@hadoop102 ~]# mkdir bin[root@hadoop102 ~]# cd bin[root@hadoop102 bin]# vim xsync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该文件中编写如下代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!/bin/bash#1. 判断参数个数if [ $# -lt 1 ]then  echo Not Enough Arguement!  exit;fi#2. 遍历集群所有机器for host in hadoop102 hadoop103 hadoop104do    echo ====================  $host  ====================    #3. 遍历所有目录，挨个发送    for file in $@    do        #4. 判断文件是否存在        if [ -e $file ]            then                #5. 获取父目录                pdir=$(cd -P $(dirname $file); pwd)                #6. 获取当前文件的名称                fname=$(basename $file)                ssh $host "mkdir -p $pdir"                rsync -av $pdir/$fname $host:$pdir            else                echo $file does not exists!        fi    donedone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（b）修改脚本 xsync 具有执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 bin]# chmod 777 xsync <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（c）测试脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# xsync bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（d）将脚本复制到/bin中，以便全局调用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 bin]# cp xsync /bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（e）同步环境变量配置（root所有者） </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# ./bin/xsync /etc/profile.d/my_env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：如果用了sudo，那么xsync一定要给它的路径补全。</p><p>让环境变量生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 bin]# source /etc/profile[root@hadoop104 opt]# source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-3SSH无密登录配置"><a href="#3-2-3SSH无密登录配置" class="headerlink" title="3.2.3SSH无密登录配置"></a>3.2.3SSH无密登录配置</h3><h4 id="1）配置ssh"><a href="#1）配置ssh" class="headerlink" title="1）配置ssh"></a>1）配置ssh</h4><p>（1）基本语法</p><p>ssh另一台电脑的IP地址</p><p>（2）ssh连接时出现Host key verification failed的解决方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# ssh hadoop103<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>如果出现如下内容</p><p>Are you sure you want to continue connecting (yes/no)? </p><p>输入yes，并回车</p></li></ul><p>（3）退回到hadoop102</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 ~]# exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2）无密钥配置"><a href="#2）无密钥配置" class="headerlink" title="2）无密钥配置"></a>2）无密钥配置</h4><p>（1）免密登录原理 </p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151716675.png" alt="image-20220912151716675"></p><p>（2）生成公钥和私钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 .ssh]# pwd/root/.ssh[root@hadoop102 .ssh]# ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后敲（三个回车），就会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）</p><p>（3）将公钥拷贝到要免密登录的目标机器上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 .ssh]# ssh-copy-id hadoop102[root@hadoop102 .ssh]# ssh-copy-id hadoop103[root@hadoop102 .ssh]# ssh-copy-id hadoop104<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>还需要在hadoop103上采用hadoop(或其他普通)账号配置一下无密登录到hadoop102、hadoop103、hadoop104服务器上。</p><p>还需要在hadoop104上采用hadoop（或其他普通）账号配置一下无密登录到hadoop102、hadoop103、hadoop104服务器上。</p><p>还需要在hadoop102上采用root账号，配置一下无密登录到hadoop102、hadoop103、hadoop104；</p><p>3）.ssh文件夹下（~/.ssh）的文件功能解释</p><table><thead><tr><th>known_hosts</th><th>记录ssh访问过计算机的公钥（public key）</th></tr></thead><tbody><tr><td>id_rsa</td><td>生成的私钥</td></tr><tr><td>id_rsa.pub</td><td>生成的公钥</td></tr><tr><td>authorized_keys</td><td>存放授权过的无密登录服务器公钥</td></tr></tbody></table><h3 id="3-2-4-集群配置"><a href="#3-2-4-集群配置" class="headerlink" title="3.2.4 集群配置"></a>3.2.4 <strong>集群配置</strong></h3><p>1）集群部署规划</p><p>​注意：</p><p>​NameNode和SecondaryNameNode不要安装在同一台服务器</p><p>​ResourceManager也很消耗内存，不要和NameNode、SecondaryNameNode配置在同一台机器上。</p><table><thead><tr><th></th><th>hadoop102</th><th>hadoop103</th><th>hadoop104</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNodeDataNode</td><td>DataNode</td><td>SecondaryNameNodeDataNode</td></tr><tr><td>YARN</td><td>NodeManager</td><td>ResourceManagerNodeManager</td><td>NodeManager</td></tr></tbody></table><p>2）配置文件说明</p><p>​Hadoop配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认配置值时，才需要修改自定义配置文件，更改相应属性值。</p><p>（1）默认配置文件：</p><table><thead><tr><th>要获取的默认文件</th><th>文件存放在Hadoop的jar包中的位置</th></tr></thead><tbody><tr><td>[core-default.xml]</td><td>hadoop-common-3.1.3.jar/core-default.xml</td></tr><tr><td>[hdfs-default.xml]</td><td>hadoop-hdfs-3.1.3.jar/hdfs-default.xml</td></tr><tr><td>[yarn-default.xml]</td><td>hadoop-yarn-common-3.1.3.jar/yarn-default.xml</td></tr><tr><td>[mapred-default.xml]</td><td>hadoop-mapreduce-client-core-3.1.3.jar/mapred-default.xml</td></tr></tbody></table><p>（2）自定义配置文件：</p><p>​<strong>core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml</strong>四个配置文件存放在$HADOOP_HOME/etc/hadoop这个路径上，用户可以根据项目需求重新进行修改配置。</p><p>3）配置集群</p><p>（1）核心配置文件</p><p>​配置core-site.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# cd $HADOOP_HOME/etc/hadoop[root@hadoop102 hadoop]# vim core-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文件内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 指定NameNode的地址 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://hadoop102:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 指定hadoop数据的存储目录 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/module/hadoop-3.1.3/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 配置HDFS网页登录使用的静态用户为root --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.http.staticuser.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）HDFS配置文件</p><p>配置hdfs-site.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# vim hdfs-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- nn web端访问地址--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop102:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 2nn web端访问地址--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop104:9868<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）YARN配置文件</p><p>配置yarn-site.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# vim yarn-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 指定MR走shuffle --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 指定ResourceManager的地址--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop103<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 环境变量的继承 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.env-whitelist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）MapReduce配置文件</p><p>配置mapred-site.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# vim mapred-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定MapReduce程序运行在Yarn上 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）在集群上分发配置好的Hadoop配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# cd ..[root@hadoop102 etc]# pwd/opt/module/hadoop-3.1.3/etc[root@hadoop102 etc]# xsync hadoop/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）去103和104上查看文件分发情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 ~]# cat /opt/module/hadoop-3.1.3/etc/hadoop/core-site.xml[root@hadoop104 ~]# cat /opt/module/hadoop-3.1.3/etc/hadoop/core-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-5-群起集群"><a href="#3-2-5-群起集群" class="headerlink" title="3.2.5 群起集群"></a>3.2.5 群起集群</h3><p>首先关闭防火墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#查看firewall状态systemctl status firewalld.service#停止firewallsystemctl stop firewalld.service#禁止firewall开机启动systemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1）配置workers</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# vim /opt/module/hadoop-3.1.3/etc/hadoop/workers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在该文件中增加如下内容：(localhost删除掉)</p><p>hadoop102</p><p>hadoop103</p><p>hadoop104</p><p>注意：该文件中添加的内容结尾不允许有空格，文件中不允许有空行。</p><p>同步所有节点配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# xsync workers <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）启动集群</p><p>​（1）<strong>如果集群是第一次启动</strong>，需要在hadoop102节点格式化NameNode（注意：格式化NameNode，会产生新的集群id，导致NameNode和DataNode的集群id不一致，集群找不到已往数据。如果集群在运行过程中报错，需要重新格式化NameNode的话，一定要先停止namenode和datanode进程，并且要删除所有机器的data和logs目录，然后再进行格式化。）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop-3.1.3]# hdfs namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）启动HDFS</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop-3.1.3]# sbin/start-dfs.sh#启动完毕使用jps命令查看[root@hadoop102 hadoop-3.1.3]# jps5409 Jps5124 DataNode4985 NameNode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#若出现如下错误[root@hadoop102 hadoop-3.1.3]# sbin/start-dfs.shStarting namenodes on [hadoop102]ERROR: Attempting to operate on hdfs namenode as rootERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.Starting datanodesERROR: Attempting to operate on hdfs datanode as rootERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.Starting secondary namenodes [hadoop104]ERROR: Attempting to operate on hdfs secondarynamenode as rootERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.#解决方法在/hadoop/sbin路径下：将start-dfs.sh，stop-dfs.sh两个文件顶部添加以下参数[root@hadoop102 hadoop-3.1.3]# cd sbin/#!/usr/bin/env bashHDFS_DATANODE_USER=rootHADOOP_SECURE_DN_USER=hdfsHDFS_NAMENODE_USER=rootHDFS_SECONDARYNAMENODE_USER=root还有，start-yarn.sh，stop-yarn.sh顶部也需添加以下：YARN_RESOURCEMANAGER_USER=rootHADOOP_SECURE_DN_USER=yarnYARN_NODEMANAGER_USER=root修改后重启 ./start-dfs.sh，成功！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在配置了ResourceManager的节点（hadoop103）启动YARN</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 hadoop-3.1.3]# sbin/start-yarn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#若执行上面的命令报如下错误[root@hadoop103 hadoop-3.1.3]# sbin/start-yarn.shStarting resourcemanagerERROR: Attempting to operate on yarn resourcemanager as rootERROR: but there is no YARN_RESOURCEMANAGER_USER defined. Aborting operation.Starting nodemanagersERROR: Attempting to operate on yarn nodemanager as rootERROR: but there is no YARN_NODEMANAGER_USER defined. Aborting operation.#解决方法在sbin 目录下 更改 start-yarn.sh 和 stop-yarn.sh 信息，在两个配置文件的第一行添加：[root@hadoop103 hadoop-3.1.3]# cd sbin/#!/usr/bin/env bashYARN_RESOURCEMANAGER_USER=rootHADOOP_SECURE_DN_USER=yarnYARN_NODEMANAGER_USER=root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）Web端查看HDFS的NameNode</p><p>（a）浏览器中输入：<a href="http://hadoop102:9870/">http://hadoop102:9870</a>   ==注意：要在Hadoop102的服务器访问==</p><p>​（b）查看HDFS上存储的数据信息</p><p>（5）Web端查看YARN的ResourceManager</p><p>（a）浏览器中输入：<a href="http://hadoop103:8088/">http://hadoop103:8088</a>  ==注意：要在Hadoop103的服务器访问==</p><p>​（b）查看YARN上运行的Job信息</p><p>3）集群基本测试</p><p>（1）上传文件到集群</p><p>​上传小文件</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151809735.png" alt="image-20220912151809735"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# hadoop fs -mkdir /input#输入上面该命令再hadoop102上输入http://hadoop102:9870/explorer.html#/访问[root@hadoop102 ~]# hadoop fs -put $HADOOP_HOME/wcinput/word.txt /input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​上传大文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# hadoop fs -put  /opt/software/jdk-8u212-linux-x64.tar.gz  /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）上传文件后查看文件存放在什么位置</p><p>​查看HDFS文件存储路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 subdir0]# pwd/opt/module/hadoop-3.1.3/data/dfs/data/current/BP-1436128598-192.168.10.102-1610603650062/current/finalized/subdir0/subdir0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​查看HDFS在磁盘存储文件内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 subdir0]# cat blk_1073741825hadoop yarnhadoop mapreduce atguiguatguigu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）拼接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-rw-rw-r--. 1 atguigu atguigu 134217728 5月 23 16:01 **blk_1073741836**-rw-rw-r--. 1 atguigu atguigu  1048583 5月 23 16:01 blk_1073741836_1012.meta-rw-rw-r--. 1 atguigu atguigu  63439959 5月 23 16:01 **blk_1073741837**-rw-rw-r--. 1 atguigu atguigu   495635 5月 23 16:01 blk_1073741837_1013.meta[root@hadoop102 subdir0]# cat blk_1073741836&gt;&gt;tmp.tar.gz[root@hadoop102 subdir0]# cat blk_1073741837&gt;&gt;tmp.tar.gz[root@hadoop102 subdir0]# tar -zxvf tmp.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop104 software]# hadoop fs -get /jdk-8u212-linux-x64.tar.gz ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）执行wordcount程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop-3.1.3]# hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount /input /output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==注意==：当执行wordcount程序时运行结果如下</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151837913.png" alt="image-20220912151837913"></p><p>这时需要在集群的yarn-site.xml中添加如下配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.resource.memory-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>4096<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.minimum-allocation-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>2048<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.vmem-pmem-ratio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时还要在集群的 mapred-site.xml 添加以下内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.app.mapreduce.am.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>HADOOP_MAPRED_HOME=/opt/module/hadoop-3.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.map.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>HADOOP_MAPRED_HOME=/opt/module/hadoop-3.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.reduce.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>HADOOP_MAPRED_HOME=/opt/module/hadoop-3.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行wordcount程序成功的运行结果如下</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151901254.png" alt="image-20220912151901254"></p><h3 id="3-2-6-配置历史服务器"><a href="#3-2-6-配置历史服务器" class="headerlink" title="3.2.6 配置历史服务器"></a><strong>3.2.6</strong> <strong>配置历史服务器</strong></h3><p>为了查看程序的历史运行情况，需要配置一下历史服务器。具体配置步骤如下：</p><p><strong>1</strong>）配置 mapred-site.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# pwd/opt/module/hadoop-3.1.3/etc/hadoop[root@hadoop102 hadoop]# vim mapred-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在该文件里面增加如下配置。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 历史服务器端地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop102:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 历史服务器 web 端地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop102:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2</strong>）分发配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# xsync $HADOOP_HOME/etc/hadoop/mapred-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3</strong>）<strong>在</strong> <strong>hadoop102</strong> <strong>启动历史服务器</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# mapred --daemon start historyserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4</strong>）<strong>查看历史服务器是否启动</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# jps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5</strong>）查看 <strong>JobHistory</strong></p><p><a href="http://hadoop102:19888/jobhistory">http://hadoop102:19888/jobhistory</a></p><h3 id="3-2-7-配置日志的聚集"><a href="#3-2-7-配置日志的聚集" class="headerlink" title="3.2.7 配置日志的聚集"></a><strong>3.2.7</strong> <strong>配置日志的聚集</strong></h3><p>日志聚集概念：应用运行完成以后，将程序运行日志信息上传到 HDFS 系统上。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912151927514.png" alt="image-20220912151927514"></p><p>日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。</p><p>==注意：开启日志聚集功能，需要重新启动 NodeManager 、ResourceManager 和HistoryServer。==</p><p>开启日志聚集功能具体步骤如下： </p><p><strong>1</strong>）<strong>配置yarn-site.xml</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# vim yarn-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在该文件里面增加如下配置。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 开启日志聚集功能 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.log.server.url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>http://hadoop102:19888/jobhistory/logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 设置日志保留时间为 7 天 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.log-aggregation.retain-seconds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>604800<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2</strong>）<strong>分发配置</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop]# xsync $HADOOP_HOME/etc/hadoop/yarn-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3</strong>）关闭 <strong>NodeManager</strong> 、<strong>ResourceManager</strong> <strong>和</strong> <strong>HistoryServer</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 hadoop-3.1.3]# sbin/stop-yarn.sh[root@hadoop103 hadoop-3.1.3]# mapred --daemon  stop historyserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4</strong>）启动 <strong>NodeManager</strong> 、<strong>ResourceManage和HistoryServer</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 ~]# start-yarn.sh[root@hadoop102 ~]# mapred --daemon start historyserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>5</strong>）<strong>删除HDFS 上已经存在的输出文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# hadoop fs -rm -r /output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>6</strong>）<strong>执行WordCount 程序</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 hadoop-3.1.3]# hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount /input /output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>7</strong>）<strong>查看日志</strong></p><p>（1）历史服务器地址</p><p>​      <a href="http://hadoop102:19888/jobhistory">http://hadoop102:19888/jobhistory</a></p><p>  (2）历史任务列表</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912152002023.png" alt="image-20220912152002023"></p><p>(3）查看任务运行日志</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912152019031.png" alt="image-20220912152019031"></p><p>(4）运行日志详情</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912152037104.png" alt="image-20220912152037104"></p><h3 id="3-2-8集群启动-x2F-停止方式总结"><a href="#3-2-8集群启动-x2F-停止方式总结" class="headerlink" title="3.2.8集群启动/停止方式总结"></a>3.2.8集群启动/停止方式总结</h3><p><strong>1）各个模块分开启动/停止</strong>（配置ssh是前提）<strong>常用</strong></p><p>​（1）整体启动/停止HDFS</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">start-dfs.sh/stop-dfs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​（2）整体启动/停止YARN</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">start-yarn.sh/stop-yarn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2）各个服务组件逐一启动/停止</strong></p><p>​（1）分别启动/停止HDFS组件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hdfs --daemon start/stop namenode/datanode/secondarynamenode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​（2）启动/停止YARN</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yarn --daemon start/stop resourcemanager/nodemanager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-9编写Hadoop集群常用脚本"><a href="#3-2-9编写Hadoop集群常用脚本" class="headerlink" title="3.2.9编写Hadoop集群常用脚本"></a><strong>3.2.9编写Hadoop集群常用脚本</strong></h3><p><strong>1）Hadoop集群启停脚本（包含HDFS，Yarn，Historyserver）：myhadoop.sh</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# cd bin[root@hadoop102 bin]#vim myhadoop.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!/bin/bashif [ $# -lt 1 ]then  echo "No Args Input..."  exit ;ficase $1 in"start")    echo " =================== 启动 hadoop集群 ==================="     echo " --------------- 启动 hdfs ---------------"    ssh hadoop102 "/opt/module/hadoop-3.1.3/sbin/start-dfs.sh"    echo " --------------- 启动 yarn ---------------"    ssh hadoop103 "/opt/module/hadoop-3.1.3/sbin/start-yarn.sh"    echo " --------------- 启动 historyserver ---------------"    ssh hadoop102 "/opt/module/hadoop-3.1.3/bin/mapred --daemon start historyserver";;"stop")    echo " =================== 关闭 hadoop集群 ==================="     echo " --------------- 关闭 historyserver ---------------"    ssh hadoop102 "/opt/module/hadoop-3.1.3/bin/mapred --daemon stop historyserver"    echo " --------------- 关闭 yarn ---------------"    ssh hadoop103 "/opt/module/hadoop-3.1.3/sbin/stop-yarn.sh"    echo " --------------- 关闭 hdfs ---------------"    ssh hadoop102 "/opt/module/hadoop-3.1.3/sbin/stop-dfs.sh";;*)  echo "Input Args Error...";;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 保存后退出，然后赋予脚本执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 bin]# chmod 777 myhadoop.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2）查看三台服务器Java进程脚本：jpsall</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# cd bin[root@hadoop102 bin]# vim jpsall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!/bin/bashfor host in hadoop102 hadoop103 hadoop104do    echo =============== $host ===============    ssh $host jps done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 保存后退出，然后赋予脚本执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 bin]# chmod 777 jpsall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3）分发/home/hadoop/bin目录，保证自定义脚本在三台机器上都可以使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# xsync bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-10-常用端口号说明"><a href="#3-2-10-常用端口号说明" class="headerlink" title="**3.2.10 **常用端口号说明"></a>**3.2.10 **常用端口号说明</h3><table><thead><tr><th>端口名称</th><th>Hadoop2.x</th><th>Hadoop3.x</th></tr></thead><tbody><tr><td>NameNode内部通信端口</td><td>8020 / 9000</td><td>==8020== / 9000/9820</td></tr><tr><td>NameNode HTTP UI对用户后的查询端口</td><td>==50070==</td><td>==9870==</td></tr><tr><td>MapReduce查看执行任务端口</td><td>8088</td><td>8088</td></tr><tr><td>历史服务器通信端口</td><td>19888</td><td>19888</td></tr></tbody></table><h3 id="3-2-11-集群时间同步"><a href="#3-2-11-集群时间同步" class="headerlink" title="3.2.11 集群时间同步"></a><strong>3.2.11 集群时间同步</strong></h3><p>==如果服务器在公网环境（能连接外网），可以不采用集群时间同步==，因为服务器会定期和公网时间进行校准；</p><p>如果服务器在内网环境，必须要配置集群时间同步，否则时间久了，会产生时间偏差，导致集群执行任务时间不同步。</p><p><strong>1）需求</strong></p><p>找一个机器，作为时间服务器，所有的机器与这台集群时间进行定时的同步，生产环境根据任务对时间的准确程度要求周期同步。测试环境为了尽快看到效果，采用1分钟同步一次。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912152107115.png" alt="image-20220912152107115"></p><p><strong>2）时间服务器配置（必须root用户）</strong></p><p>（1）==查看所有节点==ntpd服务状态和开机自启动状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# sudo systemctl status ntpdate.service[root@hadoop102 ~]# sudo systemctl start ntpdate.service[root@hadoop102 ~]# sudo systemctl is-enabled ntpdate.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）修改hadoop102的ntp.conf配置文件</p><p>注意：NTP服务先执行以下命令，要不然<code>/etc</code>目录下没有<code>ntp.conf</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# yum -y install ntp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# sudo vim /etc/ntp.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改内容如下</p><p>（a）修改1（授权192.168.==10.0==-192.168.==10.255==网段上的所有机器可以从这台机器上查询和同步时间）</p><p><code>\#restrict 192.168.10.0 mask 255.255.255.0 nomodify notrap</code></p><p>为<code>restrict 192.168.10.0 mask 255.255.255.0 nomodify notrap</code></p><p>​（b）修改2（集群在局域网中，不使用其他互联网上的时间）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server 0.centos.pool.ntp.org iburstserver 1.centos.pool.ntp.org iburstserver 2.centos.pool.ntp.org iburstserver 3.centos.pool.ntp.org iburst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#server 0.centos.pool.ntp.org iburst#server 1.centos.pool.ntp.org iburst#server 2.centos.pool.ntp.org iburst#server 3.centos.pool.ntp.org iburst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（c）添加3（当该节点丢失网络连接，依然可以采用本地时间作为时间服务器为集群中的其他节点提供时间同步）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server 127.127.1.0fudge 127.127.1.0 stratum 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912152135781.png" alt="image-20220912152135781"></p><p>（3）修改hadoop102的/etc/sysconfig/ntpd 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# sudo vim /etc/sysconfig/ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加内容如下（让硬件时间与系统时间一起同步）</p><pre class="line-numbers language-none"><code class="language-none">SYNC_HWCLOCK=yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）重新启动ntpd服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# sudo systemctl start ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）设置ntpd服务开机启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# sudo systemctl enable ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3）其他机器配置（必须root用户）</strong></p><p>（1）关闭所有节点上ntp服务和自启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 ~]# sudo systemctl stop ntpd[root@hadoop103 ~]# sudo systemctl disable ntpd[root@hadoop104 ~]# sudo systemctl stop ntpd[root@hadoop104 ~]# sudo systemctl disable ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在其他机器配置1分钟与时间服务器同步一次</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 ~]# sudo crontab -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编写定时任务如下：</p><pre class="line-numbers language-none"><code class="language-none">*/1 * * * * /usr/sbin/ntpdate hadoop102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）修改任意机器时间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 ~]# sudo date -s "2021-9-11 11:11:11"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）1分钟后查看机器是否与时间服务器同步</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop103 ~]# sudo date<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="常见错误及解决方案"><a href="#常见错误及解决方案" class="headerlink" title="常见错误及解决方案"></a><strong>常见错误及解决方案</strong></h1><p>1）防火墙没关闭、或者没有启动YARN</p><pre class="line-numbers language-none"><code class="language-none">INFO client.RMProxy: Connecting to ResourceManager at hadoop108/192.168.10.108:8032<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）主机名称配置错误</p><p>3）IP地址配置错误</p><p>4）ssh没有配置好</p><p>5）root用户和hadoop两个用户启动集群不统一</p><p>6）配置文件修改不细心</p><p>7）不识别主机名称</p><p>java.net.UnknownHostException: hadoop102: hadoop102</p><p>​    at java.net.InetAddress.getLocalHost(InetAddress.java:1475)</p><p>​    at org.apache.hadoop.mapreduce.JobSubmitter.submitJobInternal(JobSubmitter.java:146)</p><p>​    at org.apache.hadoop.mapreduce.Job$10.run(Job.java:1290)</p><p>​    at org.apache.hadoop.mapreduce.Job$10.run(Job.java:1287)</p><p>​    at java.security.AccessController.doPrivileged(Native Method)</p><p>at javax.security.auth.Subject.doAs(Subject.java:415)</p><p>解决办法：</p><p>（1）在/etc/hosts文件中添加192.168.10.102 hadoop102</p><p>​（2）主机名称不要起hadoop  hadoop000等特殊名称</p><p>8）DataNode和NameNode进程同时只能工作一个。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220912152206347.png" alt="image-20220912152206347"></p><p>9）执行命令不生效，粘贴Word中命令时，遇到-和长–没区分开。导致命令失效</p><p>解决办法：尽量不要粘贴Word中代码。</p><p>10）jps发现进程已经没有，但是重新启动集群，提示进程已经开启。</p><p>原因是在Linux的根目录下/tmp目录中存在启动的进程临时文件，将集群相关进程删除掉，再重新启动集群。</p><p>11）jps不生效</p><p>原因：全局变量hadoop java没有生效。解决办法：需要source /etc/profile文件。</p><p>12）8088端口连接不上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@hadoop102 ~]# cat /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释掉如下代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#127.0.0.1  localhost localhost.localdomain localhost4 localhost4.localdomain4#::1     hadoop102<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/2023/03/03/ji-he/"/>
      <url>/2023/03/03/ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922200412194.png" alt="image-20220922200412194"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922201301064.png" alt="image-20220922201301064"></p><h2 id="Collection接口常用的方法"><a href="#Collection接口常用的方法" class="headerlink" title="Collection接口常用的方法"></a>Collection接口常用的方法</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922205539004.png" alt="image-20220922205539004"></p><h3 id="add-E-e-确保此集合包含指定的元素（可选操作）。"><a href="#add-E-e-确保此集合包含指定的元素（可选操作）。" class="headerlink" title="add(E e) 确保此集合包含指定的元素（可选操作）。"></a>add(E e) 确保此集合包含指定的元素（可选操作）。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        /**         * Collection接口常用的方法：         * 增加：         *          add(E e)确保此集合包含指定的元素（可选操作）。         *          addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到这个集合（可选操作）。         * 修改：         * 删除:         *      clear()从这个集合中移除所有的元素（可选操作）。         *      remove(Object o) 从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。         * 查看：iterator() 返回此集合中的元素的迭代器。         * 判断：         *         contains(Object o) 返回此集合中的元素的迭代器。         *         equals(Object o) 将指定的对象与此集合进行比较，以进行相等性。         *         isEmpty() 返回 true如果集合不包含任何元素。         */        //通过Collection的实现类来创建对象（也就是多态）        Collection col = new ArrayList();        //添加add(E e)        col.add(18);        col.add(13);        col.add(20);        col.add(30);        System.out.println(col);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922205846242.png" alt="image-20220922205846242"></p><h3 id="addAll-Collection-lt-extends-E-gt-c-将指定集合中的所有元素添加到这个集合（可选操作）。"><a href="#addAll-Collection-lt-extends-E-gt-c-将指定集合中的所有元素添加到这个集合（可选操作）。" class="headerlink" title="addAll(Collection<?  extends E> c)  将指定集合中的所有元素添加到这个集合（可选操作）。"></a>addAll(Collection&lt;?  extends E&gt; c)  将指定集合中的所有元素添加到这个集合（可选操作）。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        /**         * Collection接口常用的方法：         * 增加：         *          add(E e)确保此集合包含指定的元素（可选操作）。         *          addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到这个集合（可选操作）。         * 修改：         * 删除:         *      clear()从这个集合中移除所有的元素（可选操作）。         *      remove(Object o) 从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。         * 查看：iterator() 返回此集合中的元素的迭代器。         * 判断：         *         contains(Object o) 返回此集合中的元素的迭代器。         *         equals(Object o) 将指定的对象与此集合进行比较，以进行相等性。         *         isEmpty() 返回 true如果集合不包含任何元素。         */        //通过Collection的实现类来创建对象（也就是多态）        Collection col = new ArrayList();        //添加add(E e)        col.add(18);        col.add(13);        col.add(20);        col.add(30);        //System.out.println(col);        //添加addAll(Collection&lt;? extends E&gt; c)        List&lt;Integer&gt; list = Arrays.asList(new Integer[]{20, 50, 45, 35});        col.addAll(list);        System.out.println(col);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922205921408.png" alt="image-20220922205921408"></p><h3 id="clear-从这个集合中移除所有的元素（可选操作）。"><a href="#clear-从这个集合中移除所有的元素（可选操作）。" class="headerlink" title="clear()从这个集合中移除所有的元素（可选操作）。"></a>clear()从这个集合中移除所有的元素（可选操作）。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        /**         * Collection接口常用的方法：         * 增加：         *          add(E e)确保此集合包含指定的元素（可选操作）。         *          addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到这个集合（可选操作）。         * 修改：         * 删除:         *      clear()从这个集合中移除所有的元素（可选操作）。         *      remove(Object o) 从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。         * 查看：iterator() 返回此集合中的元素的迭代器。         * 判断：         *         contains(Object o) 返回此集合中的元素的迭代器。         *         equals(Object o) 将指定的对象与此集合进行比较，以进行相等性。         *         isEmpty() 返回 true如果集合不包含任何元素。         */        //通过Collection的实现类来创建对象（也就是多态）        Collection col = new ArrayList();        //添加add(E e)        col.add(18);        col.add(13);        col.add(20);        col.add(30);               //清空集合        col.clear();        System.out.println("集合的个数为："+col.size());        System.out.println("集合是否为空"+col.isEmpty());        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922210153128.png" alt="image-20220922210153128"></p><h3 id="contains-Object-o-返回-true如果集合包含指定元素。"><a href="#contains-Object-o-返回-true如果集合包含指定元素。" class="headerlink" title="contains(Object o)返回 true如果集合包含指定元素。"></a>contains(Object o)返回 true如果集合包含指定元素。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package cn.codesheep.test.Collection;import java.util.ArrayList;import java.util.Arrays;import java.util.Collection;import java.util.List;public class Demo01 {    public static void main(String[] args) {        /**         * Collection接口常用的方法：         * 增加：         *          add(E e)确保此集合包含指定的元素（可选操作）。         *          addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到这个集合（可选操作）。         * 修改：         * 删除:         *      clear()从这个集合中移除所有的元素（可选操作）。         *      remove(Object o) 从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。         * 查看：iterator() 返回此集合中的元素的迭代器。         * 判断：         *         contains(Object o) 返回此集合中的元素的迭代器。         *         equals(Object o) 将指定的对象与此集合进行比较，以进行相等性。         *         isEmpty() 返回 true如果集合不包含任何元素。         */        //通过Collection的实现类来创建对象（也就是多态）        Collection col = new ArrayList();        //添加add(E e)        col.add(18);        col.add(13);        col.add(20);        col.add(30);        System.out.println(col);        System.out.println("集合中的是否包含15除"+col.contains(15));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922210919347.png" alt="image-20220922210919347"></p><h3 id="equals-Object-o-将指定的对象与此集合进行比较，以进行相等性。"><a href="#equals-Object-o-将指定的对象与此集合进行比较，以进行相等性。" class="headerlink" title="equals(Object o)  将指定的对象与此集合进行比较，以进行相等性。"></a>equals(Object o)  将指定的对象与此集合进行比较，以进行相等性。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        /**         * Collection接口常用的方法：         * 增加：         *          add(E e)确保此集合包含指定的元素（可选操作）。         *          addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到这个集合（可选操作）。         * 修改：         * 删除:         *      clear()从这个集合中移除所有的元素（可选操作）。         *      remove(Object o) 从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。         * 查看：iterator() 返回此集合中的元素的迭代器。         * 判断：         *         contains(Object o) 返回此集合中的元素的迭代器。         *         equals(Object o) 将指定的对象与此集合进行比较，以进行相等性。         *         isEmpty() 返回 true如果集合不包含任何元素。         */        Collection col1 = new ArrayList();//        List&lt;Integer&gt; list1 = Arrays.asList(new Integer[]{5, 4, 36, 2, 1});//        col1.addAll(list1);        col1.add(1);        col1.add(2);        col1.add(3);        Collection col2 = new ArrayList();//        List&lt;Integer&gt; list2 = Arrays.asList(new Integer[]{5, 4, 36, 2, 1});//        col1.addAll(list2);        col2.add(1);        col2.add(2);        col2.add(3);System.out.println("集合col1与集合col2是否相等："+ (col1==col2));//由于col与col1是两个不同的对象，所有内存地址一定不相等        System.out.println("集合col1与集合col2的元素是否相等："+ col1.equals(col2));//判断集合col1与col2的元素是否相等,注意如果使用List&lt;Integer&gt; list2 = Arrays.asList(new Integer[]{5, 4, 36, 2, 1});往集合添加数据则这两个集合不相等    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922211011742.png" alt="image-20220922211011742"></p><h3 id="isEmpty-返回-true如果集合不包含任何元素。"><a href="#isEmpty-返回-true如果集合不包含任何元素。" class="headerlink" title="isEmpty()  返回 true如果集合不包含任何元素。"></a>isEmpty()  返回 true如果集合不包含任何元素。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        /**         * Collection接口常用的方法：         * 增加：         *          add(E e)确保此集合包含指定的元素（可选操作）。         *          addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到这个集合（可选操作）。         * 修改：         * 删除:         *      clear()从这个集合中移除所有的元素（可选操作）。         *      remove(Object o) 从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。         * 查看：iterator() 返回此集合中的元素的迭代器。         * 判断：         *         contains(Object o) 返回此集合中的元素的迭代器。         *         equals(Object o) 将指定的对象与此集合进行比较，以进行相等性。         *         isEmpty() 返回 true如果集合不包含任何元素。         */        //通过Collection的实现类来创建对象（也就是多态）        Collection col = new ArrayList();        //添加add(E e)        col.add(18);        col.add(13);        col.add(20);        col.add(30);        //添加addAll(Collection&lt;? extends E&gt; c)        List&lt;Integer&gt; list = Arrays.asList(new Integer[]{20, 50, 45, 35});        col.addAll(list);        System.out.println(col);        System.out.println("集合是否为空"+col.isEmpty());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922211053085.png" alt="image-20220922211053085"></p><h3 id="remove-Object-o-从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。"><a href="#remove-Object-o-从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。" class="headerlink" title="remove(Object o)  从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。"></a>remove(Object o)  从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        /**         * Collection接口常用的方法：         * 增加：         *          add(E e)确保此集合包含指定的元素（可选操作）。         *          addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到这个集合（可选操作）。         * 修改：         * 删除:         *      clear()从这个集合中移除所有的元素（可选操作）。         *      remove(Object o) 从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。         * 查看：iterator() 返回此集合中的元素的迭代器。         * 判断：         *         contains(Object o) 返回此集合中的元素的迭代器。         *         equals(Object o) 将指定的对象与此集合进行比较，以进行相等性。         *         isEmpty() 返回 true如果集合不包含任何元素。         */        //通过Collection的实现类来创建对象（也就是多态）        Collection col = new ArrayList();        //添加add(E e)        col.add(18);        col.add(13);        col.add(20);        col.add(30);        System.out.println(col);        boolean remove = col.remove(20);        System.out.println("集合中的元素20是否已经移除：" + remove);    System.out.println(col);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922211143503.png" alt="image-20220922211143503"></p><h3 id="size-返回此集合中的元素的数目。"><a href="#size-返回此集合中的元素的数目。" class="headerlink" title="size()  返回此集合中的元素的数目。"></a>size()  返回此集合中的元素的数目。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package cn.codesheep.test.Collection;import java.util.ArrayList;import java.util.Arrays;import java.util.Collection;import java.util.List;public class Demo01 {    public static void main(String[] args) {        /**         * Collection接口常用的方法：         * 增加：         *          add(E e)确保此集合包含指定的元素（可选操作）。         *          addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到这个集合（可选操作）。         * 修改：         * 删除:         *      clear()从这个集合中移除所有的元素（可选操作）。         *      remove(Object o) 从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。         * 查看：iterator() 返回此集合中的元素的迭代器。         * 判断：         *         contains(Object o) 返回此集合中的元素的迭代器。         *         equals(Object o) 将指定的对象与此集合进行比较，以进行相等性。         *         isEmpty() 返回 true如果集合不包含任何元素。         */        //通过Collection的实现类来创建对象（也就是多态）        Collection col = new ArrayList();        //添加add(E e)        col.add(18);        col.add(13);        col.add(20);        col.add(30);        System.out.println(col);        System.out.println("集合的个数为："+col.size());      }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922211226785.png" alt="image-20220922211226785"></p><h3 id="iterator-返回此集合中的元素的迭代器。-即遍历集合"><a href="#iterator-返回此集合中的元素的迭代器。-即遍历集合" class="headerlink" title="iterator()返回此集合中的元素的迭代器。 即遍历集合"></a>iterator()返回此集合中的元素的迭代器。 即遍历集合</h3><p>==<strong>注意：对集合进行遍历时不能用普通for循环，只能用增强for循环或while循环</strong>==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo02 {    public static void main(String[] args) {        Collection col = new ArrayList();        //添加add(E e)        col.add(18);        col.add(13);        col.add(20);        col.add(30);        //对集合进行遍历时不能用普通for循环，只能用增强for循环或while循环        //增强for循环        for (Object o : col) {            System.out.println(o);        }        System.out.println("---------------------------------");        //while循环        Iterator iterator = col.iterator();        while (iterator.hasNext()){            System.out.println(iterator.next());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922212009245.png" alt="image-20220922212009245"></p><h4 id="Iterator的底层原理"><a href="#Iterator的底层原理" class="headerlink" title="Iterator的底层原理"></a>Iterator的底层原理</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922212313881.png" alt="image-20220922212313881"></p><h2 id="List接口常用的方法"><a href="#List接口常用的方法" class="headerlink" title="List接口常用的方法"></a>List接口常用的方法</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923005015955.png" alt="image-20220923005015955"></p><h3 id="add-E-e-将指定的元素到这个列表的末尾（可选操作）。"><a href="#add-E-e-将指定的元素到这个列表的末尾（可选操作）。" class="headerlink" title="add(E e)  将指定的元素到这个列表的末尾（可选操作）。"></a>add(E e)  将指定的元素到这个列表的末尾（可选操作）。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        list.add(3,66);//向指定索引位置添加元素        System.out.println(list);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922213541311.png" alt="image-20220922213541311"></p><h3 id="set-int-index-E-element-用指定元素替换此列表中指定位置的元素（可选操作）。"><a href="#set-int-index-E-element-用指定元素替换此列表中指定位置的元素（可选操作）。" class="headerlink" title="set(int index, E element)  用指定元素替换此列表中指定位置的元素（可选操作）。"></a>set(int index, E element)  用指定元素替换此列表中指定位置的元素（可选操作）。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        list.add(3,66);//向指定索引位置添加元素        System.out.println(list);        //修改指定索引的元素        list.set(3,77);        System.out.println(list);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922213835256.png" alt="image-20220922213835256"></p><h3 id="remove-int-index-移除此列表中指定位置的元素（可选操作）。"><a href="#remove-int-index-移除此列表中指定位置的元素（可选操作）。" class="headerlink" title="remove(int index)  移除此列表中指定位置的元素（可选操作）。"></a>remove(int index)  移除此列表中指定位置的元素（可选操作）。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        list.add(3,66);        System.out.println(list);        //修改指定索引的元素        list.set(3,77);        System.out.println(list);        list.remove(3);//移除索引为3的元素        System.out.println(list);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922214202433.png" alt="image-20220922214202433"></p><h3 id="remove-Object-o-从该列表中移除指定元素的第一个发生，如果它是存在的（可选操作）。"><a href="#remove-Object-o-从该列表中移除指定元素的第一个发生，如果它是存在的（可选操作）。" class="headerlink" title="remove(Object o)  从该列表中移除指定元素的第一个发生，如果它是存在的（可选操作）。"></a>remove(Object o)  从该列表中移除指定元素的第一个发生，如果它是存在的（可选操作）。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package cn.codesheep.test.List;import java.util.ArrayList;import java.util.Iterator;import java.util.List;public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        list.remove(list.get(2));        System.out.println(list);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922220014871.png" alt="image-20220922220014871"></p><h3 id="size-返回此列表中元素的数目。"><a href="#size-返回此列表中元素的数目。" class="headerlink" title="size()  返回此列表中元素的数目。"></a>size()  返回此列表中元素的数目。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        System.out.println("List集合的长度(集合中元素的个数)："+ list.size());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922214752878.png" alt="image-20220922214752878"></p><h3 id="get-int-index-返回此列表中指定位置的元素"><a href="#get-int-index-返回此列表中指定位置的元素" class="headerlink" title="get(int index)  返回此列表中指定位置的元素"></a>get(int index)  返回此列表中指定位置的元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        Object o = list.get(2);//获取索引为2的元素        System.out.println(o);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922214554293.png" alt="image-20220922214554293"></p><h3 id="isEmpty-返回-true如果此列表不包含元素。"><a href="#isEmpty-返回-true如果此列表不包含元素。" class="headerlink" title="isEmpty() 返回 true如果此列表不包含元素。"></a>isEmpty() 返回 true如果此列表不包含元素。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        System.out.println("List集合是否为空："+ list.isEmpty());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922215626828.png" alt="image-20220922215626828"></p><h3 id="List集合的遍历"><a href="#List集合的遍历" class="headerlink" title="List集合的遍历"></a>List集合的遍历</h3><h4 id="方式一：普通for循环遍历"><a href="#方式一：普通for循环遍历" class="headerlink" title="方式一：普通for循环遍历"></a>方式一：普通for循环遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        System.out.println("-------------------");        for (int i = 0; i &lt; list.size(); i++) {            System.out.println(list.get(i));        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922215101195.png" alt="image-20220922215101195"></p><h4 id="方式二：增强for循环遍历"><a href="#方式二：增强for循环遍历" class="headerlink" title="方式二：增强for循环遍历"></a>方式二：增强for循环遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        System.out.println("-----------------------");        for (Object o : list) {            System.out.println(o);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922215243183.png" alt="image-20220922215243183"></p><h4 id="方式三：迭代器遍历"><a href="#方式三：迭代器遍历" class="headerlink" title="方式三：迭代器遍历"></a>方式三：迭代器遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01 {    public static void main(String[] args) {        List list = new ArrayList();        list.add(13);        list.add(17);        list.add(16);        list.add(10);        list.add(-6);        System.out.println(list);        System.out.println("迭代器遍历");        Iterator iterator = list.iterator();        while (iterator.hasNext()){            System.out.println(iterator.next());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922215452004.png" alt="image-20220922215452004"></p><h2 id="Set接口常用的方法"><a href="#Set接口常用的方法" class="headerlink" title="Set接口常用的方法"></a>Set接口常用的方法</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923004912989.png" alt="image-20220923004912989"></p><p><strong>==注意：set集合的元素不能重复，若添加时有重复的元素，则，只添加第一个，而且是无序的集合==</strong></p><h4 id="add-E-e-如果没有当前（可选操作），则将指定的元素添加到该集合中。"><a href="#add-E-e-如果没有当前（可选操作），则将指定的元素添加到该集合中。" class="headerlink" title="add(E e)  如果没有当前（可选操作），则将指定的元素添加到该集合中。"></a>add(E e)  如果没有当前（可选操作），则将指定的元素添加到该集合中。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Set set = new HashSet&lt;&gt;();        set.add(15);        set.add(14);        set.add(13);        set.add(15);        System.out.println(set);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923001734772.png" alt="image-20220923001734772"></p><h5 id="注意：如果add-方法添加的内容是自定义的类，那么就不满足集合中的元素唯一了，"><a href="#注意：如果add-方法添加的内容是自定义的类，那么就不满足集合中的元素唯一了，" class="headerlink" title="注意：如果add()方法添加的内容是自定义的类，那么就不满足集合中的元素唯一了，"></a><strong>注意：如果add()方法添加的内容是自定义的类，那么就不满足集合中的元素唯一了，</strong></h5><p>例如：</p><p>创建一个Student类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Student {    private Integer age;    private String name;    public Student() {    }    public Student(Integer age, String name) {        this.age = age;        this.name = name;    }    public Integer getAge() {        return age;    }    public void setAge(Integer age) {        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    @Override    public String toString() {        return "Student{" +                "age=" + age +                ", name='" + name + '\'' +                '}';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test {    public static void main(String[] args) {        Set&lt;Student&gt; set = new HashSet&lt;&gt;();        set.add(new Student(19,"lili"));        set.add(new Student(20,"feifei"));        set.add(new Student(18,"lulu"));        set.add(new Student(17,"nana"));        set.add(new Student(19,"lili"));        set.add(new Student(20,"lili"));        System.out.println("set集合的元素个数为："+set.size());        System.out.println(set);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924102755625.png" alt="image-20220924102755625"></p><h5 id="问题：上面自定义的类型不满足唯一，无序的特点。为什么呢"><a href="#问题：上面自定义的类型不满足唯一，无序的特点。为什么呢" class="headerlink" title="问题：上面自定义的类型不满足唯一，无序的特点。为什么呢?"></a>问题：上面自定义的类型不满足唯一，无序的特点。为什么呢?</h5><p>答：原因是Student类没有重写equals()方法和hashCode()方法，解决方法是在Student类重写equals()方法和hashCode()方法，添加如下的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Overridepublic boolean equals(Object o) {    if (this == o) return true;    if (o == null || getClass() != o.getClass()) return false;    Student student = (Student) o;    return age.equals(student.age) &amp;&amp; name.equals(student.name);}@Overridepublic int hashCode() {    return Objects.hash(age, name);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重写equals()方法和hashCode()方法后的结果</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924104430516.png" alt="image-20220924104430516"></p><h3 id="HashSet原理图（简要原理图）"><a href="#HashSet原理图（简要原理图）" class="headerlink" title="HashSet原理图（简要原理图）"></a>HashSet原理图（简要原理图）</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924104539946.png" alt="image-20220924104539946"></p><h4 id="【5】疑问"><a href="#【5】疑问" class="headerlink" title="【5】疑问:"></a>【5】疑问:</h4><p>1.数组的长度是多少。</p><p>⒉数组的类型是什么?</p><p>3.hashCode，equals方法真的调用了吗?验证4.底层表达式是什么?</p><p>5.同一个位置的数据向前放还是向后放?</p><p>6.放入数组中的数据，是直接放的吗?是否封装为对象了?l</p><h4 id="addAll-Collection-lt-extends-E-gt-c-如果没有当前（可选操作），将指定集合中的所有元素添加到该集合中。"><a href="#addAll-Collection-lt-extends-E-gt-c-如果没有当前（可选操作），将指定集合中的所有元素添加到该集合中。" class="headerlink" title="addAll(Collection<? extends E> c)  如果没有当前（可选操作），将指定集合中的所有元素添加到该集合中。"></a>addAll(Collection&lt;? extends E&gt; c)  如果没有当前（可选操作），将指定集合中的所有元素添加到该集合中。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Set set2 = new HashSet&lt;&gt;();        List&lt;Integer&gt; integers = Arrays.asList(new Integer[]{12, 23, 4, 5, 56});        set2.addAll(integers);        System.out.println(set2);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923001956530.png" alt="image-20220923001956530"></p><h4 id="clear-从这个集合中移除所有的元素（可选操作）。-1"><a href="#clear-从这个集合中移除所有的元素（可选操作）。-1" class="headerlink" title="clear()  从这个集合中移除所有的元素（可选操作）。"></a>clear()  从这个集合中移除所有的元素（可选操作）。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Set set2 = new HashSet&lt;&gt;();        List&lt;Integer&gt; integers = Arrays.asList(new Integer[]{12, 23, 4, 5, 56});        set2.addAll(integers);        System.out.println(set2);        set2.clear();        System.out.println("----------------------");        System.out.println("set集合的元素是否清空？" + set2);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923002256333.png" alt="image-20220923002256333"></p><h4 id="contains-Object-o-如果这套-true返回包含指定的元素。"><a href="#contains-Object-o-如果这套-true返回包含指定的元素。" class="headerlink" title="contains(Object o)  如果这套 true返回包含指定的元素。"></a>contains(Object o)  如果这套 true返回包含指定的元素。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Set set2 = new HashSet&lt;&gt;();        List&lt;Integer&gt; integers = Arrays.asList(new Integer[]{12, 23, 4, 5, 56});        set2.addAll(integers);        System.out.println(set2);        System.out.println("-----------------------");        boolean contains = set2.contains(23);        System.out.println("元素23是否在Set集合中？"+ contains);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923002531019.png" alt="image-20220923002531019"></p><h4 id="equals-Object-o-将指定的对象与此设置的相等性进行比较。"><a href="#equals-Object-o-将指定的对象与此设置的相等性进行比较。" class="headerlink" title="equals(Object o)  将指定的对象与此设置的相等性进行比较。"></a>equals(Object o)  将指定的对象与此设置的相等性进行比较。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Set set = new HashSet&lt;&gt;();        set.add(12);        set.add(23);        set.add(4);        set.add(5);        set.add(56);        System.out.println(set);        Set set2 = new HashSet&lt;&gt;();        List&lt;Integer&gt; integers = Arrays.asList(new Integer[]{12, 23, 4, 5, 56});        set2.addAll(integers);        System.out.println(set2);        System.out.println("集合set与set2是否相等？"+( set == set2));//set与set2是两个对象，内存地址不同，故不相等        System.out.println("集合set与set2中的元素是否相等？"+set.equals(set2));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923003105132.png" alt="image-20220923003105132"></h4><h4 id="isEmpty-返回-true如果这个集合不包含元素。"><a href="#isEmpty-返回-true如果这个集合不包含元素。" class="headerlink" title="isEmpty()  返回 true如果这个集合不包含元素。"></a>isEmpty()  返回 true如果这个集合不包含元素。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {                Set set2 = new HashSet&lt;&gt;();        List&lt;Integer&gt; integers = Arrays.asList(new Integer[]{12, 23, 4, 5, 56});        set2.addAll(integers);        System.out.println(set2);        boolean empty = set2.isEmpty();        System.out.println("集合set2是否为空？" + empty);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923003308361.png" alt="image-20220923003308361"></h4><h4 id="remove-Object-o-如果当前（可选操作），则从该集合中移除指定的元素。"><a href="#remove-Object-o-如果当前（可选操作），则从该集合中移除指定的元素。" class="headerlink" title="remove(Object o)  如果当前（可选操作），则从该集合中移除指定的元素。"></a>remove(Object o)  如果当前（可选操作），则从该集合中移除指定的元素。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Set set2 = new HashSet&lt;&gt;();        List&lt;Integer&gt; integers = Arrays.asList(new Integer[]{12, 23, 4, 5, 56});        set2.addAll(integers);        System.out.println(set2);        boolean remove = set2.remove(23); //移除指定元素，与List不同        System.out.println("集合set2中的元素23是否从集合中移除了？"+ remove);        System.out.println(set2);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923004203574.png" alt="image-20220923004203574"></p><h4 id="size-返回该集合中元素个数（其基数）。"><a href="#size-返回该集合中元素个数（其基数）。" class="headerlink" title="size()  返回该集合中元素个数（其基数）。"></a>size()  返回该集合中元素个数（其基数）。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Set set2 = new HashSet&lt;&gt;();        List&lt;Integer&gt; integers = Arrays.asList(new Integer[]{12, 23, 4, 5, 56});        set2.addAll(integers);        System.out.println(set2);        System.out.println("集合set2的元素个数（即长度）为？" + set2.size());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923003516782.png" alt="image-20220923003516782"></h4><h3 id="Set集合的遍历"><a href="#Set集合的遍历" class="headerlink" title="Set集合的遍历"></a>Set集合的遍历</h3><h4 id="方式一：增强for循环遍历"><a href="#方式一：增强for循环遍历" class="headerlink" title="方式一：增强for循环遍历"></a>方式一：增强for循环遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Set set2 = new HashSet&lt;&gt;();        List&lt;Integer&gt; integers = Arrays.asList(new Integer[]{12, 23, 4, 5, 56});        set2.addAll(integers);        System.out.println(set2);        System.out.println("增强for循环遍历");        for (Object o : set2) {            System.out.println(o);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式二：迭代器遍历"><a href="#方式二：迭代器遍历" class="headerlink" title="方式二：迭代器遍历"></a>方式二：迭代器遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Set set2 = new HashSet&lt;&gt;();        List&lt;Integer&gt; integers = Arrays.asList(new Integer[]{12, 23, 4, 5, 56});        set2.addAll(integers);        System.out.println(set2);        System.out.println("迭代器遍历");        Iterator iterator = set2.iterator();        while (iterator.hasNext()){            System.out.println(iterator.next());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LinkedHashSet实现类"><a href="#LinkedHashSet实现类" class="headerlink" title="LinkedHashSet实现类"></a>LinkedHashSet实现类</h2><p>==<strong>特点：唯一，有序，（按照输入顺序进行输出）</strong>==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class LinkedHashSet&lt;E&gt;    extends HashSet&lt;E&gt;    implements Set&lt;E&gt;, Cloneable, java.io.Serializable {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        LinkedHashSet&lt;Integer&gt; linkedHashSet = new LinkedHashSet&lt;&gt;();        linkedHashSet.add(123);        linkedHashSet.add(456);        linkedHashSet.add(654);        linkedHashSet.add(321);        linkedHashSet.add(123);        linkedHashSet.add(213);        System.out.println(linkedHashSet);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924124256856.png" alt="image-20220924124256856"></p><p>其实LinkedHashSet就是在HashSet的基础上，多了一个总的链表，这个总链表将放入的元素串在一起，方便有序的遍历</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="什么是泛型（Generic）？"><a href="#什么是泛型（Generic）？" class="headerlink" title="什么是泛型（Generic）？"></a>什么是泛型（Generic）？</h3><p><strong>泛型就相当于标签形式: &lt;&gt;</strong></p><p>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object,<br>JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的,因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。</p><p>Collection<e>, List<e>, ArrayList<e>这个<e>就是类型参数，即泛型。</e></e></e></e></p><p><strong>==注意：实例化的时候不指定泛型:如果实例化的时候不明确的指定类的泛型，那么认为此泛型为object类型==</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//泛型类public class GenericTest&lt;T&gt; {    int age;    String name;    T sex;    public void a(T n) {    }    public void b(T[] n) {    }}class Test{    public static void main(String[] args) {        //GenericTest进行实例化        //(1)实例化的时候不指定泛型:如果实例化的时候不明确的指定类的泛型，那么认为此泛型为object类型        GenericTest genericTest = new GenericTest&lt;&gt;();        genericTest.a("abc");        genericTest.a(17);        genericTest.a(1.7);        genericTest.b(new String[]{"a","b","c"});        //(2)实例化的时候指定泛型 推荐使用        GenericTest&lt;String&gt; test = new GenericTest&lt;&gt;();        test.sex = "男";        test.a("abc");        test.b(new String[]{"a","b","c"});    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型的继承情况"><a href="#泛型的继承情况" class="headerlink" title="泛型的继承情况"></a>泛型的继承情况</h3><h4 id="父类指定泛型的类型：指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用"><a href="#父类指定泛型的类型：指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用" class="headerlink" title="父类指定泛型的类型：指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用"></a>父类指定泛型的类型：指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SubGenericTest extends GenericTest&lt;Integer&gt;{    public static void main(String[] args) {        //指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用        SubGenericTest test = new SubGenericTest();        test.a(19);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="父类不指定泛型的类型：如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定-此时子类必须写符号"><a href="#父类不指定泛型的类型：如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定-此时子类必须写符号" class="headerlink" title="父类不指定泛型的类型：如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定:此时子类必须写符号"></a>父类不指定泛型的类型：如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定:此时子类必须写<e>符号</e></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定:此时子类必须写&lt;E&gt;符号public class SubGenericTest2&lt;E&gt; extends GenericTest&lt;E&gt;{    public static void main(String[] args) {        SubGenericTest2&lt;String&gt; test2 = new SubGenericTest2&lt;&gt;();        test2.a("abc");        test2.sex = "女";        test2.b(new String[]{"a","b","c"});    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场合"><a href="#应用场合" class="headerlink" title="应用场合"></a>应用场合</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="（1）泛型类可以定义多个参数类型"><a href="#（1）泛型类可以定义多个参数类型" class="headerlink" title="（1）泛型类可以定义多个参数类型"></a>（1）泛型类可以定义多个参数类型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MoreParamsGeneric &lt;A,B,C&gt;{    A age;    B name;    C sex;    public void a(A m,B n,C x) {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）泛型类构造器的写法：构造器不能写泛型"><a href="#（2）泛型类构造器的写法：构造器不能写泛型" class="headerlink" title="（2）泛型类构造器的写法：构造器不能写泛型"></a>（2）泛型类构造器的写法：构造器不能写泛型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MoreParamsGeneric &lt;A,B,C&gt;{    A age;    B name;    C sex;    public void a(A m,B n,C x) {    }    public MoreParamsGeneric(){            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922232920022.png" alt="image-20220922232920022"></p><h4 id="（3）-不同的泛型的引用类型不可以相互赋值"><a href="#（3）-不同的泛型的引用类型不可以相互赋值" class="headerlink" title="（3） 不同的泛型的引用类型不可以相互赋值:"></a>（3） 不同的泛型的引用类型不可以相互赋值:</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MoreParamsGeneric &lt;A,B,C&gt;{    A age;    B name;    C sex;    public void a(A m,B n,C x) {    }    public MoreParamsGeneric(){    }    public void b(){        ArrayList&lt;String&gt; list1 = null;        ArrayList&lt;Integer&gt; list2 = null;        list1 = list2;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922233221699.png" alt="image-20220922233221699"></p><h4 id="（4）泛型如果不指定，那么就会被擦除，反应对应的类型为Object类型"><a href="#（4）泛型如果不指定，那么就会被擦除，反应对应的类型为Object类型" class="headerlink" title="（4）泛型如果不指定，那么就会被擦除，反应对应的类型为Object类型:"></a>（4）泛型如果不指定，那么就会被擦除，反应对应的类型为Object类型:</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922233430624.png" alt="image-20220922233430624"></p><h4 id="（5）类中的静态方法不能使用类的泛型"><a href="#（5）类中的静态方法不能使用类的泛型" class="headerlink" title="（5）类中的静态方法不能使用类的泛型"></a>（5）类中的静态方法不能使用类的泛型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MoreParamsGeneric &lt;A,B,C&gt;{    A age;    B name;    C sex;    public void a(A m,B n,C x) {    }    public MoreParamsGeneric(){    }        public static  int c(A a){        return 10;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922233733709.png" alt="image-20220922233733709"></p><h4 id="（6）不能直接使用E-来创建数组的泛型"><a href="#（6）不能直接使用E-来创建数组的泛型" class="headerlink" title="（6）不能直接使用E[]来创建数组的泛型"></a>（6）不能直接使用E[]来创建数组的泛型</h4><p>错误的写法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public  void c(A m,B n,C x){      A[]a =new A[10];   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>正确的写法，且只能这样写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public  void c(A m,B n,C x){       A[] a =(A[])new Object[10];    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="什么是泛型方法？"><a href="#什么是泛型方法？" class="headerlink" title="什么是泛型方法？"></a>什么是泛型方法？</h3><p><strong>不是带泛型的方法就是泛型方法</strong></p><p><strong>泛型方法有要求：这个方法的泛型的参数类型要和当前的类的泛型无关换个角度:</strong></p><p><strong>泛型方法对应的那个泛型参数类型和当前所在的这个类是否是泛型类，与泛型是啥无关</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class GenericFunction &lt;E&gt;{        //不是泛型方法    public void a(E e){            }        //泛型方法    public &lt;T&gt; void b(T t){            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>泛型方法定义的时候，要在方法名前加上<t></t></strong></p><p>原因：如果不加的话，会把T当做一种数据类型，然而代码中没有T类型那么就会报错</p><p>T的类型是在调用方法的时候确定的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class GenericFunction &lt;E&gt;{    //不是泛型方法    public void a(E e){    }    //泛型方法    public &lt;T&gt; void b(T t){    }}class Demo{    public static void main(String[] args) {        GenericFunction&lt;String&gt; genericFunction = new GenericFunction&lt;&gt;();        genericFunction.a("zbc");        genericFunction.b(123);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922235652711.png" alt="image-20220922235652711"></p><p><strong>==注意：泛型方法可以是静态方法==</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220922235822310.png" alt="image-20220922235822310"></p><h3 id="总结-若A和B是子类与父类的关系，但是G和G不存在继承关系的。"><a href="#总结-若A和B是子类与父类的关系，但是G和G不存在继承关系的。" class="headerlink" title="总结: 若A和B是子类与父类的关系，但是G和G不存在继承关系的。"></a>总结: 若A和B是子类与父类的关系，但是G<a>和G<b>不存在继承关系的。</b></a></h3><p><a><b>例如</b></a></p><a><b><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class GenericTest1 {    public static void main(String[] args) {        //多态：父类引用指向子类对象        Object o = new Object();        String s = new String();        o = s;        //多态：父类引用指向子类对象        Object[] objects = new Object[10];        String[] str = new String[10];        objects = str;        List&lt;Object&gt; list1 = new ArrayList&lt;&gt;();        List&lt;String&gt; list2 = new ArrayList&lt;&gt;();        list1 = list2;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923122346669.png" alt="image-20220923122346669"></p></b></a><b><h3 id="泛型的通配符（-）"><a></a><a href="#泛型的通配符（-）" class="headerlink" title="泛型的通配符（?）"></a>泛型的通配符（?）</h3><h4 id="在没有通配符的时候："><a href="#在没有通配符的时候：" class="headerlink" title="在没有通配符的时候："></a>在没有通配符的时候：</h4><p>下面的a方法，相当于方法的重复定义，会报错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo1 {    public void a(List&lt;Object&gt; list){}    public void a(List&lt;String&gt; list){}    public void a(List&lt;Integer&gt; list){}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923123237752.png" alt="image-20220923123237752"></p><h4 id="引入通配符（-）"><a href="#引入通配符（-）" class="headerlink" title="引入通配符（?）"></a>引入通配符（?）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo1 {     public static void main(String[] args) {        ArrayList&lt;Object&gt; obj = new ArrayList&lt;&gt;();        ArrayList&lt;String&gt; str = new ArrayList&lt;&gt;();        ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();                List&lt;?&gt; list = null;        list = obj;        list = str;        list = arrayList;            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>发现：A和B是子类与父类的关系，G<a>和G<b>不存在子类与父类关系，是并列的，加入通配符?后，G&lt;?&gt;就变成了G</b></a><b><a>和G<b>的父类</b></a></b></strong></p><b><a><b></b></a><b><h4 id="使用通配符"><a></a><a href="#使用通配符" class="headerlink" title="使用通配符"></a>使用通配符</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo1 {    public void a(List&lt;?&gt; list){        //内部遍历的时候使用Object即可，不要用？        for (Object o : list) {            System.out.println(o);        }    }    public static void main(String[] args) {        Demo1 demo1 = new Demo1();        demo1.a(new ArrayList&lt;Integer&gt;());        demo1.a(new ArrayList&lt;String&gt;());        demo1.a(new ArrayList&lt;Object&gt;());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li><strong>写输入数据时不能随意添加数据，<code>list.add(null)</code>,add中的数据不能随意添加</strong></li><li><strong>数据读取使用Object类型来接收，<code>Object obj = list.get(0);</code></strong></li></ul><h3 id="泛型的受限"><a href="#泛型的受限" class="headerlink" title="泛型的受限"></a>泛型的受限</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Person {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Student extends Person{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test1 {    public static void main(String[] args) {        //这三个集合时并列的关系，不存在继承的关系        List&lt;Object&gt; a = new ArrayList&lt;&gt;();        List&lt;Person&gt; b = new ArrayList&lt;&gt;();        List&lt;Student&gt; c = new ArrayList&lt;&gt;();        /*使用泛型受限:               泛型上限：                    List&lt;? extends Person&gt;相当于，List&lt;? extends Person&gt;是 List&lt;Person&gt;的父类，是 List&lt;Person的子类（Student）&gt;的父类               泛型下限：                     List&lt;? super Person&gt;相当于，List&lt;? super Person&gt;是 List&lt;Person&gt;的父类，是 List&lt;Person父类（Object）&gt;的父类 */        /*List&lt;? extends Person&gt; list = null;        list = a;        list = b;        list = c;*/        List&lt;? super Person&gt; list = null;        list = a;        list = b;        list = c;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LinkedList常用的方法"><a href="#LinkedList常用的方法" class="headerlink" title="LinkedList常用的方法"></a>LinkedList常用的方法</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923131312341.png" alt="image-20220923131312341"></p><table><thead><tr><th>返回值</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>boolean</code></td><td><code>add(E e)</code>  将指定的元素列表的结束。</td></tr><tr><td><code>void</code></td><td><code>add(int index, E element)</code>  在列表中指定的位置上插入指定的元素。</td></tr><tr><td><code>boolean</code></td><td><code>addAll(Collection&lt;? extends E&gt; c)</code>  追加指定集合的所有元素到这个列表的末尾，按他们的指定集合的迭代器返回。</td></tr><tr><td><code>boolean</code></td><td><code>addAll(int index,  Collection&lt;? extends E&gt; c)</code>  将指定集合中的所有元素插入到该列表中，从指定位置开始。</td></tr><tr><td><code>void</code></td><td><code>addFirst(E e)</code>  在此列表的开始处插入指定的元素。</td></tr><tr><td><code>void</code></td><td></td></tr><tr><td><code>void</code></td><td><code>clear()</code>  从这个列表中移除所有的元素。</td></tr><tr><td><code>Object</code></td><td><code>clone()</code>  返回该 <code>LinkedList</code>浅拷贝。</td></tr><tr><td><code>boolean</code></td><td><code>contains(Object o)</code>  返回 <code>true</code>如果这个列表包含指定元素。</td></tr><tr><td><code>Iterator&lt;E&gt;</code></td><td><code>descendingIterator()</code>  返回在反向顺序在deque容器元素的迭代器。</td></tr><tr><td><code>E</code></td><td><code>element()</code>  检索，但不删除，此列表的头（第一个元素）。</td></tr><tr><td><code>E</code></td><td><code>get(int index)</code>  返回此列表中指定位置的元素。</td></tr><tr><td><code>E</code></td><td><code>getFirst()</code>  返回此列表中的第一个元素。</td></tr><tr><td><code>E</code></td><td><code>getLast()</code>  返回此列表中的最后一个元素。</td></tr><tr><td><code>int</code></td><td><code>indexOf(Object o)</code>  返回此列表中指定元素的第一个出现的索引，或-如果此列表不包含元素，或- 1。</td></tr><tr><td><code>int</code></td><td><code>lastIndexOf(Object o)</code>  返回此列表中指定元素的最后一个发生的索引，或-如果此列表不包含元素，或- 1。</td></tr><tr><td><code>ListIterator&lt;E&gt;</code></td><td><code>listIterator(int index)</code>  返回此列表中元素的列表迭代器（在适当的顺序），从列表中的指定位置开始。</td></tr><tr><td><code>boolean</code></td><td><code>offer(E e)</code>  将指定的元素添加到列表的尾部（最后一个元素）。</td></tr><tr><td><code>boolean</code></td><td><code>offerFirst(E e)</code>  在列表的前面插入指定的元素。</td></tr><tr><td><code>boolean</code></td><td><code>offerLast(E e)</code>  在列表的结尾插入指定的元素。</td></tr><tr><td><code>E</code></td><td><code>peek()</code>  检索，但不删除，此列表的头（第一个元素）。</td></tr><tr><td><code>E</code></td><td><code>peekFirst()</code>  检索，但不删除该列表的第一个元素，或返回 <code>null</code>如果这个列表是空的。</td></tr><tr><td><code>E</code></td><td><code>peekLast()</code>  检索，但不删除该列表的最后一个元素，或返回  <code>null</code>如果这个列表是空的。</td></tr><tr><td><code>E</code></td><td><code>poll()</code>  检索并删除此列表的头（第一个元素）。</td></tr><tr><td><code>E</code></td><td><code>pollFirst()</code>  检索并移除此列表的第一个元素，或返回 <code>null</code>如果这个列表是空的。</td></tr><tr><td><code>E</code></td><td><code>pollLast()</code>  检索并移除此列表的最后一个元素，或返回 <code>null</code>如果这个列表是空的。</td></tr><tr><td><code>E</code></td><td><code>pop()</code>  从这个列表所表示的堆栈中弹出一个元素。</td></tr><tr><td><code>void</code></td><td><code>push(E e)</code>  将一个元素推到由该列表所表示的堆栈上。</td></tr><tr><td><code>E</code></td><td><code>remove()</code>  检索并删除此列表的头（第一个元素）。</td></tr><tr><td><code>E</code></td><td><code>remove(int index)</code>  移除此列表中指定位置的元素。</td></tr><tr><td><code>boolean</code></td><td><code>remove(Object o)</code>  从该列表中移除指定元素的第一个发生，如果它是存在的。</td></tr><tr><td><code>E</code></td><td><code>removeFirst()</code>  移除并返回此列表中的第一个元素。</td></tr><tr><td><code>boolean</code></td><td><code>removeFirstOccurrence(Object o)</code>  删除此列表中指定元素的第一个出现（当遍历从头到尾的列表）。</td></tr><tr><td><code>E</code></td><td><code>removeLast()</code>  移除并返回此列表中的最后一个元素。</td></tr><tr><td><code>boolean</code></td><td><code>removeLastOccurrence(Object o)</code>  删除此列表中指定元素的最后一次（当遍历从头到尾的列表时）。</td></tr><tr><td><code>E</code></td><td><code>set(int index, E element)</code>  用指定元素替换此列表中指定位置的元素。</td></tr><tr><td><code>int</code></td><td><code>size()</code>  返回此列表中元素的数目。</td></tr><tr><td><code>Spliterator&lt;E&gt;</code></td><td><code>spliterator()</code>  创建一个后期绑定和快速失败 <a href="../../java/util/Spliterator.html"><code>Spliterator</code></a>超过此列表中的元素。</td></tr><tr><td><code>Object[]</code></td><td><code>toArray()</code>  返回一个数组，包含在这个列表中的所有元素在适当的顺序（从第一个到最后一个元素）。</td></tr><tr><td><code>&lt;T&gt; T[]</code></td><td><code>toArray(T[] a)</code>  返回一个数组，包含在这个列表中的所有元素在适当的顺序（从第一到最后一个元素）；返回数组的运行时类型是指定的数组的运行时类型。</td></tr></tbody></table><p><strong>大部分的方法与Collection、List、Se的方法类似，这里只写出与其他三种方法不同的方法</strong></p><h3 id="add-int-index-E-element-在列表中指定的位置上插入指定的元素。"><a href="#add-int-index-E-element-在列表中指定的位置上插入指定的元素。" class="headerlink" title="add(int index, E element)  在列表中指定的位置上插入指定的元素。"></a><code>add(int index, E element)</code>  在列表中指定的位置上插入指定的元素。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        linkedList.add("abc");        linkedList.add("bcd");        linkedList.add("cde");        linkedList.add("def");        linkedList.add("efg");        System.out.println(linkedList);        linkedList.add(2,"6666");        System.out.println("--------------------");        System.out.println(linkedList);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923201832084.png" alt="image-20220923201832084"></p><h3 id="addFirst-E-e-在此列表的开始处插入指定的元素。"><a href="#addFirst-E-e-在此列表的开始处插入指定的元素。" class="headerlink" title="addFirst(E e)  在此列表的开始处插入指定的元素。"></a><code>addFirst(E e)</code>  在此列表的开始处插入指定的元素。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        linkedList.add("abc");        linkedList.add("bcd");        linkedList.add("cde");        linkedList.add("def");        linkedList.add("efg");        System.out.println(linkedList);        linkedList.add(2,"6666");        System.out.println("--------------------");        System.out.println(linkedList);        linkedList.addFirst("123");        System.out.println("--------------------");        System.out.println(linkedList);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923204118995.png" alt="image-20220923204118995"></p><h3 id="addLast-E-e-将指定的元素列表的末尾。"><a href="#addLast-E-e-将指定的元素列表的末尾。" class="headerlink" title="addLast(E e)  将指定的元素列表的末尾。"></a><code>addLast(E e)</code>  将指定的元素列表的末尾。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        linkedList.add("abc");        linkedList.add("bcd");        linkedList.add("cde");        linkedList.add("def");        linkedList.add("efg");        System.out.println(linkedList);        linkedList.addLast("456");        System.out.println("--------------------");        System.out.println(linkedList);        System.out.println(linkedList.getFirst());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923204250882.png" alt="image-20220923204250882"></p><h3 id="getFirst-返回此列表中的第一个元素。"><a href="#getFirst-返回此列表中的第一个元素。" class="headerlink" title="getFirst()  返回此列表中的第一个元素。"></a><code>getFirst()</code>  返回此列表中的第一个元素。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package cn.codesheep.test.LinkedList;import java.util.LinkedList;public class Demo {    public static void main(String[] args) {        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        linkedList.add("abc");        linkedList.add("bcd");        linkedList.add("cde");        linkedList.add("def");        linkedList.add("efg");        System.out.println(linkedList);        linkedList.addLast("456");        System.out.println("--------------------");        System.out.println(linkedList);        System.out.println(linkedList.getFirst());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923204428167.png" alt="image-20220923204428167"></p><h3 id="getLast-返回此列表中的最后一个元素。"><a href="#getLast-返回此列表中的最后一个元素。" class="headerlink" title="getLast()  返回此列表中的最后一个元素。"></a><code>getLast()</code>  返回此列表中的最后一个元素。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        linkedList.add("abc");        linkedList.add("bcd");        linkedList.add("cde");        linkedList.add("def");        linkedList.add("efg");        System.out.println(linkedList);        System.out.println(linkedList.getLast());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923204628607.png" alt="image-20220923204628607"></p><h3 id="element-检索，但不删除，此列表的头（第一个元素）。即获取列表的第一个元素，与getFirst（）的作用一致"><a href="#element-检索，但不删除，此列表的头（第一个元素）。即获取列表的第一个元素，与getFirst（）的作用一致" class="headerlink" title="element()  检索，但不删除，此列表的头（第一个元素）。即获取列表的第一个元素，与getFirst（）的作用一致"></a><code>element()</code>  检索，但不删除，此列表的头（第一个元素）。即获取列表的第一个元素，与getFirst（）的作用一致</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package cn.codesheep.test.LinkedList;import java.util.LinkedList;public class Demo {    public static void main(String[] args) {        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        linkedList.add("abc");        linkedList.add("bcd");        linkedList.add("cde");        linkedList.add("def");        linkedList.add("efg");        System.out.println(linkedList);        String element = linkedList.element();        System.out.println(element);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923205033230.png" alt="image-20220923205033230"></p><p><code>offer(E e)</code>  将指定的元素添加到列表的尾部（最后一个元素）。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        linkedList.add("abc");        linkedList.add("bcd");        linkedList.add("cde");        linkedList.add("def");        linkedList.add("efg");        System.out.println(linkedList);        linkedList.offer("王炸");        System.out.println(linkedList);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923205228996.png" alt="image-20220923205228996"></p><p><code>offerFirst(E e)</code>  在列表的前面插入指定的元素。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        linkedList.add("abc");        linkedList.add("bcd");        linkedList.add("cde");        linkedList.add("def");        linkedList.add("efg");        System.out.println(linkedList);        linkedList.offerFirst("张三");        System.out.println(linkedList);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923205417004.png" alt="image-20220923205417004"></p><p><code>offerLast(E e)</code>  在列表的结尾插入指定的元素。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package cn.codesheep.test.LinkedList;import java.util.LinkedList;public class Demo {    public static void main(String[] args) {        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        linkedList.add("abc");        linkedList.add("bcd");        linkedList.add("cde");        linkedList.add("def");        linkedList.add("efg");        System.out.println(linkedList);                linkedList.offerLast("最后的元素");        System.out.println(linkedList);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923205712780.png" alt="image-20220923205712780"></p><p><strong>ArrayList的数据结构</strong></p><p><strong>物理结构：紧密结构</strong></p><p><strong>逻辑结构：线性表（数组）</strong></p><p><strong>LinkedList的数据结构</strong></p><p><strong>物理结构：跳转结构</strong></p><p><strong>逻辑结构：线性表（链表）</strong></p><p>==<strong>LinkedList的底层数据结构是双向链表</strong>==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923231911799.png" alt="image-20220923231911799"></p><h3 id="模拟LinkedList源码"><a href="#模拟LinkedList源码" class="headerlink" title="模拟LinkedList源码"></a>模拟LinkedList源码</h3><h4 id="创建一个Node类"><a href="#创建一个Node类" class="headerlink" title="创建一个Node类"></a>创建一个Node类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Node {  //节点类    //三个属性：上一个元素地址，当前元素地址，下一个元素地址    //上一个元素地址    private Node pre;    //当前元素地址    private Object obj;    //下一个元素地址    private Node next;    public Node() {    }    public Node(Node pre, Object obj, Node next) {        this.pre = pre;        this.obj = obj;        this.next = next;    }    public Node getPre() {        return pre;    }    public void setPre(Node pre) {        this.pre = pre;    }    public Object getObj() {        return obj;    }    public void setObj(Object obj) {        this.obj = obj;    }    public Node getNext() {        return next;    }    public void setNext(Node next) {        this.next = next;    }    @Override    public String toString() {        return "Node{" +                "pre=" + pre +                ", obj=" + obj +                ", next=" + next +                '}';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建一个MyLinkedList类"><a href="#创建一个MyLinkedList类" class="headerlink" title="创建一个MyLinkedList类"></a>创建一个MyLinkedList类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">//链中一定有一个首节点和一个未节点public class MyLinkedList {    //首节点    Node first;    //未节点    Node last;    //计数器    int count = 0;    //提供一个无参构造器    public MyLinkedList() {    }    //添加元素的方法    public void add(Object o){        if (first == null){//证明你添加的元素是第一个节点:            //将添加的元素封装为一个Node对象            Node n = new Node();            n.setPre(null);            n.setObj(o);            n.setNext(null);            //当前链中第一个节点变为n            first = n;            //当前链中最后一个节点变为n            last = n;        }else {            //证明已经不是链中第一个节点了            Node node = new Node();            node.setPre(last); //node的上一个节点一定是当前链中的最后一个节点last            node.setObj(o);            node.setNext(null);            //当前链中的最后一个节点的下一个元素要指向node            last.setNext(node);            //将最后一个节点变为node            last = node;        }        //链表中元素数量加1        count++;    }    //获取集合中元素的数量    public int getSize(){        return count;    }    //通过下标获取到链表的元素    public Object get(int index){        //获取链表的头节点元素        Node n = first;        for (int i = 0; i &lt; index; i++) {            //一路next得到想要的元素            n = n.getNext();        }        return n.getObj();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test {    public static void main(String[] args) {        MyLinkedList linkedList = new MyLinkedList();        linkedList.add("aaa");        linkedList.add("bbb");        linkedList.add("ccc");        System.out.println(linkedList.getSize());        System.out.println(linkedList.get(2));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220923235652141.png" alt="image-20220923235652141"></p><h2 id="iterator-，Iterator，Iterable的关系"><a href="#iterator-，Iterator，Iterable的关系" class="headerlink" title="iterator()，Iterator，Iterable的关系"></a>iterator()，Iterator，Iterable的关系</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924001503112.png" alt="image-20220924001503112"></p><h3 id="迭代器中的hasNext-，Next-的具体实现"><a href="#迭代器中的hasNext-，Next-的具体实现" class="headerlink" title="迭代器中的hasNext()，Next()的具体实现"></a>迭代器中的hasNext()，Next()的具体实现</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924002407926.png" alt="image-20220924002407926"></p><h3 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h3><p>在集合中某个元素后添加元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestListIterator {    public static void main(String[] args) {        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add("aa");        list.add("bb");        list.add("cc");        list.add("dd");        //使用iterator遍历集合并在元素cc后添加kk元素        Iterator&lt;String&gt; iterator = list.iterator();        while (iterator.hasNext()){            if ("cc".equals(iterator.next())){                list.add("kk");            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用iterator()方法来实现，会报如下的错误，不可行，此时需要用</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924003651691.png" alt="image-20220924003651691"></p><p>使用listIterator()方法来实现，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package cn.codesheep.test.LinkedList;import java.util.ArrayList;import java.util.Iterator;import java.util.ListIterator;public class TestListIterator {    public static void main(String[] args) {        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add("aa");        list.add("bb");        list.add("cc");        list.add("dd");        System.out.println(list);                ListIterator&lt;String&gt; it = list.listIterator();        while (it.hasNext()){            if ("cc".equals(it.next())){                it.add("kk");            }        }        System.out.println("---------------------");        System.out.println(list);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924004637272.png" alt="image-20220924004637272"></p><p>listIterator()的逆向遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestListIterator {    public static void main(String[] args) {        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add("aa");        list.add("bb");        list.add("cc");        list.add("dd");        System.out.println(list);        ListIterator&lt;String&gt; it = list.listIterator();        while (it.hasNext()){            if ("cc".equals(it.next())){                it.add("kk");            }        }        System.out.println("---------------------");        System.out.println(list);        //listIterator()的逆向遍历        System.out.println(it.hasPrevious());//是否有上一个元素        while (it.hasPrevious()){            System.out.println(it.previous());        }        System.out.println(it.hasPrevious());//是否有上一个元素    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924005647321.png" alt="image-20220924005647321"></p><h2 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h2><h3 id="比较int类型"><a href="#比较int类型" class="headerlink" title="比较int类型"></a>比较int类型</h3><p><strong>比较的思路：</strong>将比较的数据做差，然后返回一个int类型的数据，将这个int类型的数值与0进行比较，结果的可能性有，&gt; 0，&lt; 0，= 0</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        int a = 10;        int b = 20;        int c = a - b;        System.out.println(c);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较String类型"><a href="#比较String类型" class="headerlink" title="比较String类型"></a>比较String类型</h3><p>String类实现了Comparable接口，这个接口中有一个抽象方法compareTo，String类中重写这个方法即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface Comparable&lt;T&gt; {    public int compareTo(T o);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public final class String    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {     public int compareTo(String anotherString) {        int len1 = value.length;        int len2 = anotherString.value.length;        int lim = Math.min(len1, len2);        char v1[] = value;        char v2[] = anotherString.value;        int k = 0;        while (k &lt; lim) {            char c1 = v1[k];            char c2 = v2[k];            if (c1 != c2) {                return c1 - c2;            }            k++;        }        return len1 - len2;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        String a = "A";        String b = "B";        System.out.println(a.compareTo(b));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较Double类型"><a href="#比较Double类型" class="headerlink" title="比较Double类型"></a>比较Double类型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        double a = 9.3;        double b = 9.6;        //System.out.println((int)(a-b));//由于double的精度问题，此方法不可行，只能转换成对应的包装类，通过compareTo()方法进行比较        System.out.println(((Double) a).compareTo((Double) b));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较自定义的数据类型"><a href="#比较自定义的数据类型" class="headerlink" title="比较自定义的数据类型"></a>比较自定义的数据类型</h3><h4 id="内部比较器"><a href="#内部比较器" class="headerlink" title="内部比较器"></a>内部比较器</h4><p>创建一个Student类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Student implements Comparable&lt;Student&gt;{    private Integer age;    private String name;    private Double height;    public Student() {    }    public Student(Integer age, String name, Double height) {        this.age = age;        this.name = name;        this.height = height;    }    public Integer getAge() {        return age;    }    public void setAge(Integer age) {        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public Double getHeight() {        return height;    }    public void setHeight(Double height) {        this.height = height;    }    @Override    public String toString() {        return "Student{" +                "age=" + age +                ", name='" + name + '\'' +                ", height=" + height +                '}';    }    @Override//比较器    public int compareTo(Student o) {        //比较学生的年龄        //return this.getAge() - o.getAge();        //比较学生的身高        //return ((Double)(this.getHeight())).compareTo((Double)(o.getHeight()));        //比较学生的名字        return this.getName().compareTo(o.getName());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test {    public static void main(String[] args) {        //比较学生信息        Student s1 = new Student(10, "lili", 160.5);        Student s2 = new Student(15, "nana", 170.5);        System.out.println(s1.compareTo(s2));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外部比较器（推荐使用），可以使用多态，拓展性好"><a href="#外部比较器（推荐使用），可以使用多态，拓展性好" class="headerlink" title="外部比较器（推荐使用），可以使用多态，拓展性好"></a>外部比较器（推荐使用），可以使用多态，拓展性好</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ExternalCompare implements Comparator&lt;Student&gt; {    @Override    public int compare(Student o1, Student o2) {        //比较两个学生的年龄       // return o1.getAge() - o2.getAge();        //比较两个学生的名字        return o1.compareTo(o2);                //在年龄相同的情况下比较身高，否则就比较年龄        if (o1.getAge() == o2.getAge()){            return ((Double)o1.getHeight()).compareTo((Double) (o2.getHeight()));        }else {            return o1.getAge() - o2.getAge();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test {    public static void main(String[] args) {        /**         * 使用外部比较器         */       Comparator com = new ExternalCompare();//多态的写法        Student s1 = new Student(10, "lili", 160.5);        Student s2 = new Student(15, "nana", 170.5);        System.out.println(com.compare(s1,s2));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><h3 id="存入Integer数据（底层利用的是内部比较器）"><a href="#存入Integer数据（底层利用的是内部比较器）" class="headerlink" title="存入Integer数据（底层利用的是内部比较器）"></a>存入Integer数据（底层利用的是内部比较器）</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924225313878.png" alt="image-20220924225313878"></p><p>==<strong>特点：数据唯一，并按添加的元素进行升序排列</strong>==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        TreeSet&lt;Integer&gt; ts = new TreeSet&lt;&gt;();        ts.add(12);        ts.add(15);        ts.add(9);        ts.add(3);        ts.add(4);        ts.add(12);        System.out.println(ts.size());        System.out.println(ts);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924134345772.png" alt="image-20220924134345772"></p><h3 id="原理：底层原理是用二叉树来实现（遍历方式是中序遍历）"><a href="#原理：底层原理是用二叉树来实现（遍历方式是中序遍历）" class="headerlink" title="原理：底层原理是用二叉树来实现（遍历方式是中序遍历）"></a>原理：底层原理是用二叉树来实现（遍历方式是中序遍历）</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924141052630.png" alt="image-20220924141052630"></p><h3 id="存入String类型的数据（底层利用的也是内部比较器）"><a href="#存入String类型的数据（底层利用的也是内部比较器）" class="headerlink" title="存入String类型的数据（底层利用的也是内部比较器）"></a>存入String类型的数据（底层利用的也是内部比较器）</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924225216912.png" alt="image-20220924225216912"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test01 {    public static void main(String[] args) {        TreeSet&lt;String&gt; treeSet = new TreeSet&lt;&gt;();        treeSet.add("alili");        treeSet.add("zlili");        treeSet.add("ylili");        treeSet.add("flili");        treeSet.add("hlili");        treeSet.add("mlili");        treeSet.add("alili");        System.out.println(treeSet);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220924224539479.png" alt="image-20220924224539479"></p><h3 id="存入自定义的Student类型的数据"><a href="#存入自定义的Student类型的数据" class="headerlink" title="存入自定义的Student类型的数据"></a>存入自定义的Student类型的数据</h3><h4 id="利用内部比较器实现："><a href="#利用内部比较器实现：" class="headerlink" title="利用内部比较器实现："></a>利用内部比较器实现：</h4><p>Student类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Student implements Comparable&lt;Student&gt;{    private int age;    private String name;    public Student() {    }    public Student(int age, String name) {        this.age = age;        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    @Override    public String toString() {        return "Student{" +                "age=" + age +                ", name='" + name + '\'' +                '}';    }    //内部比较器    @Override    public int compareTo(Student o) {        //比较学生的年龄        return this.getAge() - o.getAge();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test02 {    public static void main(String[] args) {        TreeSet&lt;Student&gt; set = new TreeSet&lt;&gt;();        set.add(new Student(19,"lili"));        set.add(new Student(20,"lili"));        set.add(new Student(10,"lili"));        set.add(new Student(30,"lili"));        set.add(new Student(9,"lili"));        set.add(new Student(3,"lili"));        System.out.println(set.size());        System.out.println(set);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用外部比较器实现："><a href="#利用外部比较器实现：" class="headerlink" title="利用外部比较器实现："></a>利用外部比较器实现：</h4><p>Student类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Student {    private int age;    private String name;    public Student() {    }    public Student(int age, String name) {        this.age = age;        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    @Override    public String toString() {        return "Student{" +                "age=" + age +                ", name='" + name + '\'' +                '}';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部比较器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ExternalCompare implements Comparator&lt;Student&gt; {    @Override    public int compare(Student o1, Student o2) {        return o1.getAge() - o2.getAge();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test02 {    public static void main(String[] args) {        //利用外部比较器必须自己指定        //一旦指定外部比较器，那么就会按照外部比较器来比较        //方法一//        Comparator&lt;Student&gt; compare = new ExternalCompare();        //方法二        /*Comparator&lt;Student&gt; compare = new Comparator&lt;Student&gt;() {            @Override            public int compare(Student o1, Student o2) {                return o1.getAge() - o2.getAge();            }        };*///        TreeSet&lt;Student&gt; set = new TreeSet&lt;&gt;(compare);        //方法三        TreeSet&lt;Student&gt; set = new TreeSet&lt;&gt;(new Comparator&lt;Student&gt;() {            @Override            public int compare(Student o1, Student o2) {                return o1.getAge() - o2.getAge();            }        });        set.add(new Student(19,"lili"));        set.add(new Student(20,"lili"));        set.add(new Student(10,"lili"));        set.add(new Student(30,"lili"));        set.add(new Student(9,"lili"));        set.add(new Student(3,"lili"));        System.out.println(set.size());        System.out.println(set);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925205322395.png" alt="image-20220925205322395"></p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>void</code></td><td><code>clear()</code>  从这个映射中移除所有的映射（可选操作）。</td></tr><tr><td><code>default V</code></td><td><code>compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code>  试图计算出指定键和当前的映射值的映射（或 <code>null</code>如果没有当前映射）。</td></tr><tr><td><code>default V</code></td><td><code>computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</code>  如果指定的键是不是已经与价值相关的（或映射到  <code>null</code>），尝试使用给定的映射功能，进入到这个Map除非 <code>null</code>计算其价值。</td></tr><tr><td><code>default V</code></td><td><code>computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code>  如果指定键的值是存在和非空的，尝试计算一个新的映射，给出了键和它当前的映射值。</td></tr><tr><td><code>boolean</code></td><td><code>containsKey(Object key)</code>  返回 <code>true</code>如果这Map包含一个指定的键映射。</td></tr><tr><td><code>boolean</code></td><td><code>containsValue(Object value)</code>  返回 <code>true</code>如果映射到指定的值的一个或多个键。</td></tr><tr><td><code>Set&lt;Map.Entry&lt;K,V&gt;&gt;</code></td><td><code>entrySet()</code>  返回一个 <a href="../../java/util/Set.html"><code>Set</code></a>视图的映射包含在这个Map。</td></tr><tr><td><code>boolean</code></td><td><code>equals(Object o)</code>  将指定的对象与此映射的相等性进行比较。</td></tr><tr><td><code>default void</code></td><td><code>forEach(BiConsumer&lt;? super K,? super V&gt; action)</code>  在该映射中的每个条目执行给定的操作，直到所有的条目被处理或操作抛出异常。</td></tr><tr><td><code>V</code></td><td><code>get(Object key)</code>  返回指定的键映射的值，或 <code>null</code>如果这个Map不包含的键映射。</td></tr><tr><td><code>default V</code></td><td><code>getOrDefault(Object key, V defaultValue)</code>  返回指定的键映射的值，或 <code>defaultValue</code>如果这个Map不包含的键映射。</td></tr><tr><td><code>int</code></td><td><code>hashCode()</code>  返回此映射的哈希代码值。</td></tr><tr><td><code>boolean</code></td><td><code>isEmpty()</code>  返回 <code>true</code>如果这个Map不包含键值的映射。</td></tr><tr><td><code>Set&lt;K&gt;</code></td><td><code>keySet()</code>  返回一个 <a href="../../java/util/Set.html"><code>Set</code></a>的关键视图包含在这个Map。</td></tr><tr><td><code>default V</code></td><td><code>merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)</code>  如果指定的键已与值相关联的值或与空值相关联的，则将其与给定的非空值关联。</td></tr><tr><td><code>V</code></td><td><code>put(K key, V value)</code>  将指定的值与此映射中的指定键关联（可选操作）。</td></tr><tr><td><code>void</code></td><td><code>putAll(Map&lt;? extends K,? extends V&gt; m)</code>  从指定的映射到这个Map（可选操作）复制所有的映射。</td></tr><tr><td><code>default V</code></td><td><code>putIfAbsent(K key, V value)</code>  如果指定的键是不是已经与价值相关的（或映射到  <code>null</code>）将其与给定的值并返回 <code>null</code>，否则返回当前值。</td></tr><tr><td><code>V</code></td><td><code>remove(Object key)</code>  如果存在（可选操作），则从该Map中移除一个键的映射。</td></tr><tr><td><code>default boolean</code></td><td><code>remove(Object key, Object value)</code>  仅当它当前映射到指定的值时，为指定的键移除条目。</td></tr><tr><td><code>default V</code></td><td><code>replace(K key, V value)</code>  仅当它当前映射到某一值时，替换指定的键的条目。</td></tr><tr><td><code>default boolean</code></td><td><code>replace(K key, V oldValue, V newValue)</code>  仅当当前映射到指定的值时，替换指定的键的条目。</td></tr><tr><td><code>default void</code></td><td><code>replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</code>  将每个条目的值替换为在该项上调用给定函数的结果，直到所有的条目都被处理或函数抛出异常。</td></tr><tr><td><code>int</code></td><td><code>size()</code>  返回这个映射中的键值映射的数目。</td></tr><tr><td><code>Collection&lt;V&gt;</code></td><td><code>values()</code>  返回一个 <a href="../../java/util/Collection.html"><code>Collection</code></a>视图的值包含在这个Map。</td></tr></tbody></table><h3 id="Map常用的方法"><a href="#Map常用的方法" class="headerlink" title="Map常用的方法"></a>Map常用的方法</h3><h4 id="put-K-key-V-value-将指定的值与此映射中的指定键关联（可选操作）。"><a href="#put-K-key-V-value-将指定的值与此映射中的指定键关联（可选操作）。" class="headerlink" title="put(K key, V value)  将指定的值与此映射中的指定键关联（可选操作）。"></a><code>put(K key, V value)</code>  将指定的值与此映射中的指定键关联（可选操作）。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",34563456);        map.put("lili",345673456);        map.put("mingming",123456789);        System.out.println(map.size());        System.out.println(map);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925000146376.png" alt="image-20220925000146376"></p><h4 id="clear-从这个映射中移除所有的映射（可选操作）。"><a href="#clear-从这个映射中移除所有的映射（可选操作）。" class="headerlink" title="clear()  从这个映射中移除所有的映射（可选操作）。"></a><code>clear()</code>  从这个映射中移除所有的映射（可选操作）。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",34563456);        map.put("lili",345673456);        map.put("mingming",123456789);        System.out.println(map.size());        System.out.println(map);        map.clear();        System.out.println("=============================");        System.out.println(map);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925000640889.png" alt="image-20220925000640889"></p><h4 id="remove-Object-key-如果存在（可选操作），则从该Map中移除一个键的映射。"><a href="#remove-Object-key-如果存在（可选操作），则从该Map中移除一个键的映射。" class="headerlink" title="remove(Object key)  如果存在（可选操作），则从该Map中移除一个键的映射。"></a><code>remove(Object key)</code>  如果存在（可选操作），则从该Map中移除一个键的映射。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",34563456);        map.put("lili",345673456);        map.put("mingming",123456789);        System.out.println(map.size());        System.out.println(map);        map.remove("mingming");        System.out.println("=======================");        System.out.println(map);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925000940251.png" alt="image-20220925000940251"></p><h4 id="containsKey-Object-key-返回-true如果这Map包含一个指定的键映射。"><a href="#containsKey-Object-key-返回-true如果这Map包含一个指定的键映射。" class="headerlink" title="containsKey(Object key)  返回 true如果这Map包含一个指定的键映射。"></a><code>containsKey(Object key)</code>  返回 <code>true</code>如果这Map包含一个指定的键映射。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",34563456);        map.put("lili",345673456);        map.put("mingming",123456789);        System.out.println(map.size());        System.out.println(map);        System.out.println(map.containsKey("lili"));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925001328844.png" alt="image-20220925001328844"></p><h4 id="containsValue-Object-value-返回-true如果映射到指定的值的一个或多个键。"><a href="#containsValue-Object-value-返回-true如果映射到指定的值的一个或多个键。" class="headerlink" title="containsValue(Object value)  返回 true如果映射到指定的值的一个或多个键。"></a><code>containsValue(Object value)</code>  返回 <code>true</code>如果映射到指定的值的一个或多个键。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",123456789);        map.put("lili",345673456);        map.put("mingming",123456789);        System.out.println(map.size());        System.out.println(map);        System.out.println(map.containsValue(123456789));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925001501361.png" alt="image-20220925001501361"></p><h4 id="entrySet-返回一个-Set视图的映射包含在这个Map。-即获取map集合中的所有key和value"><a href="#entrySet-返回一个-Set视图的映射包含在这个Map。-即获取map集合中的所有key和value" class="headerlink" title="entrySet()  返回一个 Set视图的映射包含在这个Map。 即获取map集合中的所有key和value"></a><code>entrySet()</code>  返回一个 <a href="../../java/util/Set.html"><code>Set</code></a>视图的映射包含在这个Map。 即获取map集合中的所有key和value</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test01 {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",123456789);        map.put("lili",345673456);        map.put("mingming",123456789);        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();        for (Map.Entry&lt;String, Integer&gt; entry : entries) {            System.out.println(entry);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925003211258.png" alt="image-20220925003211258"></p><h4 id="get-Object-key-返回指定的键映射的值，或-null如果这个Map不包含的键映射。"><a href="#get-Object-key-返回指定的键映射的值，或-null如果这个Map不包含的键映射。" class="headerlink" title="get(Object key)  返回指定的键映射的值，或 null如果这个Map不包含的键映射。"></a><code>get(Object key)</code>  返回指定的键映射的值，或 <code>null</code>如果这个Map不包含的键映射。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test01 {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",123456789);        map.put("lili",345673456);        map.put("mingming",123456789);        System.out.println(map.get("lili"));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="keySet-返回一个-Set的关键视图包含在这个Map。即获取map集合中所有的key"><a href="#keySet-返回一个-Set的关键视图包含在这个Map。即获取map集合中所有的key" class="headerlink" title="keySet()  返回一个 Set的关键视图包含在这个Map。即获取map集合中所有的key"></a><code>keySet()</code>  返回一个 <a href="../../java/util/Set.html"><code>Set</code></a>的关键视图包含在这个Map。即获取map集合中所有的key</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test01 {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",123456789);        map.put("lili",345673456);        map.put("mingming",123456789);        Set&lt;String&gt; strings = map.keySet();        for (String string : strings) {            System.out.println(string);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="-3"><a href="#-3" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925002630156.png" alt="image-20220925002630156"></h4><h4 id="values-返回一个-Collection视图的值包含在这个Map。-即获取map集合中所有的value"><a href="#values-返回一个-Collection视图的值包含在这个Map。-即获取map集合中所有的value" class="headerlink" title="values()  返回一个 Collection视图的值包含在这个Map。 即获取map集合中所有的value"></a><code>values()</code>  返回一个 <a href="../../java/util/Collection.html"><code>Collection</code></a>视图的值包含在这个Map。 即获取map集合中所有的value</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test01 {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",123456789);        map.put("lili",345673456);        map.put("mingming",123456789);        Collection&lt;Integer&gt; values = map.values();        for (Integer value : values) {            System.out.println(value);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925002800499.png" alt="image-20220925002800499"></p><h4 id="equals-Object-o-将指定的对象与此映射的相等性进行比较。"><a href="#equals-Object-o-将指定的对象与此映射的相等性进行比较。" class="headerlink" title="equals(Object o)  将指定的对象与此映射的相等性进行比较。"></a><code>equals(Object o)</code>  将指定的对象与此映射的相等性进行比较。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test01 {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",123456789);        map.put("lili",345673456);        map.put("mingming",123456789);        Map&lt;String,Integer&gt; map1 = new HashMap&lt;&gt;();        map1.put("lili",10101010);        map1.put("nana",12345234);        map1.put("feifei",123456789);        map1.put("lili",345673456);        map1.put("mingming",123456789);        System.out.println(map == map1);//判断map与map1的内存地址是否相等        System.out.println(map.equals(map1));//判断map与map1中的元素是否相等    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isEmpty-返回-true如果这个Map不包含键值的映射。"><a href="#isEmpty-返回-true如果这个Map不包含键值的映射。" class="headerlink" title="isEmpty()  返回 true如果这个Map不包含键值的映射。"></a><code>isEmpty()</code>  返回 <code>true</code>如果这个Map不包含键值的映射。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test01 {    public static void main(String[] args) {        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("lili",10101010);        map.put("nana",12345234);        map.put("feifei",123456789);        map.put("lili",345673456);        map.put("mingming",123456789);        System.out.println(map.isEmpty());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><ul><li><p>特点：唯一，有序（按照升序或降序排列）</p></li><li><p>原理：二叉树，key遵循二叉树的特点，放入集合的数据对应的类型一定要实现比较器（内部比较器或外部比较器）</p></li></ul><h4 id="key的类型是String类型"><a href="#key的类型是String类型" class="headerlink" title="key的类型是String类型"></a>key的类型是String类型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class test {    public static void main(String[] args) {        Map&lt;String, Integer&gt; map = new TreeMap&lt;&gt;();        map.put("alili",123);        map.put("glili",321);        map.put("clili",213);        map.put("blili",132);        System.out.println(map.size());        System.out.println(map);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925104715479.png" alt="image-20220925104715479"></p><h4 id="key的类型是一个自定义的引用数据类型（Student）"><a href="#key的类型是一个自定义的引用数据类型（Student）" class="headerlink" title="key的类型是一个自定义的引用数据类型（Student）"></a>key的类型是一个自定义的引用数据类型（Student）</h4><p>此时必须要实现比较器（内部比较器或外部比较器），要不然就会报如下的错误</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925105513966.png" alt="image-20220925105513966"></p><h5 id="实现内部比较器（Comparable）"><a href="#实现内部比较器（Comparable）" class="headerlink" title="实现内部比较器（Comparable）"></a>实现内部比较器（Comparable<t>）</t></h5><p>Student类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Student implements Comparable&lt;Student&gt;{    private int age;    private String name;    private double height;    public Student() {    }    public Student(int age, String name, double height) {        this.age = age;        this.name = name;        this.height = height;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public double getHeight() {        return height;    }    public void setHeight(double height) {        this.height = height;    }    @Override    public String toString() {        return "Student{" +                "age=" + age +                ", name='" + name + '\'' +                ", height=" + height +                '}';    }    @Override    public int compareTo(Student o) {        //按年龄进行排序        /*return this.getAge() - o.getAge();*/        //按名字进行排序】        //return this.getName().compareTo(o.getName());        //按身高进行排序        return ((Double)(this.getHeight())).compareTo((Double)(o.getHeight()));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test02 {    public static void main(String[] args) {          Map&lt;Student, Integer&gt; map = new TreeMap&lt;&gt;();          map.put(new Student(19,"lili",170.5),1001);          map.put(new Student(18,"nana",171.5),1002);          map.put(new Student(19,"lili",170.5),1023);          map.put(new Student(19,"lili",170.5),1009);          map.put(new Student(19,"lili",170.5),1011);        System.out.println(map.size());        System.out.println(map);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925114655039.png" alt="image-20220925114655039"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925114800505.png" alt="image-20220925114800505"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925114928893.png" alt="image-20220925114928893"></p><h5 id="实现外部比较器"><a href="#实现外部比较器" class="headerlink" title="实现外部比较器"></a>实现外部比较器</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ExternalCompare implements Comparator&lt;Student&gt; {    @Override    public int compare(Student o1, Student o2) {        //将年龄作为key进行排序       // return o1.getAge() - o2.getAge();                        //将身高作为key进行排序//        return ((Double) o1.getHeight()).compareTo((Double) (o2.getHeight()));                //以名字作为key进行排序        return o1.getName().compareTo(o2.getName());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test02 {    public static void main(String[] args) {       /* Map&lt;Student, Integer&gt; map = new TreeMap&lt;&gt;(new Comparator&lt;Student&gt;() {            @Override            public int compare(Student o1, Student o2) {                //将年龄作为key进行排序                // return o1.getAge() - o2.getAge();                //将身高作为key进行排序                //return ((Double) o1.getHeight()).compareTo((Double) (o2.getHeight()));                //以名字作为key进行排序                return o1.getName().compareTo(o2.getName());            }        });*/                  Comparator&lt;Student&gt; comparator = new ExternalCompare();          Map&lt;Student, Integer&gt; map = new TreeMap&lt;&gt;(comparator);          map.put(new Student(19,"lili",170.5),1001);          map.put(new Student(18,"nana",171.5),1002);          map.put(new Student(15,"anan",178.5),1023);          map.put(new Student(56,"juju",175.5),1009);          map.put(new Student(25,"lili",176.5),1011);        System.out.println(map.size());        System.out.println(map);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>重要属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;    implements Map&lt;K,V&gt;, Cloneable, Serializable {        static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; //定义了一个16,一会要赋给数组的长度    static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;     static final float DEFAULT_LOAD_FACTOR = 0.75f;  //定义了一个值:0.75负载因子，加载因子    transient Node&lt;K,V&gt;[] table;//底层主数组    transient int size;//添加的元素的数量    int threshold;//定义个变量,没赋值默认为0 ，--&gt;这个变量是用来表示数组扩容的边界值,门槛值    final float loadFactor;//这个变量用来接收:装填因子，负载因子，加载因子            //无参构造器    public HashMap() {        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted    }        //有参构造器    public HashMap(int initialCapacity, float loadFactor) {        if (initialCapacity &lt; 0)            throw new IllegalArgumentException("Illegal initial capacity: " +                                               initialCapacity);        if (initialCapacity &gt; MAXIMUM_CAPACITY)            initialCapacity = MAXIMUM_CAPACITY;        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))            throw new IllegalArgumentException("Illegal load factor: " +                                               loadFactor);        this.loadFactor = loadFactor;        this.threshold = tableSizeFor(initialCapacity);    }}    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        //Collections不支持创建对象，因为构造器私有化了        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add("aa");        list.add("bb");        list.add("vv");        list.add("cc");        Collections.addAll(list,"dd","ee","zz");        Collections.addAll(list,new String[]{"kk","jj","mm"});        System.out.println(list);        //binarySearch必须在有序集合中查找        Collections.sort(list);//升序排列        System.out.println(list);        //二分查找        System.out.println(Collections.binarySearch(list, "ee"));        System.out.println("=========================================");        //copy        ArrayList&lt;String&gt; list1 = new ArrayList&lt;&gt;();        Collections.addAll(list1,"tt","ss");        Collections.copy(list,list1);//将list1的内容替换到list上的对应位置        System.out.println(list);        System.out.println(list1);        System.out.println("==============================================");        //fill用指定元素替换指定列表的所有元素        Collections.fill(list1,"zzz");//用zzz替换指定列表list1中的所有元素        System.out.println(list1);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925172816182.png" alt="image-20220925172816182"></p></b></b></b>]]></content>
      
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker升级版</title>
      <link href="/2023/03/03/docker2022/"/>
      <url>/2023/03/03/docker2022/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker2022"><a href="#Docker2022" class="headerlink" title="Docker2022"></a>Docker2022</h1><p>比较了Docker和传统虚拟化方式的不同之处:</p><ul><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;</li><li>容器内的应用进程直接运行于宿主的内核，==容器内没有自己的内核且也没有进行硬件虚拟==。因此容器要比传统虚拟机更为轻便。</li><li>每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会相互影响，能区分计算资源。</li></ul><p>应用场景</p><p>Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是:集装箱运输货物，而Docker运输软件。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029001214160.png" alt="image-20221029001214160"></p><p>官网：<a href="http://www.docker.com/">http://www.docker.com</a></p><p>Docker Hub仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="CentOS-Docker安装"><a href="#CentOS-Docker安装" class="headerlink" title="CentOS Docker安装"></a>CentOS Docker安装</h3><p>Docker并非是一个通用的容器工具，它依赖于已存在并运行的Linux内核环境。</p><p>Docker实质上是在已经运行的Linux下制造了一个隔离的文件环境，因此它执行的效率几乎等同于所部署的 Linux主机。因此，==Docker必须部署在Linux内核的系统上==。如果其他系统想部署Docker就必须安装一个虚拟Linux环境。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029001926642.png" alt="image-20221029001926642"></p><p>在Windows上部署Docker 的方法都是先安装一个虚拟机，并在安装Linux系统的的虚拟机中运行Docker。</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a><strong>前提条件</strong></h3><p>目前，CentOS仅发行版本中的内核支持Docker。Docker运行在CentOS 7(64-bit)上，要求系统为64位、Linux系统内核版本为3.8以上，这里选用Centos7.x</p><h3 id="查看自己的内核"><a href="#查看自己的内核" class="headerlink" title="查看自己的内核"></a><strong>查看自己的内核</strong></h3><p><code>uname</code>命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat /etc/redhat-release uname -r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029002409532.png" alt="image-20221029002409532"></p><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><h4 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像(image)"></a>镜像(image)</h4><p>Docker镜像（image）就是一个==只读==的模板。镜像可以用来创建Docker容器，==一个镜像可以创建很多容器==。它也相当于是一个root文件系统。比如官方镜像centos7就包含了完整的一套centos7最小系统的root文件系统。</p><h4 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container)"></a>容器(container)</h4><p>从面向对象的角度来看：</p><p>Docker利用容器(Container)独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，==容器是用镜像创建的运行实例==。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p><p>从镜像的角度来看：</p><p>==可以把容器看做是一个简易版的Linux 环境==(包括root用户权限、进程空间、用户空间和网络空间等)和运行在其中的应用程序。</p><h4 id="仓库-repository"><a href="#仓库-repository" class="headerlink" title="仓库(repository)"></a>仓库(repository)</h4><p>仓库（Repository）是==集中存放镜像==文件的场所。Docker公司提供的官方registry被称为Docker Hub，存放各种镜像模板的地方。Docker 最大的公开仓库是Docker Hub(<a href="https://hub.docker.com/)%EF%BC%8C%E5%AD%98%E6%94%BE%E4%BA%86%E6%95%B0%E9%87%8F%E5%BA%9E%E5%A4%A7%E7%9A%84%E9%95%9C%E5%83%8F%E4%BE%9B%E7%94%A8%E6%88%B7%E4%B8%8B%E8%BD%BD%E3%80%82%E5%9B%BD%E5%86%85%E7%9A%84%E5%85%AC%E5%BC%80%E4%BB%93%E5%BA%93%E5%8C%85%E6%8B%AC%E9%98%BF%E9%87%8C%E4%BA%91%E3%80%81%E7%BD%91%E6%98%93%E4%BA%91%E7%AD%89">https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云等</a></p><h3 id="Docker平台架构图解"><a href="#Docker平台架构图解" class="headerlink" title="Docker平台架构图解"></a>Docker平台架构图解</h3><h4 id="入门版"><a href="#入门版" class="headerlink" title="(入门版)"></a>(入门版)</h4><p>工作原理</p><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。==容器，是一个运行时环境，就是我们前面说到的集装箱。==<img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029004010023.png" alt="image-20221029004010023"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029004255040.png" alt="image-20221029004255040"></p><h4 id="架构版"><a href="#架构版" class="headerlink" title="(架构版)"></a>(架构版)</h4><p>Docker是一个CIS模式的架构，后端是一个松耦合架构，众多模块各司其职。</p><p>Docker运行的基本流程为:</p><p>1、用户是使用Docker Client与 Docker Daemon建立通信，并发送请求给后者。</p><p>2、 Docker Daemon作为Docker架构中的主体部分，首先提供 Docker Server的功能使其可以接受Docke<br>Client的请求。</p><p>3 、Docker Engine执行Docker内部的一系列工作，每一项工作都是以一个Job的形式的存在。</p><p>4、Job的运行过程中，当需要容器镜像时，则从Docker Registy中下载镜像，并通过镜像管理驱动Graph driver将下载镜像以Graph的形式存储。</p><p>5、当需要为Docker创建网络环境时，通过网络管理驱动Network driver创建并配置Docker容器网络环境。</p><p>6、当需要限制Docker容器运行资源或执行用户指令等操作时，则通过Exec driver来完成。</p><p>7、Libcontainer是一项独立的容器管理包，Network driver以及Exec driver都是通过Libcontainer来实现具体对容器进行的操作。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029005429939.png" alt="image-20221029005429939"></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>官网步骤：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#1、卸载旧的版本yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine                  #2、需要的安装 yum install -y yum-utils  #3、设置镜像的仓库 yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo#默认是国外的     #阿里云镜像地址 yum-config-manager \ --add-repo \ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  #更新yum软件包的索引 yum makecache fast #4、安装docker引擎 docker-ce 社区版  ee 企业版yum install docker-ce docker-ce-cli containerd.io#5、启动dockersystemctl start docker#6、查看docker是否安装成功命令docker version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、卸载旧的版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、yum安装gcc相关</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y install gccyum -y install gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、安装需要的软件包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install -y yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、设置stable镜像仓库（阿里云镜像仓库）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager \--add-repo \http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、更新yum软件包索引</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、安装docker ce</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、启动docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8、查看docker是否安装成功命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9、docker的卸载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop docker   #关闭docker服务docker remove docker-ce docker-ce-cli containerd.io  #卸载dockerrm -rf /var/lib/dockerrm -rf /var/lib/containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><p><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p><p>注册一个属于自己的阿里云账户(可复用淘宝账号)</p><p>获得加速器地址连接：<a href="https://cr.console.aliyun.com/cn-shanghai/instances/mirrors">https://cr.console.aliyun.com/cn-shanghai/instances/mirrors</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029132505102.png" alt="image-20221029132505102"></p><p>粘贴脚本直接执行并重启服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://f4wx9ycs.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker后台容器（测试运行hello-world）"><a href="#docker后台容器（测试运行hello-world）" class="headerlink" title="docker后台容器（测试运行hello-world）"></a>docker后台容器（测试运行hello-world）</h3><p>docker run hello-world，run的执行流程</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029133204959.png" alt="image-20221029133204959"></p><h3 id="为什么Docker会比vM虚拟机快？"><a href="#为什么Docker会比vM虚拟机快？" class="headerlink" title="为什么Docker会比vM虚拟机快？"></a>为什么Docker会比vM虚拟机快？</h3><p>(1)==docker有着比虚拟机更少的抽象层==</p><p>由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>(2)==docker利用的是宿主机的内核，而不需要加载操作系统OS内核==</p><p>当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载OS，返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统，则省略了返回过程,因此新建一个docker容器只需要几秒钟。</p><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><h3 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#启动docker: systemctl start docker#停止docker: systemctl stop docker#重启docker:systemctl restart docker#查看docker状态: systemctl status docker#开机自启: systemctl enable docker#查看docker概要信息: docker info#查看docker总体帮助文档: docker --help#查看docker命令帮助文档: docker 具体命令 --help#例如docker run --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="docker-images-列出本地主机上的镜像"><a href="#docker-images-列出本地主机上的镜像" class="headerlink" title="docker images  列出本地主机上的镜像"></a><strong>docker images  列出本地主机上的镜像</strong></h4><p><strong>OPTIONS说明:</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029134848437.png" alt="image-20221029134848437"></p><ul><li>REPOSITORY：表示镜像的仓库源</li><li>TAG：镜像的标签</li><li>IMAGE ID：镜像ID</li><li>CREATED：镜像创建时间</li><li>SIZE：镜像大小</li></ul><p>同一仓库源可以有多个TAG版本，代表这个仓库源的不同个版本，我们使用REPOSITORY:TAG来定义不同的镜像。如果你不指定一个镜像的版本标签，例如你只使用ubuntu，docker将默认使用ubuntu:latest镜像</p><h4 id="docker-search-某个xxx镜像名字"><a href="#docker-search-某个xxx镜像名字" class="headerlink" title="docker search 某个xxx镜像名字"></a><strong>docker search 某个xxx镜像名字</strong></h4><p>例如：docker search hello-world</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029135552355.png" alt="image-20221029135552355"></p><p>参数说明</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>NAME</td><td>镜像名称</td></tr><tr><td>DESCRIPTION</td><td>镜像说明</td></tr><tr><td>STARS</td><td>点赞数量</td></tr><tr><td>OFFICIAL</td><td>是否是官方的</td></tr><tr><td>AUTOMATED</td><td>是否是自动构建的</td></tr></tbody></table><p>查看镜像ID命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker images -qdocker images -aq   #查看镜像ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="docker-pull-某个xxx镜像名字"><a href="#docker-pull-某个xxx镜像名字" class="headerlink" title="docker pull 某个xxx镜像名字"></a><strong>docker pull 某个xxx镜像名字</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull mysql5.7docker pull redisdocker pull nacosdocker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker-system-df-查看镜像-x2F-容器-x2F-数据卷所占的空间"><a href="#docker-system-df-查看镜像-x2F-容器-x2F-数据卷所占的空间" class="headerlink" title="docker system df 查看镜像/容器/数据卷所占的空间"></a><strong>docker system df 查看镜像/容器/数据卷所占的空间</strong></h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029140059710.png" alt="image-20221029140059710"></p><h4 id="docker-rmi-某个xxx镜像名字ID"><a href="#docker-rmi-某个xxx镜像名字ID" class="headerlink" title="docker rmi 某个xxx镜像名字ID"></a><strong>docker rmi 某个xxx镜像名字ID</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#删除单个镜像docker rmi feb5d9fea6a5  #普通删除某个镜像docker rmi -f feb5d9fea6a5  #强制删除某个镜像#删除多个镜像docker rmi -f 镜像名1:TAG 镜像名2:TAG ......#删除全部镜像docker rmi -f $(docker images -qa)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029140558663.png" alt="image-20221029140558663"></p><h4 id="面试题：谈谈docker虚悬镜像是什么"><a href="#面试题：谈谈docker虚悬镜像是什么" class="headerlink" title="面试题：谈谈docker虚悬镜像是什么?"></a><strong>面试题：谈谈docker虚悬镜像是什么?</strong></h4><p>答：仓库名和标签（TAG）都是<none>的镜像，俗称虚悬镜像dangling image</none></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029141539880.png" alt="image-20221029141539880"></p><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>案例：在docker容器中安装Ubuntu系统</p><h4 id="1、安装Ubuntu系统"><a href="#1、安装Ubuntu系统" class="headerlink" title="1、安装Ubuntu系统"></a>1、安装Ubuntu系统</h4><pre class="line-numbers language-none"><code class="language-none">docker pull ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029143104402.png" alt="image-20221029143104402"></p><h4 id="2、启动容器"><a href="#2、启动容器" class="headerlink" title="2、启动容器"></a>2、启动容器</h4><pre class="line-numbers language-none"><code class="language-none">docker run [OPTIONS] IMAGE [COMMAND][ARG...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>OPTIONS说明（常用）：有些是一个减号，有些是两个减号</p><ul><li><p>–name=”容器新名字”：为容器指定一个名称;</p></li><li><p>-d：后台运行容器并返回容器ID，也即启动守护式容器(后台运行);</p></li><li><p>==-i：以交互模式运行容器，通常与-t同时使用;==</p></li><li><p>==-t：为容器重新分配一个伪输入终端，通常与-i同时使用；也即启动交互式容器(前台有伪终端，等待交互);==</p></li><li><p>-P：==随机==端口映射，大写P</p></li><li><p>-p：==指定==端口映射，小写p</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-p hostPort:containerPort</td><td>端口映射 -p 8080:80</td></tr><tr><td>-p ip:hostPort:containerPort</td><td>配置监听地址-p 10.0.0.100:8080:80</td></tr><tr><td>-p ip:containerPort</td><td>随机分配端口-p 10.0.0.100::80</td></tr><tr><td>-p hostPort:coptainerPort:udp</td><td>指定协议-p 8080:80:tcp</td></tr><tr><td>-p 81:80 -p 443:443</td><td>指定多个</td></tr><tr><td></td><td></td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it ubuntu:latest /bin/bashdocker run -it --name=myubuntu ubuntu:latest /bin/bash#参数说明:-i：交互式操作。-t：终端。ubuntu：ubuntu镜像。/bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是/bin/bash。要退出终端，直接输入`exit`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029143806475.png" alt="image-20221029143806475"></p></li></ul><h4 id="3、列出当前所有正在运行的容器"><a href="#3、列出当前所有正在运行的容器" class="headerlink" title="3、列出当前所有正在运行的容器"></a>3、列出当前所有正在运行的容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker ps [OPTIONS]docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029144437918.png" alt="image-20221029144437918"></p><p>OPTIONS说明（常用）:</p><ul><li><p>==-a：列出当前所有正在运行的容器+历史上运行过的==</p></li><li><p>-l：显示最近创建的容器。</p></li><li><p>-n：显示最近n个创建的容器。</p></li><li><p>==-q：静默模式，只显示容器编号。==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029145246765.png" alt="image-20221029145246765"></p></li></ul><h4 id="4、退出容器"><a href="#4、退出容器" class="headerlink" title="4、退出容器"></a>4、退出容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exit   #run进去容器，exit退出，容器停止ctrl + p + q     #run进去容器，ctrl+p+q退出，容器不停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5、启动已停止运行的容器"><a href="#5、启动已停止运行的容器" class="headerlink" title="5、启动已停止运行的容器"></a>5、启动已停止运行的容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker start 容器ID或者容器名docker start ae8a0cdd4498<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6、重启容器"><a href="#6、重启容器" class="headerlink" title="6、重启容器"></a>6、重启容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker restart容器ID或者容器名docker restart ae8a0cdd4498<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7、停止容器"><a href="#7、停止容器" class="headerlink" title="7、停止容器"></a>7、停止容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stop容器ID或者容器名docker stop ae8a0cdd4498<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8、强制停止容器"><a href="#8、强制停止容器" class="headerlink" title="8、强制停止容器"></a>8、强制停止容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker kill 容器ID或容器名docker kill ae8a0cdd4498<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="9、删除已停止的容器"><a href="#9、删除已停止的容器" class="headerlink" title="9、删除已停止的容器"></a>9、删除已停止的容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rm 容器IDdocker rm ae8a0cdd4498  #只能删除已停止的容器docker rm -f ae8a0cdd4498  #强制删除#一次性删除多个容器实例(慎重！！！)docker rm -f $(docker ps -a -q)docker ps -a -q | xargs docker rm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h4><h5 id="启动交互式容器-前台命令行"><a href="#启动交互式容器-前台命令行" class="headerlink" title="启动交互式容器(前台命令行)"></a>启动交互式容器(前台命令行)</h5><p>在大部分的场景下，我们希望docker的服务是在后台运行的我们可以过-d指定容器的后台运行模式</p><pre class="line-numbers language-none"><code class="language-none">docker run -d 容器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>redis前后台启动演示</p><p>前台交互式启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后台守护式启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker logs 容器IDdocker logs e2227e97b530<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029152641305.png" alt="image-20221029152641305"></p><h5 id="查看容器内运行的进程"><a href="#查看容器内运行的进程" class="headerlink" title="查看容器内运行的进程"></a>查看容器内运行的进程</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker top 容器IDdocker top e2227e97b530<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029152950540.png" alt="image-20221029152950540"></p><h5 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker inspect 容器IDdocker inspect e2227e97b530<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="进入正在运行的容器并以命令行交互"><a href="#进入正在运行的容器并以命令行交互" class="headerlink" title="进入正在运行的容器并以命令行交互"></a>进入正在运行的容器并以命令行交互</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#docker exec -it 容器ID /bin/bashdocker exec -it 3a622243ef3a /bin/bash#重新进入docker attach 容器IDdocker attach 3a622243ef3a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例演示，用centos或者unbuntu都可以</p><p>上述两个区别</p><ul><li><p>attach 直接进入容器启动命令的终端，不会启动新的进程，==用exit退出，会导致容器的停止。==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029155901210.png" alt="image-20221029155901210"></p></li><li><p>exec是在容器中打开新的终端，并且可以启动新的进程，==用exit退出，不会导致容器的停止。==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029155523021.png" alt="image-20221029155523021"></p></li></ul><p>推荐大家使用docker exec命令，因为退出容器终端，不会导致容器的停止。</p><h5 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#docker cp容器ID:容器内路径 目的主机路径docker cp 3a622243ef3a:/tmp/a.txt /root/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029161636101.png" alt="image-20221029161636101"></p><h5 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h5><p>export导出容器的内容流作为一个tar归档文件【对应import命令】</p><p>import从tar包中的内容创建一个新的文件系统再导入为镜像【对应export】</p><p>案例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#docker export 容器ID &gt; 文件名.tardocker export 3a622243ef3a &gt; abcd.tar.gz#先将正在运行的Ubuntu容器删除docker rm -f 3a622243ef3a #cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号cat abcd.tar.gz | docker import - lt/ubuntu:3.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029162251055.png" alt="image-20221029162251055"></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029164348469.png" alt="image-20221029164348469"></h3><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><h3 id="什么是镜像？"><a href="#什么是镜像？" class="headerlink" title="什么是镜像？"></a>什么是镜像？</h3><p>镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p><h3 id="分层的镜像"><a href="#分层的镜像" class="headerlink" title="分层的镜像"></a>分层的镜像</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029165222115.png" alt="image-20221029165222115"></p><h3 id="UnionFS（联合文件系统）"><a href="#UnionFS（联合文件系统）" class="headerlink" title="UnionFS（联合文件系统）"></a>UnionFS（联合文件系统）</h3><p>UnionFS(联合文件系统)：Union文件系统(UnionFS)是一种分层、轻量级并且高性能的文件系统，它==支持对文件系统的修改作为一次提交来一层层的叠加==，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础。==镜像可以通过分层来进行继承==，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, L inux刚启动时会加载bots文件系统，==在Docker镜像的最底层是引导文件系统boots==。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system)，在bootfs之上。包含的就是典型Linux系统中的/dev，/proc, bin, /etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><h3 id="为什么Docker镜像要采用这种分层结构呢"><a href="#为什么Docker镜像要采用这种分层结构呢" class="headerlink" title="为什么Docker镜像要采用这种分层结构呢"></a>为什么Docker镜像要采用这种分层结构呢</h3><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</p><p>比如说有多个镜像都从相同的base镜像构建而来，那么Docker Host只需在磁盘上保存一份base镜像;同时内存中也只需加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><h3 id="重点理解"><a href="#重点理解" class="headerlink" title="重点理解"></a>重点理解</h3><p>==Docker镜像层都是只读的，容器层是可写的==，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”</p><p>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。所有对容器的改动-无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029170328764.png" alt="image-20221029170328764"></p><h3 id="Docker镜像commit操作案例"><a href="#Docker镜像commit操作案例" class="headerlink" title="Docker镜像commit操作案例"></a>Docker镜像commit操作案例</h3><p>docker commit提交容器副本使之成为一个新的镜像</p><p>docker commit -m=”提交的描述信息”  -a=”作者” 容器ID 要创建的目标镜像名:[标签名]</p><p>案例演示ubuntu安装vim</p><p>1、从Hub上下载ubuntu镜像到本地并成功运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull ubuntudocker run -it ubuntu /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、原始的默认Ubuntu镜像是不带着vim命令的</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029175534820.png" alt="image-20221029175534820"></p><p>3、外网连通的情况下，安装vim</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apt-get updateapt-get -y install vim 或apt-get install vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、安装完成后，commit我们自己的新镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#docker commit -m="提交的描述信息"  -a="作者" 容器ID 要创建的目标镜像名:[标签名]docker commit -m="add vim cmd" -a="hadoop102" e560ef0bfd7d lt/myubuntu:1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、启动我们的新镜像并和原来的对比</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029182011807.png" alt="image-20221029182011807"></p><p>小总结</p><p>Docker中的镜像分层，==支持通过扩展现有镜像，创建新的镜像==。类似Java继承于一个Base基础类，自己再按需扩展。新镜像是从 base镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029182829784.png" alt="image-20221029182829784"></p><h2 id="本地镜像发布到阿里云"><a href="#本地镜像发布到阿里云" class="headerlink" title="本地镜像发布到阿里云"></a>本地镜像发布到阿里云</h2><h3 id="本地镜像发布到阿里云流程"><a href="#本地镜像发布到阿里云流程" class="headerlink" title="本地镜像发布到阿里云流程"></a>本地镜像发布到阿里云流程</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029183039309.png" alt="image-20221029183039309"></p><h3 id="镜像的生成方法"><a href="#镜像的生成方法" class="headerlink" title="镜像的生成方法"></a>镜像的生成方法</h3><p>上面docker镜像案例有介绍</p><p>docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]]</p><h3 id="将本地镜像推送到阿里云"><a href="#将本地镜像推送到阿里云" class="headerlink" title="将本地镜像推送到阿里云"></a>将本地镜像推送到阿里云</h3><h4 id="本地镜像素材原型"><a href="#本地镜像素材原型" class="headerlink" title="本地镜像素材原型"></a>本地镜像素材原型</h4><p>以dcoker镜像生成的ubuntu1.1为例</p><h4 id="阿里云开发者平台"><a href="#阿里云开发者平台" class="headerlink" title="阿里云开发者平台"></a>阿里云开发者平台</h4><p><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p><h4 id="创建仓库镜像"><a href="#创建仓库镜像" class="headerlink" title="创建仓库镜像"></a>创建仓库镜像</h4><p><a href="https://cr.console.aliyun.com/cn-shanghai/instance/repositories">https://cr.console.aliyun.com/cn-shanghai/instance/repositories</a></p><p>1、创建个人实例</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029184208228.png" alt="image-20221029184208228"></p><p>2、选择命名空间，并创建命名空间</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029184432792.png" alt="image-20221029184432792"></p><p>3、选择镜像仓库，并创建镜像仓库</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029184820549.png" alt="image-20221029184820549"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029184852705.png" alt="image-20221029184852705"></p><p>4、进入管理界面获取脚本</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029185103792.png" alt="image-20221029185103792"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029185151150.png" alt="image-20221029185151150"></p><h4 id="将镜像推送到阿里云"><a href="#将镜像推送到阿里云" class="headerlink" title="将镜像推送到阿里云"></a>将镜像推送到阿里云</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker login --username=关云长是也 registry.cn-shanghai.aliyuncs.comdocker tag [ImageId] registry.cn-shanghai.aliyuncs.com/leetonly/myubuntu1.1:[镜像版本号]docker push registry.cn-shanghai.aliyuncs.com/leetonly/myubuntu1.1:[镜像版本号]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029191024330.png" alt="image-20221029191024330"></p><h3 id="将阿里云上的镜像下载到本地"><a href="#将阿里云上的镜像下载到本地" class="headerlink" title="将阿里云上的镜像下载到本地"></a>将阿里云上的镜像下载到本地</h3><p>1、先把之前在本地commit的镜像删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rmi -f 0cde69de705c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、从阿里云镜像仓库拉取自己的Ubuntu镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull registry.cn-shanghai.aliyuncs.com/leetonly/myubuntu1.1:[镜像版本号]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029192424908.png" alt="image-20221029192424908"></p><h2 id="本地镜像发布到私有库"><a href="#本地镜像发布到私有库" class="headerlink" title="本地镜像发布到私有库"></a>本地镜像发布到私有库</h2><p>1、下载镜像Docker Registry</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029193332109.png" alt="image-20221029193332109"></p><p>2、运行私有库Registry，相当于本地有个私有Docker hub</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 5000:5000 -v /hadoop102use/myregistry/:/tmp/registry --privileged=true registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况，仓库被创建在容器的/var/lib/registry目录下，建议自行用容器卷映射，方便于宿主机联调</p><p><img src="D:\java笔记\笔记\Docker2022.assets\image-20221029194321343.png" alt="image-20221029194321343"></p><p>3、案例演示创建一个新镜像，ubuntu安装ifconfig命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it ubuntu -ddocker exec -it ubuntu /bin/bashapt-get updateapt-get  install net-tools  #安装ifconfig命令exit#docker commit -m="提交的描述信息" -a="提交人" 容器id 要创建的目标镜像名:[标签名] ，此命令在容器外执行docker commit -m="ifconfig cmd add" -a="lt" 容器id ltubuntu:1.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029195242809.png" alt="image-20221029195242809"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029200249271.png" alt="image-20221029200249271"></p><p>4、curl验证私服库上有什么镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -XGET http://192.168.10.102:5000/v2/_catalog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029202911873.png" alt="image-20221029202911873"></p><p>5、将新镜像ltubuntu:1.2修改符合私服规范的Tag</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#按照公式:docker tag 镜像:Tag Host:Port/Repository:Tag，注意：host是自己Linux的ip地址docker tag ltubuntu:1.2 192.168.10.102:5000/ltubuntu:1.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029203400802.png" alt="image-20221029203400802"></p><p>6、修改配置文件使之支持http</p><p>​docker默认不允许http方式推送镜像，通过配置选项来取消这个限制。==修改完后如果不生效，建议重启docker==</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim /etc/docker/daemon.json #在daemon.json 文件添加"insecure-registries": ["192.168.10.102:5000"]  #注意，这里的ip是Linux上的IP地址，2个配置中间有个逗号;别漏了，这个配置是json格式的。#重启systemctl restart dockerdocker run -d -p 5000:5000 -v /hadoop102use/myregistry/:/tmp/registry --privileged=true registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029203854666.png" alt="image-20221029203854666"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029210320372.png" alt="image-20221029210320372"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029204716179.png" alt="image-20221029204716179"></p><p>7、push推送到私服库</p><pre class="line-numbers language-none"><code class="language-none">docker push 192.168.10.102:5000/ltubuntu:1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029210945449.png" alt="image-20221029210945449"></p><p>8、curl验证私服库上有什么镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -XGET http://192.168.10.102:5000/v2/_catalog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029211021809.png" alt="image-20221029211021809"></p><p>9、pull到本地并运行</p><p>(1)先删除本地的镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rmi -f 8129928083a3(镜像id)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029211359885.png" alt="image-20221029211359885"></p><p>(2)pull私有仓库到本地</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull 192.168.10.102:5000/ltubuntu:1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029211539201.png" alt="image-20221029211539201"></p><p>​(3)启动，查看是否有ifconfig命令</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029211723135.png" alt="image-20221029211723135"></p><h2 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h2><p>若Docker挂载主机目录访问如果出现==cannot open directory .: Permission denied==的错误，只需在挂载目录后多加一个<code>--privileged=true</code>参数即可</p><p>如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，在SELinux里面挂载目录被禁止掉了额，如果要开启，我们一般使用<code>--privileged=true</code>命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数,container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。</p><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 5000:5000 -v /hadoop102use/myregistry/:/tmp/registry --privileged=true registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况，仓库被创建在容器的/var/lib/registry目录下，建议自行用容器卷映射，方便于宿主机联调</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029213238092.png" alt="image-20221029213238092"></p><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性。</p><p>==卷的设计目的就是数据的持久化==，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷</p><p>容器数据卷将docker容器内的数据保存进宿主机的磁盘中，运行一个带有容器卷存储功能的容器实例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --privileged=true -v/宿主机绝对路径目录:/容器内目录 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将运用与运行的环境打包成镜像，run后形成容器实例运行，但是我们对数据的要求希望是<strong>持久化的</strong>。Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。为了能保存数据在docker中我们使用卷。</p><h3 id="Docker容器数据卷的特点："><a href="#Docker容器数据卷的特点：" class="headerlink" title="Docker容器数据卷的特点："></a>Docker容器数据卷的特点：</h3><ul><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接实时生效，爽</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="1-宿主vs容器之间映射添加容器卷"><a href="#1-宿主vs容器之间映射添加容器卷" class="headerlink" title="1.宿主vs容器之间映射添加容器卷"></a>1.宿主vs容器之间映射添加容器卷</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --privileged=true -v/宿主机绝对路径目录:/容器内目录 镜像名#例如docker run -it --privileged=true -v/tmp/host_data:/tmp/docker_data --name u1 8129928083a3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在Linux的/tmp/host_data/新建a.txt文件，在docker中ubuntu的/tmp/docker_data/也存在a.txt文件，在docker中ubuntu的/tmp/docker_data/下创建b.txt文件，在Linux的/tmp/host_data/也存在b.txt文件，这就达到数据共享于备份的目的</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029225500450.png" alt="image-20221029225500450"></p><p>查看数据卷是否挂载成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#docker inspect 容器id docker inspect c23628167cc4 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029230332704.png" alt="image-20221029230332704"></p><p>容器和宿主机之间数据共享</p><ul><li>docker修改，主机同步获得</li><li>主机修改，docker同步获得</li><li>docker容器stop，主机修改，docker容器重启看数据是否同步。</li></ul><h4 id="2-读写规则映射添加说明"><a href="#2-读写规则映射添加说明" class="headerlink" title="2.读写规则映射添加说明"></a>2.读写规则映射添加说明</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --privileged=true -v/宿主机绝对路径目录:/容器内目录:rw 镜像名    #默认挂载的容器内目录是rw（即可读可写）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>容器实例内部被限制，只能读取不能写的情况，此时如果宿主机写入的内容，可以同步给容器内，容器可以读取到。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --privileged=true -v/宿主机绝对路径目录:/容器内目录:ro 镜像名   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-卷的继承和共享"><a href="#3-卷的继承和共享" class="headerlink" title="3.卷的继承和共享"></a>3.卷的继承和共享</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --privileged=true --volumes-from 父类 --name u2 ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Docker常规安装简介"><a href="#Docker常规安装简介" class="headerlink" title="Docker常规安装简介"></a>Docker常规安装简介</h2><h3 id="总体步骤"><a href="#总体步骤" class="headerlink" title="总体步骤"></a>总体步骤</h3><p>搜索镜像：<code>docker search 镜像名</code></p><p>拉取镜像：<code>docker pull镜像名</code></p><p>查看镜像</p><p>启动镜像</p><p>停止容器</p><p>移除容器</p><h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><h4 id="docker-hub上面查找tomcat镜像"><a href="#docker-hub上面查找tomcat镜像" class="headerlink" title="docker hub上面查找tomcat镜像"></a>docker hub上面查找tomcat镜像</h4><p>官网：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029234450078.png" alt="image-20221029234450078"></p><h4 id="从docker-hub上拉取tomcat镜像到本地"><a href="#从docker-hub上拉取tomcat镜像到本地" class="headerlink" title="从docker hub上拉取tomcat镜像到本地"></a>从docker hub上拉取tomcat镜像到本地</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="docker-images查看是否有拉取到的tomcat"><a href="#docker-images查看是否有拉取到的tomcat" class="headerlink" title="docker images查看是否有拉取到的tomcat"></a>docker images查看是否有拉取到的tomcat</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker images tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029234729155.png" alt="image-20221029234729155"></p><h4 id="使用tomcat镜像创建容器实例-也叫运行镜像"><a href="#使用tomcat镜像创建容器实例-也叫运行镜像" class="headerlink" title="使用tomcat镜像创建容器实例(也叫运行镜像)"></a>使用tomcat镜像创建容器实例(也叫运行镜像)</h4><pre class="line-numbers language-none"><code class="language-none">docker run -it -d -p 8080:8080 --name t1 tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029235059508.png" alt="image-20221029235059508"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029235201989.png" alt="image-20221029235201989"></p><h4 id="访问猫首页"><a href="#访问猫首页" class="headerlink" title="访问猫首页"></a>访问猫首页</h4><p>访问：<a href="http://hadoop102:8080/">http://hadoop102:8080/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029235301165.png" alt="image-20221029235301165"></p><p>报此错误的原因：</p><p>1、可能没有映射端口或者没有关闭防火墙</p><p>2、把webapps.dist目录换成webapps</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it t1 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221029235832787.png" alt="image-20221029235832787"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030000322771.png" alt="image-20221030000322771"></p><p>再次访问：<a href="http://hadoop102:8080/">http://hadoop102:8080/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030000501905.png" alt="image-20221030000501905"></p><h4 id="免修改版说明"><a href="#免修改版说明" class="headerlink" title="免修改版说明"></a>免修改版说明</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#下载docker pull billygoo/tomcat8-jdk8#启动docker run -d -p 8080:8080 --name tomcat8 billygoo/tomcat8-jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接可以访问，不用修改<a href="http://hadoop102:8080/">http://hadoop102:8080/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030001101966.png" alt="image-20221030001101966"></p><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>官网：<a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></p><h4 id="简单版安装"><a href="#简单版安装" class="headerlink" title="简单版安装"></a>简单版安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker search mysqldocker pull mysql5.7docker run -p3366:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7docker exec -it mysql5.7 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若使用navicat连接docker安装的MySQL建表时，插入中文报错的解决方法</p><p>1、docker里面的mysql容器实例查看，内容如下:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW VARIABLES LIKE 'character%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030002715644.png" alt="image-20221030002715644"></p><h4 id="实战版安装（推荐）"><a href="#实战版安装（推荐）" class="headerlink" title="实战版安装（推荐）"></a>实战版安装（推荐）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker search mysqldocker pull mysql5.7docker run -d -p 3366:3306 --privileged=true -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -v /home/mysql/log:/var/log/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql mysql:5.7docker exec -it mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在/home/mysql/conf目录下，新建my.cnf，解决中文乱码问题，通过容器卷同步给mysql容器实例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">[client]default_character_set=utf8[mysqld]collation_server = utf8_general_cicharacter_set_server = utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新启动mysql容器实例再重新进入并查看字符编码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker restart mysqldocker exec -it mysql /bin/bashmysql -uroot -pSHOW VARIABLES LIKE 'character%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再新建库新建表再插入中文测试</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030115914779.png" alt="image-20221030115914779"></p><p>​<strong>结论: ==docker安装完MySQL并run出容器后，建议请先修改完字符集编码后再新建mysql库-表-插数据==</strong></p><p>假如将当前容器实例删除，再重新来一次，之前建的数据库实例还有吗？</p><p>​答案是仍然存在，原因，容器卷积可以实现数据共享。</p><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><h4 id="简单版"><a href="#简单版" class="headerlink" title="简单版"></a>简单版</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull redisdocker run -d -p 6379:6379 --name redis redisdocker exec -it redis /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接redis服务</p><pre class="line-numbers language-none"><code class="language-none">redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030122910907.png" alt="image-20221030122910907"></p><h4 id="实战版安装（推荐）-1"><a href="#实战版安装（推荐）-1" class="headerlink" title="实战版安装（推荐）"></a>实战版安装（推荐）</h4><p>1、在CentOS宿主机下新建目录/app/redis</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir -p /app/redis   #-p表示递归创建目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、将一个redis.conf文件模板拷贝进/app/redis目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cp /usr/local/redis-6.2.6/redis.conf /app/redis/      # 将Linux系统安装的redis的配置文件拷贝考/app/redis目录下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030124226079.png" alt="image-20221030124226079"></p><p>3、修改/app/redis目录下的redis.conf文件</p><p>​(1)开启redis密码验证  可选，默认不开启，若开启，则修改如下</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030124918089.png" alt="image-20221030124918089"></p><p>​(2)==允许redis外地连接 <strong>必须</strong>==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030125208527.png" alt="image-20221030125208527"></p><p>(3) ==daemonize no，将daemonize yes注释起来或者daemonize no设置，因为该配置和docker run中-d参数冲突，会导致容器一直启动失败==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030125429215.png" alt="image-20221030125429215"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030125950459.png" alt="image-20221030125950459"></p><p>(4)开启redis数据持久化 appendonly yes 可选</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030125729007.png" alt="image-20221030125729007"></p><p>(5)运行redis容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull redisdocker run -d -p 6379:6379 --name redis  --privileged=true -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:latest redis-server /etc/redis/redis.confdocker exec -it redis /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030131620370.png" alt="image-20221030131620370"></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="Docker复杂安装详说"><a href="#Docker复杂安装详说" class="headerlink" title="Docker复杂安装详说"></a>Docker复杂安装详说</h2><h3 id="MySQL主从复制docker版"><a href="#MySQL主从复制docker版" class="headerlink" title="MySQL主从复制docker版"></a>MySQL主从复制docker版</h3><p>1.新建主服务器容器实例3307</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 3307:3306 --privileged=true -v /home/mysql/conf/master:/etc/mysql/ -v /home/mysql/data/master:/var/lib/mysql -v /home/mysql/log/master:/var/log/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql-master mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.进入/home/mysql/conf/master目录下新建my.cnf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /home/mysql/conf/mastervim my.cnf#my.cnf的内容如下[mysqld]##设置server_id,同一局域网中需要唯一server_id=101##指定不需要同步的数据库名称binlog-ignore-db=mysql##开启二进制日志功能log-bin=mall-mysql-bin##设置二进制日志使用内存大小（事务)binlog_cache_size=1M##设置使用的二进制日志格式( mixed, statement,row)binlog_format=mixed##二进制日志过期清理时间。默认值为0∶表示不自动清理。expire_logs_days=7##跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。##如∶1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors=1062<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.修改完配置后重启master实例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker restart mysql-master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.进入mysql-master容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it mysql-master /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.master容器实例内创建数据同步用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE USER 'slave'@'%'IDENTIFIED BY '123456';  #创建用户slave，123456用户为密码GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO 'slave'@'%';  #给用户slave授权<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.新建从服务器容器实例3308</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 3308:3306 --privileged=true -v /home/mysql/conf/slave:/etc/mysql/ -v /home/mysql/data/slave:/var/lib/mysql -v /home/mysql/log/slave:/var/log/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql-slave mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.进入/home/mysql/conf/slave目录下新建my.cnf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[mysqld]##设置server_id,同一局域网中需要唯一server_id=102##指定不需要同步的数据库名称binlog-ignore-db=mysql##开启二进制日志功能log-bin=mall-mysql-slave-bin##设置二进制日志使用内存大小（事务)binlog_cache_size=1M##设置使用的二进制日志格式( mixed, statement,row)binlog_format=mixed##二进制日志过期清理时间。默认值为0∶表示不自动清理。expire_logs_days=7##跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。##如∶1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors=1062##relay_log配置中继日志relay_log=mall-mysql-relay-bin## log_slave_updates表示slave将复制事件写进自己的二进制日志log_slave_updates=1##slave设置为只读(具有super权限的用户除外)read_only=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.修改完配置后重启slave实例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker restart mysql-slave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.在主数据库中杳看主从同步状态</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">show master status;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.进入mysql-slave容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it mysql-slave /bin/bashmysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>11.在从数据库中配置主从复制</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">#change master to master_host='主库ip', master_user='主库创建的用户', master_password='主库创建的用户对应的密码' master_port=主库的端口号,master_log_file='mall-mysql-bin.000001', master_log_pos=617, master_connect_retry=30;change master to master_host='192.168.10.102',master_user='slave',master_password='123456' ,master_port=3307,master_log_file='mall-mysql-bin.000001',master_log_pos=617,master_connect_retry=30;#参数说明：master_host：主数据库的IP地址;master_port：主数据库的运行端口;master_user：在主数据库创建的用于同步数据的用户账号;master_password：在主数据库创建的用于同步数据的用户密码;master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数;master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数;master_connect_retry：连接失败重试的时间间隔，单位为秒。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030142625404.png" alt="image-20221030142625404"></p><p>12.在从数据库中查看主从同步状态</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">show slave status \G;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030142756934.png" alt="image-20221030142756934"></p><p>13.在从数据库中开启主从同步</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">start slave;show slave status \G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030143012218.png" alt="image-20221030143012218"></p><p>14.查看从数据库状态发现已经同步</p><p>15.主从复制测试</p><p>​主库创建数据库、表及添加数据，在从库都能查看到相应的数据库、表及添加上的数据。</p><h3 id="安装redis集群"><a href="#安装redis集群" class="headerlink" title="安装redis集群"></a>安装redis集群</h3><p>cluster(集群)模式-docker版，哈希槽分区进行亿级数据存储</p><h4 id="哈希取余分区"><a href="#哈希取余分区" class="headerlink" title="哈希取余分区"></a>哈希取余分区</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030143916777.png" alt="image-20221030143916777"></p><p>2亿条记录就是2亿个k，v，我们单机不行必须要分布式多机，假设有3台机器构成一个集群，用户每次读写操作都是根据公式：<code>hash(key) % N</code>个机器台数，计算出哈希值，用来决定数据映射到哪一个节点上。</p><ul><li>优点：简单粗暴，直接有效，只需要预估好数据规划好节点，例如3台、8台、10台，就能保证一段时间的数据支撑。使用Hash算法让固定的一部分诺求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡+分而治之的作用</li><li>缺点：原来规划好的节点，进行扩容或者缩容就比较麻烦了额，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化:<code> Hash(key) / 3</code>会变成<code>Hash(key) / ?</code>。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。某个redis机器宕机了，由于台数数量变化，会导致hash取余全部数据重新洗牌。</li></ul><h4 id="一致性哈希算法分区"><a href="#一致性哈希算法分区" class="headerlink" title="一致性哈希算法分区"></a>一致性哈希算法分区</h4><p>一致性哈希算法在1997年由麻省理工学院中提出的，设计目标是为了解决==分布式缓存数据变动和映射问题==，某个机器宕机了，分母数量改变了，自然取余数就不行了。</p><p>==目的是当服务器个数发生变动时，尽量减少影响客户端到服务器的映射关系==</p><p>实现步骤：</p><ul><li>算法构建一致性哈希环</li><li>服务器IP节点映射</li><li>key落到服务器的落键规则</li></ul><h4 id="哈希槽分区"><a href="#哈希槽分区" class="headerlink" title="哈希槽分区"></a>哈希槽分区</h4><p>哈希槽实质就是一个数组，数组[0,2^14-1]形成hash slot空间。</p><p>作用：解决均匀分配的问题，==在数据和节点之间又加入了一层，把这层称为哈希槽(slot)，用于管理数据和节点之间的关系==，现在就相当于节点上放的是槽，槽里放的是数据。槽解决的是粒度问题，相当于把粒度变大了，这样便于数据移动。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030145820127.png" alt="image-20221030145820127"></p><p>一个集群只能有16384个槽，编号0-18383(0-2^14-1)。这些槽会分配给集群中的所有主节点，分配策略没有要求。可以指定哪些编号的槽分配给哪个主节点集群会记录节点和槽的对应关系。解决了节点和槽的关系后，接下来就需要对key求哈希值，然后对16384取余，余数是几key就落入对应的槽里。<code>slot = CRC16(key) % 16384</code>。以槽为单位移动数据，因为槽的数目是固定的处理起来比较容易，这样数据移动问题就解决了。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030150442927.png" alt="image-20221030150442927"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030150535633.png" alt="image-20221030150535633"></p><h4 id="3主3从redis集群扩缩容配置案例"><a href="#3主3从redis集群扩缩容配置案例" class="headerlink" title="3主3从redis集群扩缩容配置案例"></a>3主3从redis集群扩缩容配置案例</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030163819971.png" alt="image-20221030163819971"></p><p>1、新建6个docker容器实例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --name redis-node-1 --net host --privileged=true -v /data/redis/share/redis-node-1:/data redis:latest --cluster-enabled yes --appendonly yes --port 6381docker run -d --name redis-node-2 --net host --privileged=true -v /data/redis/share/redis-node-2:/data redis:latest --cluster-enabled yes --appendonly yes --port 6382docker run -d --name redis-node-3 --net host --privileged=true -v /data/redis/share/redis-node-3:/data redis:latest --cluster-enabled yes --appendonly yes --port 6383docker run -d --name redis-node-4 --net host --privileged=true -v /data/redis/share/redis-node-4:/data redis:latest --cluster-enabled yes --appendonly yes --port 6384docker run -d --name redis-node-5 --net host --privileged=true -v /data/redis/share/redis-node-5:/data redis:latest --cluster-enabled yes --appendonly yes --port 6385docker run -d --name redis-node-6 --net host --privileged=true -v /data/redis/share/redis-node-6:/data redis:latest --cluster-enabled yes --appendonly yes --port 6386#--net host 使用宿主机的IP和端口，默认#--cluster-enabled yes 开启redis集群#--appendonly yes 开启持久化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030152408600.png" alt="image-20221030152408600"></p><p>2、进入容器redis-node-1并为6台机器构建集群关系</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it redis-node-1 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==注意，进入docker容器后才能执行一下命令，且注意自己的真实lP地址==</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster create 192.168.10.102:6381 192.168.10.102:6382 192.168.10.102:6383 192.168.10.102:6384  192.168.10.102:6385 192.168.10.102:6386 --cluster-replicas 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==–cluster-replicas 1表示为每个master创建一个slave节点==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030153333815.png" alt="image-20221030153333815"></p><p>3、链接进入6381作为切入点，查看集群状态</p><p>(1)链接进入6381作为切入点，查看节点状态、cluster info、cluster nodes</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli -p 6381<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030153718190.png" alt="image-20221030153718190"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030154716582.png" alt="image-20221030154716582"></p><h4 id="主从容错切换迁移案例"><a href="#主从容错切换迁移案例" class="headerlink" title="主从容错切换迁移案例"></a>主从容错切换迁移案例</h4><h5 id="数据读写存储"><a href="#数据读写存储" class="headerlink" title="数据读写存储"></a>数据读写存储</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030150442927.png" alt="image-20221030150442927"></p><p>1、启动6机构成的集群并通过exec进入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it redis-node-1 /bin/bashredis-cli -p 6381<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、对6381新增两个key</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030155644459.png" alt="image-20221030155644459"></p><p>3、防止路由失效加参数-c并新增两个key</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli -p 6381 -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030161128141.png" alt="image-20221030161128141"></p><p>4、查看集群信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster check 192.168.10.102:6381<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030161524700.png" alt="image-20221030161524700"></p><h5 id="容错切换迁移"><a href="#容错切换迁移" class="headerlink" title="容错切换迁移"></a>容错切换迁移</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030163602408.png" alt="image-20221030163602408"></p><p>主6381和从机切换，先停止主机6381</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stop redis-node-1docker exec -it redis-node-2 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030162239435.png" alt="image-20221030162239435"></p><p>再次查看集群信息</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030162612481.png" alt="image-20221030162612481"></p><p>先还原之前的3主3从</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker restart redis-node-1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>杳看集群状态<br><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030163102971.png" alt="image-20221030163102971"></p><h4 id="主从扩容案例"><a href="#主从扩容案例" class="headerlink" title="主从扩容案例"></a>主从扩容案例</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030172942850.png" alt="image-20221030172942850"></p><h5 id="1、新建6387、6388两个节点-新建后启动-查看是否8节点"><a href="#1、新建6387、6388两个节点-新建后启动-查看是否8节点" class="headerlink" title="1、新建6387、6388两个节点+新建后启动+查看是否8节点"></a>1、新建6387、6388两个节点+新建后启动+查看是否8节点</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --name redis-node-7 --net host --privileged=true -v /data/redis/share/redis-node-7:/data redis:latest --cluster-enabled yes --appendonly yes --port 6387docker run -d --name redis-node-8 --net host --privileged=true -v /data/redis/share/redis-node-8:/data redis:latest --cluster-enabled yes --appendonly yes --port 6388<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030164935517.png" alt="image-20221030164935517"></p><h5 id="2、进入6387容器实例内部"><a href="#2、进入6387容器实例内部" class="headerlink" title="2、进入6387容器实例内部"></a>2、进入6387容器实例内部</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it redis-node-7 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3、将新增的6387节点-空槽号-作为master节点加入原集群"><a href="#3、将新增的6387节点-空槽号-作为master节点加入原集群" class="headerlink" title="3、将新增的6387节点(空槽号)作为master节点加入原集群"></a>3、将新增的6387节点(空槽号)作为master节点加入原集群</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster add-node 自己实际IP地址:6387 自己实际IP地址:6381 6387就是将要作为master新增节点6381就是原来集群节点里面的领路人，相当于6387拜拜6381的码头从而找到组织加入集群redis-cli --cluster add-node 192.168.10.102:6387 192.168.10.102:6381<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030165518668.png" alt="image-20221030165518668"></p><h5 id="4、检查集群情况"><a href="#4、检查集群情况" class="headerlink" title="4、检查集群情况"></a>4、检查集群情况</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster check 192.168.10.102:6381<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030170247065.png" alt="image-20221030170247065"></p><h5 id="5、重新分派槽号"><a href="#5、重新分派槽号" class="headerlink" title="5、重新分派槽号"></a>5、重新分派槽号</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#命令：redis-cli --cluster reshard IP地址:端口号redis-cli --cluster reshard 192.168.10.102:6381<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030170800268.png" alt="image-20221030170800268"></p><h5 id="6、再次检查集群情况"><a href="#6、再次检查集群情况" class="headerlink" title="6、再次检查集群情况"></a>6、再次检查集群情况</h5><pre class="line-numbers language-none"><code class="language-none">redis-cli --cluster check 192.168.10.102:6381<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="D:\java笔记\笔记\Docker2022.assets\image-20221030171432488.png" alt="image-20221030171432488"></p><h5 id="7、为主节点6387分配从节点6388"><a href="#7、为主节点6387分配从节点6388" class="headerlink" title="7、为主节点6387分配从节点6388"></a>7、为主节点6387分配从节点6388</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster add-node 192.168.10.102:6388 192.168.10.102:6387 --cluster-slave --cluster-master-id f86ac31edf0bf4de964f94670adcb137a6c6b56b   #注意：f86ac31edf0bf4de964f94670adcb137a6c6b56b是6387的编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030171811314.png" alt="image-20221030171811314"></p><h5 id="8、最后在检查集群情况"><a href="#8、最后在检查集群情况" class="headerlink" title="8、最后在检查集群情况"></a>8、最后在检查集群情况</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster check 192.168.10.102:6382<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030172032928.png" alt="image-20221030172032928"></p><h4 id="主从缩容案例"><a href="#主从缩容案例" class="headerlink" title="主从缩容案例"></a>主从缩容案例</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030181733366.png" alt="image-20221030181733366"></p><p>目的：6387和6388下线</p><h5 id="1、检查集群情况并获得6388的节点ID"><a href="#1、检查集群情况并获得6388的节点ID" class="headerlink" title="1、检查集群情况并获得6388的节点ID"></a>1、检查集群情况并获得6388的节点ID</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster check 192.168.10.102:6382<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030175114858.png" alt="image-20221030175114858"></p><h5 id="2、将6388删除"><a href="#2、将6388删除" class="headerlink" title="2、将6388删除"></a>2、将6388删除</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#命令: redis-cli --cluster del-node ip:从机端口 从机6388节点IDredis-cli --cluster del-node 192.168.10.102:6388 bfe4b267f716567bfbdce3a4a9c50aac6db607a2#检查集群是否删除6388redis-cli --cluster check 192.168.10.102:6382<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030174546586.png" alt="image-20221030174546586"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030174835734.png" alt="image-20221030174835734"></p><h5 id="3、将6387的槽号清空，重新分配，本例将清出来的槽号都给6381"><a href="#3、将6387的槽号清空，重新分配，本例将清出来的槽号都给6381" class="headerlink" title="3、将6387的槽号清空，重新分配，本例将清出来的槽号都给6381"></a>3、将6387的槽号清空，重新分配，本例将清出来的槽号都给6381</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster reshard 192.168.10.102:6381<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030180419955.png" alt="image-20221030180419955"></p><h5 id="4、检查集群情况-1"><a href="#4、检查集群情况-1" class="headerlink" title="4、检查集群情况"></a>4、检查集群情况</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster check 192.168.10.102:6381<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030180650386.png" alt="image-20221030180650386"></p><h5 id="5、将6387删除"><a href="#5、将6387删除" class="headerlink" title="5、将6387删除"></a>5、将6387删除</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#命令:redis-cli --cluster del-node ip:端口 6387节点IDredis-cli--cluster del-node 192.168.10.102:6387 f86ac31edf0bf4de964f94670adcb137a6c6b56b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030180941175.png" alt="image-20221030180941175"></p><h5 id="6、再次检查集群情况-1"><a href="#6、再次检查集群情况-1" class="headerlink" title="6、再次检查集群情况"></a>6、再次检查集群情况</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli --cluster check 192.168.10.102:6381<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030181127655.png" alt="image-20221030181127655"></p><h2 id="DockerFile解析"><a href="#DockerFile解析" class="headerlink" title="DockerFile解析"></a>DockerFile解析</h2><p>官网：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030182436456.png" alt="image-20221030182436456"></p><p><strong>构建步骤：编写Dockerfile文件 ——&gt;  docker build 命令构建镜像  ————&gt;   docker run依镜像运行容器实例</strong></p><h3 id="DockerFile构建过程解析"><a href="#DockerFile构建过程解析" class="headerlink" title="DockerFile构建过程解析"></a>DockerFile构建过程解析</h3><h4 id="Dockerfile内容基础知识"><a href="#Dockerfile内容基础知识" class="headerlink" title="Dockerfile内容基础知识"></a>Dockerfile内容基础知识</h4><p>1、每条保留字指令都==必须为大写字母==且后面要跟随至少一个参数</p><p>2、指令按照从上到下，顺序执行</p><p>3、#表示注释</p><p>4、每条指令都会创建一个新的镜像层并对镜像进行提交</p><h4 id="Docker执行Dockerfile的大致流程"><a href="#Docker执行Dockerfile的大致流程" class="headerlink" title="Docker执行Dockerfile的大致流程"></a>Docker执行Dockerfile的大致流程</h4><p>( 1） docker从基础镜像运行一个容器</p><p>(2）执行一条指令并对容器作出修改</p><p>(3）执行类似docker commit的操作提交一个新的镜像层</p><p>(4) docker再基于刚提交的镜像运行一个新容器</p><p>(5）执行dockerfile中的下一条指令直到所有指令都执行完成</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030192234110.png" alt="image-20221030192234110"></p><p>Dockerfle，需要定义一个Dockerfle，Dockerile定义了进程需要的一切东西。Dockerfle涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</p><p> Docker镜像，在用Dockerfle定义一个文件之后，docker build时会产生一个Docker镜像，当运行Docker镜像时会真正开始提供服务</p><p>Docker容器，容器是直接提供服务的。</p><h3 id="DockerFile常用保留字指令"><a href="#DockerFile常用保留字指令" class="headerlink" title="DockerFile常用保留字指令"></a>DockerFile常用保留字指令</h3><p>参考tomcat8的dockerfile入门：<a href="https://github.com/docker-library/tomcat/blob/master/8.5/jdk8/corretto-al2/Dockerfile">https://github.com/docker-library/tomcat/blob/master/8.5/jdk8/corretto-al2/Dockerfile</a></p><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是from</p><h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><p>镜像维护者的姓名和邮箱地址</p><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>容器构建时需要运行的命令</p><p>两种格式：</p><ul><li><p>shell格式</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">RUN &lt;命令行命令&gt;   #命令行命令  等同于，在终端操作的shell命令#如：RUN yum -y install vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>exec格式</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">RUN ["可执行文件","参数1","参数2"]#例如：RUN ["./test.php","dev","offline"]  等价于 RUN　./test.php dev offline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>RUN是在docker build时运行</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>当前容器对外暴露出的端口</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">EXPOSE 8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>指定该镜像以什么样的用户去执行，如果都不指定，默认是root</p><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>用来在构建镜像过程中设置环境变量</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">ENV CATALINA_HOME /usr/local/tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样；也可以在其它指令中直接使用这些环境变量。</p><p>比如：WORKDIR $CATALINA_HOME</p><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</p><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>类似ADD，拷贝文件和目录到镜像中。</p><p>将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</p><ul><li>COPY src dest</li><li>COPY [“src”,”dest”]</li><li>&lt;src源路径&gt;：源文件或者源目录</li><li>&lt;dest目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</li></ul><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>容器数据卷，用于数据保存和持久化工作</p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>1、指定容器启动后的要做的事情</p><p>CMD指令的格式和RUN相似，也有两种格式:</p><ul><li>shell格式：CMD &lt;命令&gt;</li><li>exec格式：CMD [“可执行文件”，“参数1”，”参数2”…]</li><li>参数列表格式：CMD [“参数1，”参数2”…]。在指定了ENTRYPOINT指令后，用CMD指定具体的参数。</li></ul><p>2、它和前面RUN命令的区别</p><ul><li>CMD是在docker run时运行。</li><li>RUN是在docker build时运行</li></ul><p>3、注意</p><p>​Dockerfile 中可以有多个CMD,指令，但==只有最后一个生效，CMD 会被docker run之后的参数替换==</p><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>也是用来指定一个容器启动时要运行的命令，类似于CMD指令，但是==ENTRYPOINT不会被docker run后面的命令覆盖==，而且这些==命令行参数会被当作参数送给ENTRYPOINT指令指定的程序==</p><p>命令格式和案例说明</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">ENTRYPOINT ["&lt;executeable&gt;","&lt;param1&gt;","&lt;param2&gt;",.....]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ENTRYPOINT可以和CMD一起用，一般是==变参==才会使用CMD，这里的CMD等于是在给ENTRYPOINT传参。当指定了ENTRYPOINT后，CMD的含义就发生了变化，不再是直接运行其命令而是将CMD的内容作为参数传递给ENTRYPOINT指令，他两个组合会变成<entrypoint>  “<cmd>“</cmd></entrypoint></p><p>案例如下：假设已通过Dockerfile构建了nginx:test镜像:</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM nginxENTRYPOINT ["nginx","-c"]  #定参CMD ["/etc/nginx/nginx.conf"]  #变参<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>是否传参</th><th>按照dockerfile编写执行</th><th>传参运行</th></tr></thead><tbody><tr><td>Docker命令</td><td>docker run nginx:test</td><td>docker run nginx:test -c /etc/nginx/new.conf</td></tr><tr><td>衍生出的实际命令</td><td>nginx -c /etc/nginx/nginx.conf</td><td>nginx -c /etc/nginx/new.conf</td></tr></tbody></table><table><thead><tr><th>BUILD</th><th>Both</th><th>RUN</th></tr></thead><tbody><tr><td>FROM</td><td>WORKID</td><td>CMD</td></tr><tr><td>MAINTAINER</td><td>USER</td><td>ENV</td></tr><tr><td>COPY</td><td></td><td>EXPOSE</td></tr><tr><td>ADD</td><td></td><td>VOLUME</td></tr><tr><td>RUN</td><td></td><td>ENTRYPOINT</td></tr><tr><td>ONBUILD</td><td></td><td></td></tr><tr><td>.dockerignore</td><td></td><td></td></tr></tbody></table><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><h4 id="自定义镜像centosJava8"><a href="#自定义镜像centosJava8" class="headerlink" title="自定义镜像centosJava8"></a>自定义镜像centosJava8</h4><p>下载centos镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull centos:7docker run -it -d  --name centos centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030203014128.png" alt="image-20221030203014128"></p><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><ul><li><p>Centos7镜像具备vim+ifconfig+jdk8</p></li><li><p>JDk的下载镜像地址<a href="https://mirrors.yangxingzhen.com/jdk/">https://mirrors.yangxingzhen.com/jdk/</a></p></li></ul><p>新建一个文件夹myfile，并把下载的jdk放在这个目录下，同时在该目录下编写Dockerfile文件</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030215803605.png" alt="image-20221030215803605"></p><h5 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h5><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">FROM centos:7MAINTAINER lt&lt;2049448867@qq.com&gt;ENV MYPATH /usr/localWORKDIR $MYPATH#安装vim编辑器RUN yum -y install vim#安装ifconfig命令查看网络IPRUN yum -y install net-tools#安装java8及lib库RUN yum -y install glibc.i686RUN mkdir -p /usr/local/java#ADD是相对路径jar,把jdk-8u171-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/#配置java环境变量ENV JAVA_HOME /usr/local/java/jdk1.8.0_171ENV JRE_HOME $JAVA_HOME/jreENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HONE/lib:$CLASSPATHENV PATH $JAVA_HOME/bin:$PATHEXPOSE 80CMD ench $MYPATHCMD ench "success-----------------------------------ok"CMD /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h5><p>必须的Dockerfile所在的目录下构建</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#docker build -t 新镜像名字:TAG .docker build -t centosjava8:1.0 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>==注意，上面TAG后面有个空格，有个点==</p><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#docker run -it 新镜像名字:TAGdocker run -it -d --name centos7  centosjavas:1.0docker exec -it centos7 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031111250339.png" alt="image-20221031111250339"></p><h4 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>仓库名、标签都是<none>的镜像，俗称dangling image</none></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030210507755.png" alt="image-20221030210507755"></p><h5 id="编写一个Dockerfile"><a href="#编写一个Dockerfile" class="headerlink" title="编写一个Dockerfile"></a>编写一个Dockerfile</h5><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">from ubuntuCMD echo "action is success"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="构建-1"><a href="#构建-1" class="headerlink" title="构建"></a>构建</h5><pre class="line-numbers language-none"><code class="language-none">docker build .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030230344425.png" alt="image-20221030230344425"></p><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker image ls -f dangling=true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030214752412.png" alt="image-20221030214752412"></p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker image prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030214953165.png" alt="image-20221030214953165"></p><h2 id="Docker微服务实战"><a href="#Docker微服务实战" class="headerlink" title="Docker微服务实战"></a>Docker微服务实战</h2><h3 id="通过IDEA新建一个普通微服务模块"><a href="#通过IDEA新建一个普通微服务模块" class="headerlink" title="通过IDEA新建一个普通微服务模块"></a>通过IDEA新建一个普通微服务模块</h3><p>.</p><p>建Module</p><pre class="line-numbers language-none"><code class="language-none">docke_demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改POM</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.docker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docke_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写YML</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 6001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主启动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class DockerDemoApplication {    public static void main(String[] args) {        SpringApplication.run(DockerDemoApplication.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class DockerController {    @Value("${server.port}")    private String serverPort;    @RequestMapping("/order/docker")    public String helloDocker(){        return "Hello Docker "+ "\t" + UUID.randomUUID().toString();    }    @GetMapping("/order/index")    public String index(){        return "服务端口号：" + "\t"+ serverPort + UUID.randomUUID().toString();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过Dockerfile发布微服务部署到docker容器"><a href="#通过Dockerfile发布微服务部署到docker容器" class="headerlink" title="通过Dockerfile发布微服务部署到docker容器"></a>通过Dockerfile发布微服务部署到docker容器</h3><p>IDEA工具里面搞定微服务jar包</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221030233935236.png" alt="image-20221030233935236"></p><h4 id="编写Dockerfile-1"><a href="#编写Dockerfile-1" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">#基础镜像使用javaFROM java:8#作者MAINTAINER lt#VOLUME指定临时文件目录为/tmp，在主机/var/lib/ldocker目录下创建了一个临时文件并链接到容器的/tmpVOLUME /tmp#将jar包添加到容器中并更名为lt_docker.jarADD docke_demo-1.0-SNAPSHOT.jar lt_docker.jar#运行jar包RUN bash -c 'touch /lt_docker.jar'ENTRYPOINT ["java","-jar" ,"/lt_docker.jar"]#暴露6001端口作为微服务EXPOSE 6001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker build -t mydocker:1.0 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -d -p 6001:6001  --name mydocekr mydocker:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031112856685.png" alt="image-20221031112856685"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031112806499.png" alt="image-20221031112806499"></p><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><h3 id="查看docker网络模式命令"><a href="#查看docker网络模式命令" class="headerlink" title="查看docker网络模式命令"></a>查看docker网络模式命令</h3><pre class="line-numbers language-none"><code class="language-none">docker network ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031001529905.png" alt="image-20221031001529905"></p><h3 id="docker网络基本命令"><a href="#docker网络基本命令" class="headerlink" title="docker网络基本命令"></a>docker网络基本命令</h3><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031001750501.png" alt="image-20221031001750501"></p><h4 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h4><pre class="line-numbers language-none"><code class="language-none">docker network create 要创建的网络名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031002352944.png" alt="image-20221031002352944"></p><h4 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h4><pre class="line-numbers language-none"><code class="language-none">docker network ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031002423557.png" alt="image-20221031002423557"></p><h4 id="查看网络源数据"><a href="#查看网络源数据" class="headerlink" title="查看网络源数据"></a>查看网络源数据</h4><pre class="line-numbers language-none"><code class="language-none">docker network inspect  xxx网络名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031002511538.png" alt="image-20221031002511538"></p><h4 id="删除网络"><a href="#删除网络" class="headerlink" title="删除网络"></a>删除网络</h4><pre class="line-numbers language-none"><code class="language-none">docker network rm xxx网络名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031002634888.png" alt="image-20221031002634888"></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><p>容器间的互联和通信以及端映射</p></li><li><p>容器IP变动时候可以通过服务名直接网络通信而不受到影响</p></li></ul><h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><table><thead><tr><th>网络模式</th><th>简介</th></tr></thead><tbody><tr><td>bridge</td><td>为每一个容器分配、设置IP等，并将容器连接到一个<code>docker0</code>，==虚拟网桥，默认为该模式。==</td></tr><tr><td>host</td><td>容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</td></tr><tr><td>none</td><td>容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，IP等。</td></tr><tr><td>container</td><td>新创建的容器不会创建自己的网卡和配置自己的IP，而是和一个指定的容器共享IP、端口范围等。</td></tr><tr><td></td><td></td></tr></tbody></table><ul><li>bridge模式：使用<code>--network bridge</code>指定，默认使用<code>docker0</code></li><li>host模式：使用<code>--network host</code>指定</li><li>none模式：使用<code>--network none</code>指定</li><li>container模式：使用<code>--network container:NAME</code>或者容器ID指定</li></ul><h4 id="容器实例内默认网络ip生产规则"><a href="#容器实例内默认网络ip生产规则" class="headerlink" title="容器实例内默认网络ip生产规则"></a>容器实例内默认网络ip生产规则</h4><p>docker容器内部的ip是有可能会发生改变的</p><pre class="line-numbers language-none"><code class="language-none">docker run -it -d --name u1 ubuntudocker run -it -d --name u2 ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看运行的这两容器的ip</p><pre class="line-numbers language-none"><code class="language-none">docker inspect u1 | tail -n 20docker inspect u2 | tail -n 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031113949347.png" alt="image-20221031113949347"></p><p>==明显：每个容器都会拥有属于自己的IP地址==</p><h4 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h4><h5 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h5><p>Docker服务默认会创建一个docker0网桥（其上有一个docker0内部接口)，该桥接网络的名称为docker0，它在==内核层==连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到==同一个物理网络==。Docker默认指定了docker0接口的IP地址和子网掩码，==让主机和容器之间可以通过网桥相互通信==。</p><p>查看bridge 网络的详细信息，并通过grep获取名称项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network inspect bridge | grep nameifconfig | grep docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031115007492.png" alt="image-20221031115007492"></p><h6 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h6><p>1、Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时==Docker网桥是每个容器的默认网关==。因为在同一宿主机内的容器都接入向一个网桥，这样容器之间就能够通过容器的Container-lP直接通信。</p><p>2、==docker run的时候，没有指定network的话默认使用的网桥模式就是bridge，使用的就是docker0。==在宿主机ifconfg，就可以看到docker0和自己create的network，eth0，eth1，eth2， ……代表网卡一，网卡二，网卡三，……, lo代表127.0.0.1，即localhost. inet addr用来表示网卡的IP地址</p><p>3、网桥docker0创建一对对等虚拟设备接口，一个叫veth，另一个叫eth0，成对匹配。</p><p>​（1）整个宿主机的网桥模式都是docker0，类似一个交换机有一堆接口，每个接口叫veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫veth pair）;</p><p>​（2）每个容器实例内部也有一块网卡，每个接口叫eth0;</p><p>​（3） docker0上面的每个veth匹配某个容器实例内部的etho，两两配对，一一匹配。通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下,会从这个网关下各自拿到分配的ip，此时两个容器的网络是互通的。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031115908123.png" alt="image-20221031115908123"></p><h6 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h6><pre class="line-numbers language-none"><code class="language-none">docker run -d -p 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8docker run -d -p 8082:8080 --name tomcat82 billygoo/tomcat8-jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031131136093.png" alt="image-20221031131136093"></p><h5 id="host"><a href="#host" class="headerlink" title="host"></a>host</h5><p>直接使用宿主机的IP地址与外界进行通信，不再需要额外进行NAT转换。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031131339711.png" alt="image-20221031131339711"></p><h6 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h6><p>容器将==不会获得一个独立的Network Namespace==，而是和宿主机共用一个Network Namespace。==容器将不会虚拟出自己的网卡而是使用宿主机的IP和端口。==</p><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 8083:8080 --network host --name tomcat83 billygoo/tomcat8-jdk8  #有警告 不推荐使用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031131823968.png" alt="image-20221031131823968"></p><p>原因:</p><p>docker启动时指定–network=host或-net=host，如果还指定了-p映射端口，那这个时候就会有此警告，并且通过-p设置的参数将不会起到任何作用，端口号会以主机端口号为主，重复时则递增。</p><p>解决:</p><p>解决的办法就是使用docker的其他网络模式，例如–network=bridge，这样就可以解决问题，或者直接无。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --network host --name tomcat83 billygoo/tomcat8-jdk8   #推荐使用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031133025402.png" alt="image-20221031133025402"></p><p>容器内部</p><pre class="line-numbers language-none"><code class="language-none">docker inspect tomcat83 | tail -n 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031134806726.png" alt="image-20221031134806726"></p><p>没有设置-p的端口映射了，如何访问启动的tomcat83 ? ?</p><pre class="line-numbers language-none"><code class="language-none">http://宿主机IP:8080/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031135039116.png" alt="image-20221031135039116"></p><h5 id="none"><a href="#none" class="headerlink" title="none"></a>none</h5><p>在none模式下，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息，只有一个lo需要我们自己为Docker容器添加网卡、配置IP等。</p><p>案例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 8084:8080 --network none --name tomcat84 billygoo/tomcat8-jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker inspect  tomcat84 | tail -n 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031135557066.png" alt="image-20221031135557066"></p><h5 id="container"><a href="#container" class="headerlink" title="container"></a>container</h5><p>==新建的容器和已经存在的一个容器共享一个网络IP配置而不是和宿主机共享==。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031135850373.png" alt="image-20221031135850373"></p><h6 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h6><p><strong>错误的演示案例</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 8085:8080 --name tomcat85 billygoo/tomcat8-jdk8docker run -d -p 8086:8080 --network container:tomcat85 --name tomcat86 billygoo/tomcat8-jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031140132650.png" alt="image-20221031140132650"></p><p>报错的原因：相当于tomcat86和tomcat85公用同一个IP同一个端口，导致端口冲突，使用tomcat演示不合适，换其他的镜像演示</p><p><strong>正确的演示案例</strong></p><p>Alpine操作系统是一个面向安全的轻型 Linux发行版</p><p>Apine Linux 是一款独立的、非商业的通用Linux发行版，专为追求安全性、简单性和资源效率的用户而设计。可能很多人没听说过这个Linux”发行版本，但是经常用Docker的朋友可能都用过，因为他小，简单，安全而著称，所以作为基础镜像是非常好的一个选择，镜像非常小，不到6M的大小，所以特别适合容器打包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --name alpine1 alpine /bin/shdocker run -it --network container:alpine1 --name alpine2 alpine /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果，验证共用搭桥</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031141635914.png" alt="image-20221031141635914"></p><p>假如此时关闭alpine1，再看看alpine2</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rm -f alpine1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031142113561.png" alt="image-20221031142113561"></p><h5 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h5><h6 id="没有用自定义网络之前"><a href="#没有用自定义网络之前" class="headerlink" title="没有用自定义网络之前"></a>没有用自定义网络之前</h6><p><strong>案例</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8docker run -d -p 8082:8080 --name tomcat82 billygoo/tomcat8-jdk8docker exec -it tomcat81 /bin/bashdocker exec -it tomcat82 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功启动并用docker exec进入各自容器实例内部</p><p><strong>问题</strong></p><p>1、按照IP地址ping是OK的</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031143253860.png" alt="image-20221031143253860"></p><p>2、按照服务名ping结果???</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031143633378.png" alt="image-20221031143633378"></p><h6 id="用自定义网络后"><a href="#用自定义网络后" class="headerlink" title="用自定义网络后"></a>用自定义网络后</h6><p>1、自定义桥接网络,自定义网络默认使用的是桥接网络bridge</p><p>2、新建自定义网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network create lt_network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031143940921.png" alt="image-20221031143940921"></p><p>3、新建容器加入上一步新建的自定义网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 8081:8080 --network lt_network --name tomcat81 billygoo/tomcat8-jdk8docker run -d -p 8082:8080 --network lt_network --name tomcat82 billygoo/tomcat8-jdk8docker exec -it tomcat81 /bin/bashdocker exec -it tomcat82 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、互相ping测试</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031145113381.png" alt="image-20221031145113381"></p><h6 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h6><p>==自定义网络本身就维护好了主机名和ip的对应关系（ ip和域名都能通)==</p><h2 id="Docker-compose容器编排"><a href="#Docker-compose容器编排" class="headerlink" title="Docker-compose容器编排"></a>Docker-compose容器编排</h2><p>Docker-Compose是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。</p><p>Compose是 Docker公司推出的一个工具软件，可以管理多个Docker容器组成一个应用。你需要定义一个YAML格式的配置文件docker-compose.yml，==写好多个容器之间的调用关系==。然后，只要一个命令，就能同时启动/关闭这些容器</p><p>Compose允许用户通过一个单独的docker-compose.yml模板文件(YAML格式）来定义一组相关联的应用容器为一个项目(project)。</p><p>可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。Docker-Compose解决了容器与容器之间如何管理编排的问题。</p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p>官网文档地址：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><p>官网下载地址：<a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></p><h3 id="安装步骤-1"><a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1、下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -SL https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031172847343.png" alt="image-20221031172847343"></p><p>2、授权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、查看docker-compose的版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031172920320.png" alt="image-20221031172920320"></p><h3 id="卸载步骤"><a href="#卸载步骤" class="headerlink" title="卸载步骤"></a>卸载步骤</h3><p>使用curl安装的卸载步骤</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rm /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Compose使用的三个步骤"><a href="#Compose使用的三个步骤" class="headerlink" title="Compose使用的三个步骤"></a>Compose使用的三个步骤</h3><ul><li>编写Dockerfile定义各个微服务应用并构建出对应的镜像文件</li><li>使用docker-compose.yml，定义一个完整业务单元，安排好整体应用中的各个容器服务。</li><li>最后，执行<code>docker-compose up</code>命令来启动并运行整个应用程序，完成一键部署上线</li></ul><h3 id="Compose常用命令"><a href="#Compose常用命令" class="headerlink" title="Compose常用命令"></a>Compose常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose -h            #查看帮助docker-compose up            #启动所有docker-compose服务docker-compose up -d #启动所有docker-compose服务并后台运行docker-compose down #停止并删除容器、网络、卷、镜像。docker-compose exec yml里面的服务id#进入容器实例内部 docker-compose exec docker-compose.yml文件中写的服务id /bin/bashdocker-compose ps#展示当前docker-compose编排过的运行的所有容器docker-compose top#展示当前docker-compose编排过的容器进程docker-compose logs yml里面的服务id#查看容器输出日志docker-compose config#检查配置docker-compose config -q #检查配置，有问题才有输出docker-compose restart#重启服务docker-compose start#启动服务docker-compose stop#停止服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Compose编排微服务"><a href="#Compose编排微服务" class="headerlink" title="Compose编排微服务"></a>Compose编排微服务</h3><p>以前的基础版（docker_demo）</p><h4 id="SQL建表建库"><a href="#SQL建表建库" class="headerlink" title="SQL建表建库"></a>SQL建表建库</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE `t_user` (  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,  `username` varchar(50) NOT NULL DEFAULT '' COMMENT '用户名',  `password` varchar(50) NOT NULL DEFAULT '' COMMENT '密码',  `sex` tinyint(4) NOT NULL DEFAULT '0' COMMENT '性别 0=女 1=男 ',  `deleted` tinyint(4) unsigned NOT NULL DEFAULT '0' COMMENT '删除标志，默认0不删除，1删除',  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='用户表'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改POM"><a href="#改POM" class="headerlink" title="改POM"></a>改POM</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example.docker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docke_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper.version</span><span class="token punctuation">&gt;</span></span>4.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--guava Google 开源的 Guava 中自带的布隆过滤器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>23.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- redisson --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.13.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringBoot通用依赖模块--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Swagger--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringBoot与Redis整合依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--springCache--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--springCache连接池依赖包--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- jedis --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Mysql数据库驱动--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringBoot集成druid连接池--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mybatis和springboot整合--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 添加springboot对amqp的支持 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--通用基础配置junit/devtools/test/log4j/lombok/hutool--&gt;</span>        <span class="token comment">&lt;!--hutool--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--persistence--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.persistence<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>persistence-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--通用Mapper--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mapper.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写YML"><a href="#写YML" class="headerlink" title="写YML"></a>写YML</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 6001spring:  datasource:    type: com.alibaba.druid.pool.DruidDataSource    driver-class-name: com.mysql.jdbc.Driver    url:  jdbc:mysql://192.168.10.102:3366/docker_demo?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false    username: root    password: 123456    druid:      test-while-idle: false  redis:    database: 0    host: 192.168.10.102    port: 6379    password: 123456    lettuce:      pool:        max-active: 8        max-wait: -1ms        max-idle: 8        min-idle: 0mybatis:  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  mapper-locations: classpath:mapper/*.xml  type-aliases-package: com.example.docker.entity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主启动"><a href="#主启动" class="headerlink" title="主启动"></a>主启动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableCachingpublic class DockerDemoApplication {    public static void main(String[] args) {        SpringApplication.run(DockerDemoApplication.class,args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h4><h5 id="TUserServiceImpl"><a href="#TUserServiceImpl" class="headerlink" title="TUserServiceImpl"></a>TUserServiceImpl</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service@Slf4jpublic class UserServiceImpl implements UserService {    public static final String CACHE_KEY_USER = "user:";    @Resource    private UserMapper userMapper;    @Resource    private RedisTemplate redisTemplate;    /**     * addUser     * @param user     */    public void addUser(User user)    {        //1 先插入mysql并成功        int i = userMapper.insertSelective(user);        if(i &gt; 0)        {            //2 需要再次查询一下mysql将数据捞回来并ok            user = userMapper.selectByPrimaryKey(user.getId());            //3 将捞出来的user存进redis，完成新增功能的数据一致性。            String key = CACHE_KEY_USER+user.getId();            redisTemplate.opsForValue().set(key,user);        }    }    /**     * findUserById     * @param id     * @return     */    public User findUserById(Integer id)    {        User user = null;        String key = CACHE_KEY_USER+id;        //1 先从redis里面查询，如果有直接返回结果，如果没有再去查询mysql        user = (User) redisTemplate.opsForValue().get(key);        if(user == null)        {            //2 redis里面无，继续查询mysql            user = userMapper.selectByPrimaryKey(id);            if(user == null)            {                //3.1 redis+mysql 都无数据                //你具体细化，防止多次穿透，我们规定，记录下导致穿透的这个key回写redis                return user;            }else{                //3.2 mysql有，需要将数据写回redis，保证下一次的缓存命中率                redisTemplate.opsForValue().set(key,user);            }        }        return user;    }    @Override    public void deleteUser(Integer id) {        userMapper.deletUserById(id);        String key = CACHE_KEY_USER + id;        redisTemplate.delete(key);    }    @Override    public void updateUser(User user) {        userMapper.updateByPrimaryKey(user);        //修改用户将之前存在redis的key删除，要不然造成访问数据不一致的问题        String key = CACHE_KEY_USER + user.getId();        redisTemplate.delete(key);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserService {    void addUser(User user);    User findUserById(Integer id);    void deleteUser(Integer id);    void updateUser(User user);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Api(description = "用户User接口")@RestController@Slf4j@RequestMapping("/user")public class DockerController {    @Autowired    private UserService userService;    @Value("${server.port}")    private String serverPort;    @GetMapping("/docker")    public String helloDocker(){        return "Hello Docker "+ "\t" + UUID.randomUUID().toString();    }    @GetMapping("/index")    public String index(){        return "服务端口号：" + "\t"+ serverPort + UUID.randomUUID().toString();    }    @ApiOperation("数据库新增3条记录")    @RequestMapping(value = "/add",method = RequestMethod.POST)    public void addUser()    {        for (int i = 1; i &lt;=3; i++) {            User user = new User();            user.setUsername("lt"+i);            user.setPassword(IdUtil.simpleUUID().substring(0,6));            user.setSex((byte) new Random().nextInt(2));            userService.addUser(user);        }    }    @ApiOperation("删除1条记录")    @RequestMapping(value = "/delete/{id}",method = RequestMethod.POST)    public void deleteUser(@PathVariable Integer id)    {        userService.deleteUser(id);    }    @ApiOperation("修改1条记录")    @RequestMapping(value = "/update",method = RequestMethod.POST)    public void updateUser(@RequestBody UserDTO userDTO)    {        User user = new User();        BeanUtils.copyProperties(userDTO,user);        userService.updateUser(user);    }    @ApiOperation("查询1条记录")    @RequestMapping(value = "/find/{id}",method = RequestMethod.GET)    public User findUserById(@PathVariable Integer id)    {        return userService.findUserById(id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="RedisConfig"><a href="#RedisConfig" class="headerlink" title="RedisConfig"></a>RedisConfig</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@Slf4jpublic class RedisConfig {    /**     * redis序列化的工具配置类，下面这个请一定开启配置     * @param lettuceConnectionFactory     * @return     */    @Bean    public RedisTemplate&lt;String, Serializable&gt; redisTemplate(LettuceConnectionFactory lettuceConnectionFactory){        RedisTemplate&lt;String, Serializable&gt; redisTemplate = new RedisTemplate&lt;&gt;();        redisTemplate.setConnectionFactory(lettuceConnectionFactory);        //设置key序列化方式String        redisTemplate.setKeySerializer(new StringRedisSerializer());        //设置value序列化方式json        redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());        redisTemplate.setHashKeySerializer(new StringRedisSerializer());        redisTemplate.setHashValueSerializer(new GenericJackson2JsonRedisSerializer());        redisTemplate.afterPropertiesSet();        return redisTemplate;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SwaggerConfig"><a href="#SwaggerConfig" class="headerlink" title="SwaggerConfig"></a>SwaggerConfig</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Slf4j@Configuration@EnableSwagger2@EnableKnife4jpublic class SwaggerConfig extends WebMvcConfigurationSupport {    /**     * 静态资源映射     * @param registry     */    @Override    protected void addResourceHandlers(ResourceHandlerRegistry registry) {        log.info("开启静态资源映射.....");        registry.addResourceHandler("doc.html").addResourceLocations("classpath:/META-INF/resources/");        registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");    }    @Bean    public Docket createRestApi(){        //文档类型        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())                .select()                .apis(RequestHandlerSelectors.basePackage("com.example.docker.controller")) //扫描controller包的接口                .paths(PathSelectors.any())                .build();    }    private ApiInfo apiInfo(){        return new ApiInfoBuilder()                .title("docker-compose测试")                .version("1.0")                .description("docker-compose测试文档")                .build();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TUserMapper"><a href="#TUserMapper" class="headerlink" title="TUserMapper"></a>TUserMapper</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.docker.mapper.TUserMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.docker.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--          WARNING - @mbg.generated        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TINYINT<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleted<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TINYINT<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleted<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deletUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        delete from t_user where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="user"><a href="#user" class="headerlink" title="user"></a>user</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Table(name = "t_user")@Data@AllArgsConstructor@NoArgsConstructorpublic class User {    @Id    @GeneratedValue(generator = "JDBC")    private Integer id;    /**     * 用户名     */    private String username;    /**     * 密码     */    private String password;    /**     * 性别 0=女 1=男     */    private Byte sex;    /**     * 删除标志，默认0不删除，1删除     */    private Byte deleted;    /**     * 更新时间     */    @Column(name = "update_time")    private Date updateTime;    /**     * 创建时间     */    @Column(name = "create_time")    private Date createTime;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mvn package命令将微服务形成新的jar包并上传到Linux服务器/mydocker目录下</p><h4 id="编写Dockerfile-2"><a href="#编写Dockerfile-2" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">#基础镜像使用javaFROM java:8#作者MAINTAINER lt#VOLUME指定临时文件目录为/tmp，在主机/var/lib/ldocker目录下创建了一个临时文件并链接到容器的/tmpVOLUME /tmp#将jar包添加到容器中并更名为lt_docker.jarADD docke_demo-1.0-SNAPSHOT.jar lt_docker.jar#运行jar包RUN bash -c 'touch /lt_docker.jar'ENTRYPOINT ["java","-jar" ,"/lt_docker.jar"]#暴露6001端口作为微服务EXPOSE 6001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构建镜像-1"><a href="#构建镜像-1" class="headerlink" title="构建镜像"></a>构建镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build -t lt_docker:1.2 .#运行lt_docker:1.2容器docker run -it -d -p 6002:6001 --name ltdocker1 lt_docker:1.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031235016935.png" alt="image-20221031235016935"></p><h3 id="编写docker-compose-yml文件"><a href="#编写docker-compose-yml文件" class="headerlink" title="编写docker-compose.yml文件"></a>编写docker-compose.yml文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">version: "3"  #docker-compose的版本services:  microService:  #服务名称，随意取    image: lt_docker:1.6  #镜像名及tag   类似于：docker run -d lt_docker:1.6    container_name: ms01      #类似于：docker run -d --name ms01 lt_docker:1.6    ports:      - "6001:6001"    #端口映射  类似于：docker run -d -p 6001:6001 --name ms01 lt_docker:1.6    volumes:      - /app/microService:/data   #挂载    networks:      - lt_network      #自定义docker network  类似于：docker run -d -p 6001:6001 --network lt_network --name ms01 lt_docker:1.6    depends_on:   #依赖与redis和mysql先启动      - redis      - mysql  redis:    image: redis:latest    ports:       - "6379:6379"    volumes :       - /app/redis/redis.conf:/etc/redis/redis.conf       - /app/redis/data:/data    networks :      - lt_network    command: redis-server /etc/redis/redis.conf  mysql:    image: mysql:5.7    environment:      MYSQL_ROOT_PASSWORD: '123456'      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'      MYSQL_DATABASE: 'docker_demo'      MYSQL_USER: 'root'      MYSQL_PASSWORD: '123456'    ports:      - "3366:3306"    volumes:    - /home/mysql/data:/var/lib/mysql    - /app/mysql/conf/my.cnf:/etc/my.cnf    - /home/mysql/conf:/etc/mysql/conf.d    networks:      - lt_network    command: --default-authentication-plugin=mysql_native_password   #解决外部无法访问的问题networks:  lt_network:   #自定义docker网络  类似于：docker network create lt_network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行docker-compose-yml文件"><a href="#执行docker-compose-yml文件" class="headerlink" title="执行docker-compose.yml文件"></a>执行docker-compose.yml文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build -t lt_docker:1.6 .docker-compose config -q  #执行前检查docker-compose.yml文件是否有误docker-compose up -d   #-d 表示后台运行docker-compose.yml文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101003720876.png" alt="image-20221101003720876"></p><h2 id="Docker轻量级可视化工具Portainer"><a href="#Docker轻量级可视化工具Portainer" class="headerlink" title="Docker轻量级可视化工具Portainer"></a>Docker轻量级可视化工具Portainer</h2><p>Portainer是一款轻量级的应用，它提供了图形化界面，用于方便地管理Docker环境，包括单机环境和集群环境。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>官网：<a href="https://www.portainer.io/">https://www.portainer.io/</a></p><p>官网下载：<a href="https://docs.portainer.io/v/ce-2.9/start/install/server/docker/linux">https://docs.portainer.io/v/ce-2.9/start/install/server/docker/linux</a></p><h4 id="安装步骤-2"><a href="#安装步骤-2" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>1、docker命令安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 8000:8000 -p 9000:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer#--restart=always 表示只要docker启动该容器就启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031205959889.png" alt="image-20221031205959889"></p><p>2、第一次登录需创建admin，访问地址：http://宿主机IP:9000，我这里是：<a href="http://192.168.10.102:9000/">http://192.168.10.102:9000</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031210103078.png" alt="image-20221031210103078"></p><p>3、设置admin用户和密码（8位，随便写）后首次登陆</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031210433826.png" alt="image-20221031210433826"></p><p>4、选择local选项卡后本地docker详细信息展示</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031210506592.png" alt="image-20221031210506592"></p><p>5、上一步的图形展示，能想得起对应命令吗?</p><p><strong>答：docker system df</strong></p><h2 id="Docker容器监控之CAdvisor-lnfluxDB-Granfana"><a href="#Docker容器监控之CAdvisor-lnfluxDB-Granfana" class="headerlink" title="Docker容器监控之CAdvisor+lnfluxDB+Granfana"></a>Docker容器监控之CAdvisor+lnfluxDB+Granfana</h2><p>原生命令</p><pre class="line-numbers language-none"><code class="language-none">docker stats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031212252517.png" alt="image-20221031212252517"></p><p>问题</p><p>通过docker stats命令可以很方便的看到当前宿主机上所有容器的CPU，内存以及网络流量等数据，==一般小公司够用了==。。。但是，<code>docker stats</code>统计结果只能是当前宿主机的全部容器，==数据资料是实时的，没有地方存储==、没有健康指标过线预警等功能</p><blockquote><p>CAdvisor监控收集+InfluxDB存储数据+Granfana展示图表</p></blockquote><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031213455342.png" alt="image-20221031213455342"></p><h3 id="CAdvisor"><a href="#CAdvisor" class="headerlink" title="CAdvisor"></a>CAdvisor</h3><p>CAdvisor是一个容器资源监控工具,包括容器的内存，CPU，网络IO，磁盘IO等监控，同时提供了一个WEB页面用于查看容器的实时运行状态。CAdvisor默认存储2分钟的数据,而且只是针对单物理机。不过，CAdvisor提供了很多数据集成接口，支持InfluxDB，Redis，Kafka，Elasticsearch等集成,可以加上对应配置将监控数据发往这些数据库存储起来。</p><p>CAdvisor功能主要有两点:</p><ul><li>展示Host和容器两个层次的监控数据</li><li>展示历史变化数据。</li></ul><h3 id="lnfluxDB"><a href="#lnfluxDB" class="headerlink" title="lnfluxDB"></a>lnfluxDB</h3><p>InfluxDB是用Go语言编写的一个开源分布式时序、事件和指标数据库，无需外部依赖。CAdvisor默认只在本机保存最近2分钟的数据，为了持久化存储数据和统一收集展示监控数据，需要将数据存储到InfluxDB中。InfluxDB是一个时序数据库，专门用于存储时序相关数据，很适合存储CAdvisor的数据。而且，CAdvisor本身已经提供InfluxDB的集成方法，丰启动容器时指定配置即可。</p><p>lnfluxDB主要功能:</p><ul><li>基于时间序列，支持与时间有关的相关函数(如最大、最小、求和等);</li><li>可度量性：你可以实时对大量数据进行计算;</li><li>基于事件：它支持任意的事件数据;</li></ul><h3 id="Granfana"><a href="#Granfana" class="headerlink" title="Granfana"></a>Granfana</h3><p>Grafana是一个开源的数据监控分析可视化平台，支持多种数据源配置（支持的数据源包括InfluxDB，MySQLElasticsearch，OpenTSDB，Graphite等）和丰富的插件及模板功能，支持图表权限控制和报警。</p><p>Grafan主要特性:</p><ul><li>灵活丰富的图形化选项。</li><li>可以混合多种风格。</li><li>支持白天和夜间模式。</li><li>多个数据源</li></ul><h3 id="compose容器编排"><a href="#compose容器编排" class="headerlink" title="compose容器编排"></a>compose容器编排</h3><h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir /mydocker/cig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031213809426.png" alt="image-20221031213809426"></p><h4 id="新建3件套组合的docker-compose-yml"><a href="#新建3件套组合的docker-compose-yml" class="headerlink" title="新建3件套组合的docker-compose.yml"></a>新建3件套组合的docker-compose.yml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">version: '3.1'volumes:  grafana_data: {}services:  influxdb:    image: tutum/influxdb:0.9    restart: always    environment:      - PRE_CREATE_DB=cadvisor    ports:      - "8083:8083"      - "8086:8086"    volumes:      - ./data/influxdb:/data        cadvisor:    image: google/cadvisor    links:      - influxdb:influxsrv    command: -storage_driver=influxdb -storage_driver_db=cadvisor -storage_driver_host=influxsrv:8086    restart: always    ports:      - "8080:8080"    volumes:      - /:/rootfs:ro      - /var/run:/var/run:rw      - /sys:/sys:ro      - /var/lib/docker/:/var/lib/docker:ro  grafana:    user: "104"    image: grafana/grafana    restart: always    links:      - influxdb:influxsrv    ports:      - "3000:3000"    volumes:      - grafana_data:/var/lib/grafana    environment:      - HTTP_USER=admin      - HTTP_PASS=admin      - INFLUXDB_HOST=influxsrv      - INFLUXDB_PORT=8086      - INFLUXDB_NAME=cadvisor      - INFLUXDB_USER=root      - INFLUXDB_PASS=root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动docker-compose文件"><a href="#启动docker-compose文件" class="headerlink" title="启动docker-compose文件"></a>启动docker-compose文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose config -q   #启动前检查文件是否有错docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031222640919.png" alt="image-20221031222640919"></p><h4 id="查看三个服务容器是否启动"><a href="#查看三个服务容器是否启动" class="headerlink" title="查看三个服务容器是否启动"></a>查看三个服务容器是否启动</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docekr ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221031222733435.png" alt="image-20221031222733435"></p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>浏览cAdvisor收集服务，<a href="http://192.168.10.102:8080/">http://192.168.10.102:8080/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101145746254.png" alt="image-20221101145746254"></p><p>浏览influxdb存储服务，<a href="http://192.168.10.102:8083/">http://192.168.10.102:8083/</a></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101145720014.png" alt="image-20221101145720014"></p><p>浏览grafana展现服务，<a href="http://192.168.10.102:3000/">http://192.168.10.102:3000</a> 默认账号和密码都是admin</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101145817384.png" alt="image-20221101145817384"></p><h4 id="grafana配置步骤"><a href="#grafana配置步骤" class="headerlink" title="grafana配置步骤"></a>grafana配置步骤</h4><h5 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101150444080.png" alt="image-20221101150444080"></p><h5 id="选择influxdb数据源"><a href="#选择influxdb数据源" class="headerlink" title="选择influxdb数据源"></a>选择influxdb数据源</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101150616009.png" alt="image-20221101150616009"></p><h5 id="配置细节"><a href="#配置细节" class="headerlink" title="配置细节"></a>配置细节</h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101151651944.png" alt="image-20221101151651944"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101151804943.png" alt="image-20221101151804943"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101152102140.png" alt="image-20221101152102140"></p><h5 id="配置面板panel"><a href="#配置面板panel" class="headerlink" title="配置面板panel"></a>配置面板panel</h5><h6 id="1"><a href="#1" class="headerlink" title="1"></a>1</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101152303637.png" alt="image-20221101152303637"></p><h6 id="2"><a href="#2" class="headerlink" title="2"></a>2</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101152440427.png" alt="image-20221101152440427"></p><h6 id="3"><a href="#3" class="headerlink" title="3"></a>3</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101152721239.png" alt="image-20221101152721239"></p><h6 id="4"><a href="#4" class="headerlink" title="4"></a>4</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101152854210.png" alt="image-20221101152854210"></p><h6 id="5"><a href="#5" class="headerlink" title="5"></a>5</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101153302911.png" alt="image-20221101153302911"></p><h6 id="6"><a href="#6" class="headerlink" title="6"></a>6</h6><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221101153445134.png" alt="image-20221101153445134"></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数据结构与算法</title>
      <link href="/2023/03/03/shu-ju-jie-gou-yu-suan-fa/"/>
      <url>/2023/03/03/shu-ju-jie-gou-yu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法（java）"><a href="#数据结构与算法（java）" class="headerlink" title="数据结构与算法（java）"></a>数据结构与算法（java）</h1><p><strong>时间复杂度：程序执行完所需的时间</strong></p><p><strong>空间复杂度：程序程序所需要的内存</strong></p><h2 id="Comparable接口介绍"><a href="#Comparable接口介绍" class="headerlink" title="Comparable接口介绍"></a><strong>Comparable接口介绍</strong></h2><p>由于我们这里要讲排序，所以肯定会在元素之间进行比较，而Java提供了一个接口Comparable就是用来定义排序规则的，在这里我们以案例的形式对Comparable接口做一个简单的回顾。</p><p><strong>需求：</strong></p><p> 1.定义一个学生类Student，具有年龄age和姓名username两个属性，并通过Comparable接口提供比较规则；</p><p> 2.定义测试类Test，在测试类Test中定义测试方法Comparable getMax(Comparable c1,Comparable c2)完成测试</p><p>student类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Student implements Comparable&lt;Student&gt;{    private String username;    private int age;    public Student() {    }    public Student(String username, int age) {        this.username = username;        this.age = age;    }    public String getUsername() {        return username;    }    public void setUsername(String username) {        this.username = username;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    @Override    public String toString() {        return "Student{" +                "username='" + username + '\'' +                ", age=" + age +                '}';    }    @Override    public int compareTo(Student o) {        //比较年龄        return this.getAge() - o.getAge();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestComparable {    public static void main(String[] args) {        Student student1 = new Student("张三",18);        Student student2 = new Student("李四",20);        Comparable max = getMax(student1, student2);        System.out.println(max);    }    public static Comparable getMax(Comparable c1,Comparable c2){        int result = c1.compareTo(c2);        //如果result &lt; 0,则c1b比c2小 :如果result &gt; 0 :则c1比c2大; 如果result == 0,则c工和c2一样大﹔        if (result &gt;= 0){            return c1;        }else {            return c2;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><table><thead><tr><th>简单的排序</th><th>高级的排序</th></tr></thead><tbody><tr><td><strong>冒泡排序</strong></td><td><strong>希尔排序</strong></td></tr><tr><td><strong>选择排序</strong></td><td><strong>归并排序</strong></td></tr><tr><td><strong>插入排序</strong></td><td><strong>快速排序</strong></td></tr></tbody></table><h3 id="简单的排序"><a href="#简单的排序" class="headerlink" title="简单的排序"></a>简单的排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</p><p><strong>需求：</strong></p><p>排序前：{4,5,6,3,2,1}</p><p>排序后：{1,2,3,4,5,6}</p><h5 id="排序原理："><a href="#排序原理：" class="headerlink" title="排序原理："></a><strong>排序原理：</strong></h5><ol><li><p>比较相邻的元素。如果前一个元素比后一个元素大，就交换这两个元素的位置。</p></li><li><p>对每一对相邻元素做同样的工作，从开始第一对元素到结尾的最后一对元素。最终最后位置的元素就是最大值。</p></li></ol><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925224914653.png" alt="image-20220925224914653"></p><h5 id="冒泡排序API设计："><a href="#冒泡排序API设计：" class="headerlink" title="冒泡排序API设计："></a><strong>冒泡排序API设计：</strong></h5><table><thead><tr><th><strong>类名</strong></th><th><strong>Bubble</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Bubble()：创建Bubble对象</td></tr><tr><td>成员方法</td><td>1、public static void sort(Comparable[] a)：对数组内的元素进行排序 ；                                                                                                                                        2、private static boolean greater(Comparable v,Comparable w)：判断v是否大于w；                                                                                                                   3、private static void exch(Comparable[] a,int i,int j)：交换a数组中，索引i和索引j处的值</td></tr></tbody></table><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Bubble {    //对数组a中的元素进行排序、    public static void sort(Comparable[] a){        for (int i = a.length - 1; i &gt; 0; i--) {            for (int j = 0; j &lt; i ; j++) {                //比较索引j和索引j+1的值                if (greater(a[j],a[j+1])){                    exch(a,j,j+1);                }            }        }    }    //比较v元素是否大于w元素    private static boolean greater(Comparable v,Comparable w){        return v.compareTo(w) &gt; 0;    }    //数组元素i和j交换位置    private static void exch(Comparable[] a, int i, int j){        Comparable temp;        temp = a[i];        a[i] = a[j];        a[j] = temp;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class BubbleTest {    public static void main(String[] args) {        Integer[] arr = {4,5,6,3,2,1};        Bubble.sort(arr);        System.out.println(Arrays.toString(arr));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925225201495.png" alt="image-20220925225201495"></p><h5 id="冒泡排序的时间复杂度分析"><a href="#冒泡排序的时间复杂度分析" class="headerlink" title="冒泡排序的时间复杂度分析"></a><strong>冒泡排序的时间复杂度分析</strong></h5><p>冒泡排序使用了双层for循环，其中内层循环的循环体是真正完成排序的代码，所以，我们分析冒泡排序的时间复杂度，主要分析一下内层循环体的执行次数即可。</p><p>在最坏情况下，也就是假如要排序的元素为{6,5,4,3,2,1}逆序，那么，</p><p>元素比较的次数为：</p><p> (N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>元素交换的次数为：</p><p> (N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>总执行次数为：</p><p> (N^2 /2 - N/2) + (N^2 /2 - N/2)=N^2-N;</p><p><strong>最终冒泡排序的时间复杂度为O(N^2).</strong></p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a><strong>选择排序</strong></h4><p>选择排序是一种更加简单直观的排序方法。</p><p><strong>需求：</strong></p><p>排序前：{4,6,8,7,9,2,10,1}</p><p>排序后：{1,2,4,5,7,8,9,10}</p><h5 id="排序原理：-1"><a href="#排序原理：-1" class="headerlink" title="排序原理："></a><strong>排序原理：</strong></h5><p> 1、每一次遍历的过程中，都假定第一个索引处的元素是最小值，和其他索引处的值依次进行比较，如果当前索引处的值大于其他某个索引处的值，则假定其他某个索引出的值为最小值，最后可以找到最小值所在的索引</p><p> 2、交换第一个索引处和最小值所在的索引处的值</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925231303800.png" alt="image-20220925231303800"></p><h5 id="选择排序API设计："><a href="#选择排序API设计：" class="headerlink" title="选择排序API设计："></a>选择排序API设计：</h5><table><thead><tr><th><strong>类名</strong></th><th><strong>Selection</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Selection()：创建Selection对象</td></tr><tr><td>成员方法</td><td>1、public static void sort(Comparable[] a)：对数组内的元素进行排序 ；                                                                                                                                    2、private static boolean greater(Comparable v,Comparable w):判断v是否大于w；                                                                                                                 3、private static void exch(Comparable[] a,int i,int j)：交换a数组中，索引i和索引j处的值</td></tr></tbody></table><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><p>Selection类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Selection {    //对数组a中的元素进行排序、    public static void sort(Comparable[] a){        for (int i = 0; i &lt;= a.length - 2; i++) {            //定义一个变量,记录最小元素所在的索引﹔默认为参与选择排序的第一个元素所在的位置            int minIndex = i;            for (int j = i+1; j &lt; a.length; j++) {                //需要比较最小索引minIndex处的值与索引j处的值;                if (greater(a[minIndex],a[j])){                    minIndex = j;                }            }            //交换最小元素所在索引minIndex处的值和索引i处的值            exch(a,i,minIndex);        }    }    //比较v元素是否大于w元素    private static boolean greater(Comparable v,Comparable w){        return v.compareTo(w) &gt; 0;    }    //数组元素i和j交换位置    private static void exch(Comparable[] a, int i, int j){        Comparable temp;        temp = a[i];        a[i] = a[j];        a[j] = temp;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SelectionTest {    public static void main(String[] args) {        Integer[] arr = {4,6,8,7,9,2,10,1};        Selection.sort(arr);        System.out.println(Arrays.toString(arr));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925232348346.png" alt="image-20220925232348346"></p><h5 id="选择排序的时间复杂度分析："><a href="#选择排序的时间复杂度分析：" class="headerlink" title="选择排序的时间复杂度分析："></a><strong>选择排序的时间复杂度分析：</strong></h5><p>选择排序使用了双层for循环，其中外层循环完成了数据交换，内层循环完成了数据比较，所以我们分别统计数据交换次数和数据比较次数：</p><p>数据比较次数：</p><p> (N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>数据交换次数：N-1</p><p>时间复杂度：N^2 / 2-N/2+（N-1）=N^2/2+N/2-1;</p><p><strong>故时间复杂度为O(N^2);</strong></p><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序（Insertion sort）是一种简单直观且稳定的排序算法。</p><p>插入排序的工作方式非常像人们排序一手扑克牌一样。开始时，我们的左手为空并且桌子上的牌面朝下。然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较，如下图所示：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925232807530.png" alt="image-20220925232807530"></p><p><strong>需求：</strong></p><p>排序前：{4,3,2,10,12,1,5,6}</p><p>排序后：{1,2,3,4,5,6,10,12}</p><h5 id="排序原理：-2"><a href="#排序原理：-2" class="headerlink" title="排序原理："></a><strong>排序原理：</strong></h5><p>1.把所有的元素分为两组，已经排序的和未排序的；</p><p>2.找到未排序的组中的第一个元素，向已经排序的组中进行插入；</p><p>3.倒叙遍历已经排序的元素，依次和待插入的元素进行比较，直到找到一个元素小于等于待插入元素，那么就把待插入元素放到这个位置，其他的元素向后移动一位；</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925233545547.png" alt="image-20220925233545547"></p><h5 id="插入排序API设计："><a href="#插入排序API设计：" class="headerlink" title="插入排序API设计："></a>插入排序API设计：</h5><table><thead><tr><th><strong>类名</strong></th><th><strong>Insertion</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Insertion()：创建Insertion对象</td></tr><tr><td>成员方法</td><td>1、public static void sort(Comparable[] a)：对数组内的元素进行排序                                                                                                                                        2、private static boolean greater(Comparable v,Comparable w):判断v是否大于w                                                                                                                       3、private static void exch(Comparable[] a,int i,int j)：交换a数组中，索引i和索引j处的值</td></tr></tbody></table><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><p><strong>Insertion</strong>类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Insertion {    //对数组a中的元素进行排序、    public static void sort(Comparable[] a){        for (int i = 1; i &lt; a.length; i++) {            for (int j = i; j &gt; 0; j--) {                //比较索引lj处的值和索引j-1处的值,如果索引j-1处的值比索引j处的值大,则交换数据;如果不大,那么就找到合适的位置了退出循环即可;                if (greater(a[j-1],a[j])){                   exch(a,j-1,j);               }else {                   break;               }            }        }    }    //比较v元素是否大于w元素    private static boolean greater(Comparable v,Comparable w){        return v.compareTo(w) &gt; 0;    }    //数组元素i和j交换位置    private static void exch(Comparable[] a, int i, int j){        Comparable temp;        temp = a[i];        a[i] = a[j];        a[j] = temp;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class InsertionTest {    public static void main(String[] args) {        Integer[] arr = {4,3,2,10,12,1,5,6};        Insertion.sort(arr);        System.out.println(Arrays.toString(arr));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220925234453773.png" alt="image-20220925234453773"></p><h5 id="插入排序的时间复杂度分析"><a href="#插入排序的时间复杂度分析" class="headerlink" title="插入排序的时间复杂度分析"></a><strong>插入排序的时间复杂度分析</strong></h5><p>插入排序使用了双层for循环，其中内层循环的循环体是真正完成排序的代码，所以，我们分析插入排序的时间复杂度，主要分析一下内层循环体的执行次数即可。</p><p>最坏情况，也就是待排序的数组元素为{12,10,6,5,4,3,2,1}，那么：</p><p>比较的次数为：</p><p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>交换的次数为：</p><p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>总执行次数为：</p><p>(N^2 / 2-N/2)+(N^2 / 2-N/2)=N^2-N;</p><p><strong>最终插入排序的时间复杂度为O(N^2).</strong></p><h3 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h3><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a><strong>希尔排序</strong></h4><p>希尔排序是插入排序的一种，又称“缩小增量排序”，是插入排序算法的一种更高效的改进版本。</p><p>前面学习插入排序的时候，我们会发现一个很不友好的事儿，如果已排序的分组元素为{2,5,7,9,10}，未排序的分组元素为{1,8}，那么下一个待插入元素为1，我们需要拿着1从后往前，依次和10,9,7,5,2进行交换位置，才能完成真正的插入，每次交换只能和相邻的元素交换位置。那如果我们要提高效率，直观的想法就是一次交换，能把1放到更前面的位置，比如一次交换就能把1插到2和5之间，这样一次交换1就向前走了5个位置，可以减少交换的次数，这样的需求如何实现呢？接下来我们来看看希尔排序的原理。</p><p><strong>需求：</strong></p><p>排序前：{9,1,2,5,7,4,8,6,3,5}</p><p>排序后：{1,2,3,4,5,5,6,7,8,9}</p><h5 id="排序原理：-3"><a href="#排序原理：-3" class="headerlink" title="排序原理："></a><strong>排序原理：</strong></h5><p> 1、选定一个增长量h，按照增长量h作为数据分组的依据，对数据进行分组；</p><p> 2、对分好组的每一组数据完成插入排序；</p><p> 3、减小增长量，最小减为1，重复第二步操作。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220926152257632.png" alt="image-20220926152257632"></p><p><strong>增长量h的确定：增长量h的值每一固定的规则，我们这里采用以下规则：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">int h=1 ;int[] arr = {9,1,2,5,7,4,8,6,3,5};lenght = arr.length / 2;while(h &lt; lenght){     h=2h+1；//3,7 }//循环结束后我们就可以确定h的最大值； //h的减小规则为： h=h/2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="希尔排序的API设计："><a href="#希尔排序的API设计：" class="headerlink" title="希尔排序的API设计："></a>希尔排序的API设计：</h5><table><thead><tr><th><strong>类名</strong></th><th><strong>Shell</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Shell()：创建Shell对象</td></tr><tr><td>成员方法</td><td>1、public static void sort(Comparable[] a)：对数组内的元素进行排序                                                                                                                                       2、private static boolean greater(Comparable v,Comparable w):判断v是否大于w                                                                                                                                                 3、private static void exch(Comparable[] a,int i,int j)：交换a数组中，索引i和索引j处的值</td></tr></tbody></table><h5 id="希尔排序的代码实现："><a href="#希尔排序的代码实现：" class="headerlink" title="希尔排序的代码实现："></a><strong>希尔排序的代码实现：</strong></h5><p>Shell类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Shell {    //对数组a中的元素进行排序、    public static void sort(Comparable[] a){        //根据数组a的长度来确定增长量h的初始值        int h = 1;        while (h &lt; a.length/2){            h = 2*h + 1;        }        //希尔排序        //1、找到待插入的元素        for (int i = h; i &lt; a.length; i++) {            //2、将待插入的元素插到有序序列中            for (int j = i; j &gt;= h ; j-= h) {                //将待插入的元素a[j]与a[j-h]比较，如果a[j-h] &gt; a[j]                if (greater(a[j-h],a[j])){                    //交换元素                    exch(a,j-h,j);                }else {                    //待插入元素已经找到合适的位置了，结束循环                    break;                }            }        }    }    //比较v元素是否大于w元素    private static boolean greater(Comparable v,Comparable w){        return v.compareTo(w) &gt; 0;    }    //数组元素i和j交换位置    private static void exch(Comparable[] a, int i, int j){        Comparable temp;        temp = a[i];        a[i] = a[j];        a[j] = temp;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ShellTest {    public static void main(String[] args) {        Integer[] arr = {9,1,2,5,7,4,8,6,3,5};        Insertion.sort(arr);        System.out.println(Arrays.toString(arr));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="希尔排序的时间复杂度分析"><a href="#希尔排序的时间复杂度分析" class="headerlink" title="希尔排序的时间复杂度分析"></a><strong>希尔排序的时间复杂度分析</strong></h5><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a><strong>递归</strong></h4><p><strong>定义：</strong></p><p>定义方法时，在方法内部调用方法本身，称之为递归.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void show(){     System.out.println("aaaa");     show(); } <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>作用：</strong></p><p>它通常把一个大型复杂的问题，层层转换为一个与原问题相似的，规模较小的问题来求解。递归策略只需要少量的程序就可以描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。</p><p><strong>注意事项：</strong></p><p>在递归中，不能无限制的调用自己，必须要有边界条件，能够让递归结束，因为每一次递归调用都会在栈内存开辟新的空间，重新执行方法，如果递归的层级太深，很容易造成栈内存溢出。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220926155613251.png" alt="image-20220926155613251"></p><p><strong>需求：</strong></p><p>请定义一个方法，使用递归完成求N的阶乘；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">分析： 1!: 1 2!: 2*1=2*1! 3!: 3*2*1=3*2! 4!: 4*3*2*1=4*3! ... n!: n*(n-1)*(n-2)...*2*1=n*(n-1)! 所以，假设有一个方法factorial(n)用来求n的阶乘，那么n的阶乘还可以表示为n*factorial(n-1) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestFactorial {    public static void main(String[] args) {        //求n的阶乘        long factorial = factorial(10000);        System.out.println(factorial);    }    //求n的阶乘    public static long factorial(int n){        if (n == 1){            return 1;        }         return n*factorial(n-1);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><p><strong>需求：</strong></p><p>排序前：{8,4,5,7,1,3,6,2}</p><p>排序后：{1,2,3,4,5,6,7,8}</p><h5 id="排序原理：-4"><a href="#排序原理：-4" class="headerlink" title="排序原理："></a><strong>排序原理：</strong></h5><p> 1、尽可能的一组数据拆分成两个元素相等的子组，并对每一个子组继续拆分，直到拆分后的每个子组的元素个数是1为止。</p><p> 2、将相邻的两个子组进行合并成一个有序的大组；</p><p> 3、不断的重复步骤2，直到最终只有一个组为止。</p><h5 id="归并排序API设计"><a href="#归并排序API设计" class="headerlink" title="归并排序API设计"></a>归并排序API设计</h5><table><thead><tr><th><strong>类名</strong></th><th><strong>Merge</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Merge()：创建Merge对象</td></tr><tr><td>成员方法</td><td>1、public static void sort(Comparable[] a)：对数组内的元素进行排序                                                                                                                                  2、private static void sort(Comparable[] a, int lo, int hi)：对数组a中从索引lo到索引hi之间的元素进                                                                                   3、private static void merge(Comparable[] a, int lo, int mid, int hi):从索引lo到所以mid为一个子                                                                                                4、private static boolean less(Comparable v,Comparable w):判断v是否小于w                                                                                                                                 5、private static void exch(Comparable[] a,int i,int j)：交换a数组中，索引i和索引j处的值</td></tr><tr><td>成员变量</td><td>1、private static Comparable[] assist：完成归并操作需要的辅助数组</td></tr></tbody></table><h5 id="归并原理："><a href="#归并原理：" class="headerlink" title="归并原理："></a><strong>归并原理：</strong></h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220927125922511.png" alt="image-20220927125922511"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220927130400266.png" alt="image-20220927130400266"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220927130556729.png" alt="image-20220927130556729"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220927130705514.png" alt="image-20220927130705514"></p><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><p>Merge类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Merge {    private static Comparable[] assist; //完成归并操作需要的辅助数组    //判断元素v是否比元素w小    private static boolean less(Comparable v, Comparable w){        return v.compareTo(w) &lt; 0;    }    //对数组进行排序    public static void sort(Comparable[] a){        //1。列始化辅组数组assist ;        assist = new Comparable[a.length];        //2.定义一个low变量﹔和height变量﹐分别记录数组中最小的索引和最大的索引﹔        int low = 0;        int height = a.length - 1;        //3.调用sort重载方法完成数组α中,从索引low到索引height的元素的排序        sort(a,low,height);    }    //对数组中从low到height的元素进行排序    public static void sort(Comparable[] a,int low, int height){       //安全性校验        if (height &lt;= low){            return;        }        //对low到height的数据进行分组（分为两组）        int mid = low + (height-low)/2;        //分别对每一组数据进行排序        sort(a,low,mid);        sort(a,mid+1,height);        //再把两组中的数据进行归并        merge(a,low,mid,height);    }    //对数组中，从low到mid为一组，从mid到height为一组，对两组数据进行归并    private static void merge(Comparable[] a, int low, int mid, int height) {        //定义三个指针        int i = low; //指向assist数组中开始填充数据的索引        int p1 = low; //指向第一组数据的第一个元素        int p2 = mid+1; //指向第二组数据的第一个元素        //遍历，移动p1指针和p2指针，比较对应索引处的值，找出小的那个，放到辅助数组的对应索引处        while (p1 &lt;= mid &amp;&amp; p2 &lt;= height){            //比较对应索引处的值            if (less(a[p1],a[p2])){                assist[i++] = a[p1++];            }else {                assist[i++] = a[p2++];            }        }        //遍历，如果p1的指针没有走完，那么顺序移动p1指针，把对应的元素放到辅助数组的对应索引处        while (p1 &lt;= mid){            assist[i++] = a[p1++];        }        //遍历，如果p2的指针没有走完，那么顺序移动p2指针，把对应的元素放到辅助数组的对应索引处        while (p2 &lt;= height){            assist[i++] = a[p2++];        }        //把辅助数组中的元素拷贝到原数组中        for (int index = low; index &lt;= height; index++) {            a[index] = assist[index];        }    }    //数组元素i和j交换位置    private static void exch(Comparable[] a, int i, int j){        Comparable temp;        temp = a[i];        a[i] = a[j];        a[j] = temp;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MergeTest {    public static void main(String[] args) {        Integer[] arr = {8,4,5,7,1,3,6,2};        Merge.sort(arr);        System.out.println(Arrays.toString(arr));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="归并排序时间复杂度分析："><a href="#归并排序时间复杂度分析：" class="headerlink" title="归并排序时间复杂度分析："></a><strong>归并排序时间复杂度分析：</strong></h5><p>归并排序是分治思想的最典型的例子，上面的算法中，对a[lo…hi]进行排序，先将它分为a[lo…mid]和a[mid+1…hi]两部分，分别通过递归调用将他们单独排序，最后将有序的子数组归并为最终的排序结果。该递归的出口在于如果一个数组不能再被分为两个子数组，那么就会执行merge进行归并，在归并的时候判断元素的大小进行排序。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220927125148867.png" alt="image-20220927125148867"></p><p>用树状图来描述归并，如果一个数组有8个元素，那么它将每次除以2找最小的子数组，共拆log8次，值为3，所以树共有3层,那么自顶向下第k层有2^k个子数组，每个数组的长度为2^(3-k)，归并最多需要2^(3-k)次比较。因此每层的比较次数为 2^k * 2^(3-k)=2^3,那么3层总共为 3*2^3。</p><p>假设元素的个数为n，那么使用归并排序拆分的次数为log2(n),所以共log2(n)层，那么使用log2(n)替换上面3<em>2^3中 的3这个层数，最终得出的归并排序的时间复杂度为：log2(n)</em> 2^(log2(n))=log2(n)<em>n,根据大O推导法则，忽略底数，*<em>最终归并排序的时间复杂度为O(nlogn);</em></em></p><p><strong>归并排序的缺点：</strong></p><p>需要申请额外的数组空间，导致空间复杂度提升，是典型的以空间换时间的操作。</p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p><strong>需求：</strong></p><p>排序前:{6, 1, 2, 7, 9, 3, 4, 5, 8}</p><p>排序后:{1, 2, 3, 4, 5, 6, 7, 8, 9}</p><h5 id="排序原理：-5"><a href="#排序原理：-5" class="headerlink" title="排序原理："></a><strong>排序原理：</strong></h5><p>1、首先设定一个分界值，通过该分界值将数组分成左右两部分；</p><p>2、将大于或等于分界值的数据放到到数组右边，小于分界值的数据放到数组的左边。此时左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值；</p><p>3、然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</p><p>4、重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左侧和右侧两个部分的数据排完序后，整个数组的排序也就完成了。</p><h5 id="快速排序API设计"><a href="#快速排序API设计" class="headerlink" title="快速排序API设计"></a>快速排序API设计</h5><table><thead><tr><th><strong>类名</strong></th><th><strong><strong>Quick</strong></strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Quick()：创建Quick对象</td></tr><tr><td>成员方法</td><td>1、public static void sort(Comparable[] a)：对数组内的元素进行排序                                                                                                                                    2、private static void sort(Comparable[] a, int lo, int hi)：对数组a中从索引lo到索引hi之间的元素                                                                                            3、public static int partition(Comparable[] a,int lo,int hi):对数组a中，从索引 lo到索引 hi之间的元                                                                                                                                       4、private static boolean less(Comparable v,Comparable w):判断v是否小于w                                                                                                                        5、private static void exch(Comparable[] a,int i,int j)：交换a数组中，索引i和索引j处的值</td></tr></tbody></table><h5 id="切分原理："><a href="#切分原理：" class="headerlink" title="切分原理："></a><strong>切分原理：</strong></h5><p>把一个数组切分成两个子数组的基本思想：</p><p>1、找一个基准值，用两个指针分别指向数组的头部和尾部；</p><p>2、先从尾部向头部开始搜索一个比基准值小的元素，搜索到即停止，并记录指针的位置；</p><p>3、再从头部向尾部开始搜索一个比基准值大的元素，搜索到即停止，并记录指针的位置；</p><p>4、交换当前左边指针位置和右边指针位置的元素；</p><p>5、重复2,3,4步骤，直到左边指针的值大于右边指针的值停止。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220928230703110.png" alt="image-20220928230703110"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220928230817050.png" alt="image-20220928230817050"></p><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><p>Quick类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Quick {    //对数组内的元素进行排序    public static void sort(Comparable[] a){        int lo = 0;        int hi = a.length - 1;        sort(a,lo,hi);    }    //对数组a中从索引lo到索引hi之间的元素    private static void sort(Comparable[] a, int lo, int hi){        //安全性校验        if(hi &lt;= lo){            return;        }        //需要对数组中lo索引到hi索引处的元素进行分组（左子组和右子组）        int partition = partition(a, lo, hi);//返回的是分组的分界值所在的索引，分界值位置变换后的索引        //让左子组有序        sort(a,lo,partition-1);        //让右子组有序        sort(a,partition+1,hi);    }    //对数组a中，从索引 lo到索引 hi之间的元    public static int partition(Comparable[] a,int lo,int hi){        //确定分界值        Comparable key = a[lo];        //定义两个指针，分别指向待切分元素的最小元素索引处的最大索引处的下一个位置        int left = lo; //定义一个左侧指针，初始指向最左边的元素        int right = hi + 1;  //定义一个右侧指针，初始指向左右侧的元素下一个位置        //切分        while (true){            //先从右往左扫描，移动指针right，找到一个比分界值小的元素，停止            while (less(key,a[--right])){                if (right == lo){                    break;                }            }            //先从左往右扫描，移动指针left，找到一个比分界值大的元素，停止            while (less(a[++left],key)){                if (left == hi){                    break;                }            }            //判断left &gt;= right，如果是，则证明扫描完毕。结束循环，如果不是，则交换元素            if (left &gt;= right){                break;            }else {                exch(a,left,right);            }        }        //交换分界值        exch(a,lo,right);        return right;    }    //判断v是否小于w    private static boolean less(Comparable v,Comparable w){        return v.compareTo(w) &lt; 0;    }    //交换a数组中，索引i和索引j处的值    private static void exch(Comparable[] a,int i,int j){        Comparable temp;        temp = a[i];        a[i] = a[j];        a[j] = temp;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class QuickTest {    public static void main(String[] args) {        Integer[] arr = {6, 1, 2, 7, 9, 3, 4, 5, 8};        Quick.sort(arr);        System.out.println(Arrays.toString(arr));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="快速排序和归并排序的区别："><a href="#快速排序和归并排序的区别：" class="headerlink" title="快速排序和归并排序的区别："></a><strong>快速排序和归并排序的区别：</strong></h5><p>快速排序是另外一种分治的排序算法，它将一个数组分成两个子数组，将两部分独立的排序。快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并从而将整个数组排序，而快速排序的方式则是当两个数组都有序时，整个数组自然就有序了。在归并排序中，一个数组被等分为两半，归并调用发生在处理整个数组之前，在快速排序中，切分数组的位置取决于数组的内容，递归调用发生在处理整个数组之后。</p><h5 id="快速排序时间复杂度分析："><a href="#快速排序时间复杂度分析：" class="headerlink" title="快速排序时间复杂度分析："></a><strong>快速排序时间复杂度分析：</strong></h5><p>快速排序的一次切分从两头开始交替搜索，直到left和right重合，因此，一次切分算法的时间复杂度为O(n),但整个快速排序的时间复杂度和切分的次数相关。</p><p><strong>最优情况：</strong>每一次切分选择的基准数字刚好将当前序列等分。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220928220824834.png" alt="image-20220928220824834"></p><p> 如果我们把数组的切分看做是一个树，那么上图就是它的最优情况的图示，共切分了logn次，所以，==<strong>最优情况下快速排序的时间复杂度为O(nlogn);</strong>==</p><p><strong>最坏情况：</strong>每一次切分选择的基准数字是当前序列中最大数或者最小数，这使得每次切分都会有一个子组，那么总共就得切分n次，所以，最坏情况下，快速排序的==<strong>时间复杂度为O(n^2);</strong>==</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220928221247408.png" alt="image-20220928221247408"></p><p><strong>平均情况：</strong>每一次切分选择的基准数字不是最大值和最小值，也不是中值，这种情况我们也可以用数学归纳法证明，快速排序的==<strong>时间复杂度为O(nlogn)</strong>==,由于数学归纳法有很多数学相关的知识，容易使我们混乱，所以这里就不对平均情况的时间复杂度做证明了。</p><h2 id="排序的稳定性"><a href="#排序的稳定性" class="headerlink" title="排序的稳定性"></a><strong>排序的稳定性</strong></h2><p><strong>稳定性的定义：</strong></p><p>数组arr中有若干元素，其中A元素和B元素相等，并且A元素在B元素前面，如果使用某种排序算法排序后，能够保证A元素依然在B元素的前面，可以说这个该算法是稳定的。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220928231010283.png" alt="image-20220928231010283"></p><p><strong>稳定性的意义：</strong></p><p>如果一组数据只需要一次排序，则稳定性一般是没有意义的，如果一组数据需要多次排序，稳定性是有意义的。例如要排序的内容是一组商品对象，第一次排序按照价格由低到高排序，第二次排序按照销量由高到低排序，如果第二次排序使用稳定性算法，就可以使得相同销量的对象依旧保持着价格高低的顺序展现，只有销量不同的对象才需要重新排序。这样既可以保持第一次排序的原有意义，而且可以减少系统开销。</p><table><thead><tr><th>排序算法</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td>稳定</td></tr><tr><td>选择排序</td><td>不稳定</td></tr><tr><td>插入排序</td><td>稳定</td></tr><tr><td>希尔排序</td><td>不稳定</td></tr><tr><td>归并排序</td><td>稳定</td></tr><tr><td>快速排序</td><td>不稳定</td></tr></tbody></table><h4 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h4><p>只有当arr[i]&gt;arr[i+1]的时候，才会交换元素的位置，而相等的时候并不交换位置，所以冒泡排序是一种==<strong>稳定排序算法</strong>==。</p><h4 id="选择排序-1"><a href="#选择排序-1" class="headerlink" title="选择排序:"></a>选择排序:</h4><p>选择排序是给每个位置选择当前元素最小的,例如有数据{5(1)，8 ，5(2)， 2， 9 },第一遍选择到的最小元素为2，所以5(1)会和2进行交换位置，此时5(1)到了5(2)后面，破坏了稳定性，所以选择排序是一种==<strong>不稳定的排序算法</strong>==。</p><h4 id="插入排序："><a href="#插入排序：" class="headerlink" title="插入排序："></a>插入排序：</h4><p>比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么把要插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以==<strong>插入排序是稳定</strong>的==。</p><h4 id="希尔排序："><a href="#希尔排序：" class="headerlink" title="希尔排序："></a>希尔排序：</h4><p>希尔排序是按照不同步长对元素进行插入排序 ,虽然一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以希尔==<strong>排序是不稳定的</strong>==。</p><h4 id="归并排序："><a href="#归并排序：" class="headerlink" title="归并排序："></a>归并排序：</h4><p>归并排序在归并的过程中，只有arr[i]&lt;arr[i+1]的时候才会交换位置，如果两个元素相等则不会交换位置，所以它并不会破坏稳定性，==<strong>归并排序是稳定的</strong>==。</p><h4 id="快速排序："><a href="#快速排序：" class="headerlink" title="快速排序："></a>快速排序：</h4><p>快速排序需要一个基准值，在基准值的右侧找一个比基准值小的元素，在基准值的左侧找一个比基准值大的元素，然后交换这两个元素，此时会破坏稳定性，所以==<strong>快速排序是一种不稳定的算法</strong>==。</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表是最基本、最简单、也是最常用的一种数据结构。一个==<strong>线性表是n个具有相同特性的数据元素的有限序列</strong>==。</p><p><strong>前驱元素：</strong></p><p>​若A元素在B元素的前面，则称A为B的前驱元素</p><p><strong>后继元素：</strong></p><p>​若B元素在A元素的后面，则称B为A的后继元素</p><p><strong>线性表的特征：</strong>数据元素之间具有一种“一对一”的逻辑关系。</p><ul><li>第一个数据元素没有前驱，这个数据元素被称为头结点；</li><li>最后一个数据元素没有后继，这个数据元素被称为尾结点；</li><li>除了第一个和最后一个数据元素外，其他数据元素有且仅有一个前驱和一个后继。</li></ul><p>如果把线性表用数学语言来定义，则可以表示为(a1,…ai-1,ai,ai+1,…an)，ai-1领先于ai,ai领先于ai+1，称ai-1是ai的前驱元素，ai+1是ai的后继元素</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220928233629886.png" alt="image-20220928233629886"></p><p><strong>线性表的分类：</strong></p><p>线性表中数据<strong>存储的方式</strong>可以是==<strong>顺序存储</strong>==，也可以是==<strong>链式存储</strong>==，按照数据的存储方式不同，可以把<strong>线性表</strong>分为==<strong>顺序表</strong>和<strong>链表</strong>==。</p><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p><strong>定义：</strong>顺序表是在计算机内存中以==<strong>数组的形式保存</strong>==的线性表，线性表的顺序存储是指用一组地址连续的存储单元，依次存储线性表中的各个元素、使得线性表中再逻辑结构上响铃的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220928234101456.png" alt="image-20220928234101456"></p><h4 id="顺序表的实现"><a href="#顺序表的实现" class="headerlink" title="顺序表的实现"></a><strong>顺序表的实现</strong></h4><h5 id="顺序表API设计："><a href="#顺序表API设计：" class="headerlink" title="顺序表API设计："></a>顺序表API设计：</h5><table><thead><tr><th><strong>类名</strong></th><th><strong>SequenceList</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>SequenceList(int capacity)：创建容量为capacity的SequenceList对象</td></tr><tr><td>成员方法</td><td>1、public void clear()：空置线性表                                                                                                                                                                                                           2、public boolean isEmpty()：判断线性表是否为空，是返回true，否返回                                                                                                                                    3、public int length():获取线性表中元素的个数                                                                                                                                                                                        4、public T get(int i):读取并返回线性表中的第i个元素的值                                                                                                                                                                5、public void insert(int i,T t)：在线性表的第i个元素之前插入一个值为t的数据元素。                                                                                                                     6、public void insert(T t):向线性表中添加一个元素t                                                                                                                                                                              7、public T remove(int i):删除并返回线性表中第i个数据元素。                                                                                                                                                               8、public int indexOf(T t):返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1。</td></tr><tr><td>成员变量</td><td>1、private T[] eles：存储元素的数组                                                                                                                                                                                                            2、private int N:当前线性表的长度</td></tr></tbody></table><h5 id="顺序表的代码实现："><a href="#顺序表的代码实现：" class="headerlink" title="顺序表的代码实现："></a><strong>顺序表的代码实现：</strong></h5><p><strong>SequenceList类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SequenceList &lt;T&gt;{    private T[] eles; //存储元素的数组    private int N;  //当前线性表的长度    public SequenceList(int capacity) {        this.eles = (T[])new Object[capacity]; //初始化数组        this.N = 0;  //初始化数组长度    }    //将线性表置空    public void clear(){        this.N = 0;    }    //判断线性表是否为空，是返回true，否返回    public boolean isEmpty(){        return N == 0;    }    //获取线性表中元素的个数    public int length(){        return N;    }    //读取并返回线性表中的第i个元素的值    public T get(int i){        return eles[i];    }    //在线性表的第i个元素之前插入一个值为t的数据元素。    public void insert(int i,T t){        //先把i索引及其后面的元素依次向后移动一位        for (int index = N - 1; index &gt; i ; index--) {            eles[index] = eles[index-1];        }        //再把t元素放到i索引处即可        eles[i] = t;    }    //向线性表中添加一个元素t    public void insert(T t){        eles[N++] = t;    }    //删除并返回线性表中第i个数据元素。    public T remove(int i){        //记录索引i处的值        T current = eles[i];        //索引i后面的元素向前移一位即可        for (int index = i; index &lt; N - 1; index++) {            eles[index] = eles[index+1];        }        //删除元素后数组长度减1        N--;        return current;    }    //返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1。    public int indexOf(T t){        for (int i = 0; i &lt; N; i++) {            if (eles[i].equals(t)){                return i;            }        }        return -1;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SequenceListTest {    public static void main(String[] args) {        //创建顺序表对象        SequenceList&lt;String&gt; list = new SequenceList&lt;&gt;(10);        //测试插入        list.insert("科比");        list.insert("詹姆斯");        list.insert("乔丹");        list.insert("库里");        //测试获取        String s = list.get(2);        System.out.println("获取索引为2处的值："+ s);        //测试删除        String remove = list.remove(3);        System.out.println("删除索引为3处的值："+ remove);        //测试清空        list.clear();        System.out.println("清空线性表后线性表的元素个数有多少个"+ list.length());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="顺序表的遍历"><a href="#顺序表的遍历" class="headerlink" title="顺序表的遍历"></a><strong>顺序表的遍历</strong></h4><p>一般作为容器存储数据，都需要向外部提供遍历的方式，因此我们需要给顺序表提供遍历方式。</p><p>在java中，遍历集合的方式一般都是用的是foreach循环，如果想让我们的SequenceList也能支持foreach循环，则</p><p><strong>需要做如下操作：</strong></p><p> 1、让SequenceList实现Iterable接口，重写iterator方法；</p><p> 2、在SequenceList内部提供一个内部类SIterator,实现Iterator接口，重写hasNext方法和next方法；</p><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><p><strong>SequenceList类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SequenceList &lt;T&gt; implements Iterable&lt;T&gt;{    private T[] eles; //存储元素的数组    private int N;  //当前线性表的长度    public SequenceList(int capacity) {        this.eles = (T[])new Object[capacity]; //初始化数组        this.N = 0;  //初始化数组长度    }    //将线性表置空    public void clear(){        this.N = 0;    }    //判断线性表是否为空，是返回true，否返回    public boolean isEmpty(){        return N == 0;    }    //获取线性表中元素的个数    public int length(){        return N;    }    //读取并返回线性表中的第i个元素的值    public T get(int i){        return eles[i];    }    //在线性表的第i个元素之前插入一个值为t的数据元素。    public void insert(int i,T t){        //先把i索引及其后面的元素依次向后移动一位        for (int index = N; index &gt; i ; index--) {            eles[index] = eles[index-1];        }        //再把t元素放到i索引处即可        eles[i] = t;        //添加元素后数组长度+1        N++;    }    //向线性表中添加一个元素t    public void insert(T t){        eles[N++] = t;    }    //删除并返回线性表中第i个数据元素。    public T remove(int i){        //记录索引i处的值        T current = eles[i];        //索引i后面的元素向前移一位即可        for (int index = i; index &lt; N - 1; index++) {            eles[index] = eles[index+1];        }        //删除元素后数组长度减1        N--;        return current;    }    //返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1。    public int indexOf(T t){        for (int i = 0; i &lt; N; i++) {            if (eles[i].equals(t)){                return i;            }        }        return -1;    }    @Override    public Iterator iterator() {        return new SIterator();    }    private class SIterator implements Iterator{        private int cusor;        public SIterator() {            this.cusor = 0;        }        @Override        public boolean hasNext() {            return cusor &lt; N;        }        @Override        public Object next() {            return eles[cusor++];        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SequenceListTest {    public static void main(String[] args) {        //创建顺序表对象        SequenceList&lt;String&gt; list = new SequenceList&lt;&gt;(10);        //测试插入        list.insert("科比");        list.insert("詹姆斯");        list.insert("乔丹");        list.insert(1,"库里");        for (String s : list) {            System.out.println(s);        }        System.out.println("===========================================");        //测试获取        String s = list.get(2);        System.out.println("获取索引为2处的值："+ s);        //测试删除        String remove = list.remove(3);        System.out.println("删除索引为3处的值："+ remove);        //测试清空        list.clear();        System.out.println("清空线性表后线性表的元素个数有多少个"+ list.length());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220929003143957.png" alt="image-20220929003143957"></p><h4 id="顺序表的容量可变（扩容）"><a href="#顺序表的容量可变（扩容）" class="headerlink" title="顺序表的容量可变（扩容）"></a><strong>顺序表的容量可变</strong>（扩容）</h4><p><strong>1.添加元素时：</strong></p><p>添加元素时，应该检查当前数组的大小是否能容纳新的元素，如果不能容纳，则需要创建新的容量更大的数组，我们这里创建一个是原数组两倍容量的新数组存储元素。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220929224444878.png" alt="image-20220929224444878"></p><p><strong>2.移除元素时：</strong></p><p>移除元素时，应该检查当前数组的大小是否太大，比如正在用100个容量的数组存储10个元素，这样就会造成内存空间的浪费，应该创建一个容量更小的数组存储元素。如果我们发现数据元素的数量不足数组容量的1/4，则创建一个是原数组容量的1/2的新数组存储元素。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220929224720027.png" alt="image-20220929224720027"></p><h5 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SequenceList &lt;T&gt; implements Iterable&lt;T&gt;{    private T[] eles; //存储元素的数组    private int N;  //当前线性表的长度    public SequenceList(int capacity) {        this.eles = (T[])new Object[capacity]; //初始化数组        this.N = 0;  //初始化数组长度    }    //将线性表置空    public void clear(){        this.N = 0;    }    //判断线性表是否为空，是返回true，否返回    public boolean isEmpty(){        return N == 0;    }    //获取线性表中元素的个数    public int length(){        return N;    }    //读取并返回线性表中的第i个元素的值    public T get(int i){        return eles[i];    }    //在线性表的第i个元素之前插入一个值为t的数据元素。    public void insert(int i,T t){        if (N == eles.length){            reSzie(2* eles.length);        }        //先把i索引及其后面的元素依次向后移动一位        for (int index = N; index &gt; i ; index--) {            eles[index] = eles[index-1];        }        //再把t元素放到i索引处即可        eles[i] = t;        //添加元素后数组长度+1        N++;    }    //向线性表中添加一个元素t    public void insert(T t){        if (N == eles.length){            reSzie(2* eles.length);        }        eles[N++] = t;    }    //删除并返回线性表中第i个数据元素。    public T remove(int i){        //记录索引i处的值        T current = eles[i];        //索引i后面的元素向前移一位即可        for (int index = i; index &lt; N - 1; index++) {            eles[index] = eles[index+1];        }        //删除元素后数组长度减1        N--;        if (N &lt; eles.length/4){            reSzie(eles.length/2);        }        return current;    }    //返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1。    public int indexOf(T t){        for (int i = 0; i &lt; N; i++) {            if (eles[i].equals(t)){                return i;            }        }        return -1;    }    //数组扩容(根据参数newSize，来重置eles的大小)    public void reSzie(int newSize){        //定义一个临时数组，指向原数组        T[] temp = eles;        //创建新数组        eles = (T[]) new Object[newSize];        //把原数组的内容拷贝到新数组        for (int i = 0; i &lt; N; i++) {            eles[i] = temp[i];        }    }    @Override    public Iterator iterator() {        return new SIterator();    }    private class SIterator implements Iterator{        private int cusor;        public SIterator() {            this.cusor = 0;        }        @Override        public boolean hasNext() {            return cusor &lt; N;        }        @Override        public Object next() {            return eles[cusor++];        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="顺序表的时间复杂度"><a href="#顺序表的时间复杂度" class="headerlink" title="顺序表的时间复杂度"></a><strong>顺序表的时间复杂度</strong></h4><p><strong>get(i)：</strong>不难看出，不论数据元素量N有多大，只需要一次eles[i]就可以获取到对应的元素，所以==<strong>时间复杂度为O(1)</strong>==;</p><p><strong>insert(int i,T t)：</strong>每一次插入，都需要把i位置后面的元素移动一次，随着元素数量N的增大，移动的元素也越多，==<strong>时间复杂为O(n)</strong>==;</p><p><strong>remove(int i)：</strong>每一次删除，都需要把i位置后面的元素移动一次，随着数据量N的增大,移动的元素也越多，==<strong>时间复杂度为O(n);</strong>==</p><p>由于顺序表的底层由数组实现，数组的长度是固定的，所以在操作的过程中涉及到了容器扩容操作。这样会导致顺序表在使用过程中的时间复杂度不是线性的，在某些需要扩容的结点处，耗时会突增，尤其是元素越多，这个问题越明显</p><h4 id="java中ArrayList实现"><a href="#java中ArrayList实现" class="headerlink" title="java中ArrayList实现"></a>java中ArrayList实现</h4><p>java中ArrayList集合的底层也是一种顺序表，使用数组实现，同样提供了增删改查以及扩容等功能。</p><p>1.是否用数组实现；</p><p>2.有没有扩容操作；</p><p>3.有没有提供遍历方式；</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>之前我们已经使用顺序存储结构实现了线性表，我们会发现虽然顺序表的查询很快，时间复杂度为O(1),但是增删的效率是比较低的，因为每一次增删操作都伴随着大量的数据元素移动。这个问题有没有解决方案呢？有，我们可以使用另外一种存储结构实现线性表，链式存储结构。</p><p>链表是一种==<strong>物理存储单元上非连续、非顺序的存储结构</strong>==，其物理结构不能只管的表示数据元素的逻辑顺序，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。<strong>链表由一系列的结点（链表中的每一个元素称为结点）组成</strong>，结点可以在运行时动态生成。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220929230557252.png" alt="image-20220929230557252"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220929230706282.png" alt="image-20220929230706282"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220929230831445.png" alt="image-20220929230831445"></p><h4 id="结点API设计："><a href="#结点API设计：" class="headerlink" title="结点API设计："></a>结点API设计：</h4><table><thead><tr><th>类名</th><th>Node<t></t></th></tr></thead><tbody><tr><td>构造方法</td><td>Node(T t,Node next)：创建Node对象</td></tr><tr><td>成员变量</td><td>T item:存储数据                                                                                                                                                                                                                                                     Node next：指向下一个结点</td></tr></tbody></table><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Node &lt;T&gt;{    private T item; //存储数据    public Node next; //指向下一个结点    public Node(T item, Node next) {        this.item = item;        this.next = next;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成链表"><a href="#生成链表" class="headerlink" title="生成链表"></a>生成链表</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class NodeTest {    public static void main(String[] args) {        //构建结点        Node&lt;Integer&gt; first = new Node&lt;&gt;(11, null);        Node&lt;Integer&gt; second = new Node&lt;&gt;(13, null);        Node&lt;Integer&gt; third = new Node&lt;&gt;(14, null);        Node&lt;Integer&gt; fourth = new Node&lt;&gt;(12, null);        Node&lt;Integer&gt; fifth = new Node&lt;&gt;(9, null);        //生成链表        first.next = second;        second.next = third;        third.next = fourth;        fourth.next = fifth;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h4><p>单向链表是链表的一种，它由多个结点组成，==<strong>每个结点都由一个数据域和一个指针域组成</strong>==，<strong>数据域用来存储数据</strong>，<strong>指针域用来指向其后继结点</strong>。链表的头结点的数据域不存储数据，指针域指向第一个真正存储数据的结点。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220929232121833.png" alt="image-20220929232121833"></p><h5 id="单项链表的API设计"><a href="#单项链表的API设计" class="headerlink" title="单项链表的API设计"></a>单项链表的API设计</h5><table><thead><tr><th>类名</th><th><strong>LinkList＜Ｔ＞</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>LinkList()：创建LinkList对象</td></tr><tr><td>成员方法</td><td>1、public void clear()：空置线性表 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　2、public　boolean isEmpty()：判断线性表是否为空，是返回true，否返回false　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　3、public int length():　获取线性表中元素的个数　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　4、public T get(int i):　读取并返回线性表中的第i个元素的值　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　5、public void insert(T t)：往线性表中添加一个元素　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　6、public void insert(int i,T t)：在线性表的第i个元素之前插入一个值为t的数据元素。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　7、public T remove(int i):　删除并返回线性表中第i个数据元素　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　8、public int indexOf(T t):　返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1</td></tr><tr><td>成员内部</td><td>private class Node:　结点类</td></tr><tr><td>成员变量</td><td>1、private Node head:记录首结点　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　2、private int N:记录链表的长度</td></tr></tbody></table><h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><p><strong>LinkList</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class LinkList &lt;T&gt; implements Iterable{    //头结点    private Node head;    //记录链表的长度    private int N;    public LinkList() {        //初始化头结点        this.head = new Node(null,null);        //初始化元素的个数        this.N = 0;    }    //清空链表    public void clear(){        head.next = null;        this.N = 0;    }    //判断线性表是否为空，是返回true，否返回false　    public boolean isEmpty(){        return  N == 0;    }    //获取线性表中元素的个数    public int length(){        return N;    }    //读取并返回线性表中的第i个元素的值    public T get(int i){        //通过循环，从头结点开始往后找，找i次，就可以找到该元素        Node n = head.next;        for (int index = 0; index &lt; i; index++) {            n = n.next;        }        return (T) n.item;    }    //往线性表中添加一个元素    public void insert(T t){        //先找到当前的结点        Node n = head;        while (n.next != null) {            n = n.next;        }        //创建新的结点，保存元素        Node&lt;T&gt; tNode = new Node&lt;&gt;(t, null);        //让当前的最后一个结点指向新的结点        n.next = tNode;        //元素的个数+1        N++;    }    //在线性表的第i个元素之前插入一个值为t的数据元素。    public void insert(int i,T t){        // 先找到当前的结点的前一个结点        Node pre = head;        for (int index = 0; index &lt; i - 1; index++) {            pre = pre.next;        }        //找到i位置的结点        Node curr = pre.next;        //创建新的结点，并且新的结点需要指向原来i的位置的结点        Node&lt;T&gt; tNode = new Node&lt;&gt;(t, curr);        //原理i位置的前一个结点指向新的结点即可        pre.next = tNode;        //元素的个数+1        N++;    }    //删除并返回线性表中第i个数据元素    public T remove(int i){        //找到i位置的前一个结点        Node pre = head;        for (int index = 0; index &lt;= i - 1; index++) {            pre = pre.next;        }        //找到当前i位置的结点        Node curr = pre.next;        //找到i位置的下一个结点        Node nextNode = curr.next;        //前一个结点指向下一个结点        pre.next = nextNode;        //元素的个数+1        N--;        return (T) curr.item;    }    //返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1    public int indexOf(T t){        //从头结点开始，依次找到每一个结点，取出item，和t比较，如果相同，则说明找到，否则就没有该元素        Node n = head;        for (int i = 0; n.next != null ; i++) {            n = n.next;            if (n.item.equals(t)){                return i;            }        }        return -1;    }    private class LIterator&lt;T&gt; implements Iterator{        private Node n;        public LIterator() {            this.n = head;        }        @Override        public boolean hasNext() {            return n.next != null;        }        @Override        public Object next() {            n = n.next;            return n.item;        }    }    @Override    public Iterator iterator() {        return new LIterator();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class LinkListTest {    public static void main(String[] args) {        //创建单项链表对象        LinkList&lt;String&gt; list = new LinkList&lt;&gt;();        //测试插入        list.insert("科比");        list.insert("詹姆斯");        list.insert("乔丹");        list.insert(1,"库里");        for (Object s : list) {            System.out.println(s);        }        System.out.println("===========================================");        //测试获取        String s = list.get(2);        System.out.println("获取索引为2处的值："+ s);        //测试删除        String remove = list.remove(3);        System.out.println("删除索引为3处的值："+ remove);        //测试清空        list.clear();        System.out.println("清空线性表后线性表的元素个数有多少个"+ list.length());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930002855854.png" alt="image-20220930002855854"></p><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>双向链表也叫双向表，是链表的一种，它由多个结点组成，==<strong>每个结点都由一个数据域和两个指针域组成</strong>==，数据域用来存储数据，其中一个指针域用来指向其后继结点，另一个指针域用来指向前驱结点。链表的头结点的数据域不存储数据，指向前驱结点的指针域值为null，指向后继结点的指针域指向第一个真正存储数据的结点。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930094231021.png" alt="image-20220930094231021"></p><p>按照面向对象的思想，我们需要设计一个类，来描述结点这个事物。由于结点是属于链表的，所以我们把结点类作为链表类的一个内部类来实现</p><h5 id="结点API设计"><a href="#结点API设计" class="headerlink" title="结点API设计"></a>结点API设计</h5><table><thead><tr><th>类名</th><th>Node<t></t></th></tr></thead><tbody><tr><td>构造方法</td><td>Node(T t,Node pre,Node next)：创建Node对象</td></tr><tr><td>成员变量</td><td>T item: 存储数据                                                                                                                                                                                                                                                     Node next：指向下一个结点                                                                                                                                                                                                                        Node pre: 指向上一个结点</td></tr></tbody></table><h5 id="双向链表API设计"><a href="#双向链表API设计" class="headerlink" title="双向链表API设计"></a>双向链表API设计</h5><table><thead><tr><th>类名</th><th><strong>TowWayLinkList</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>TowWayLinkList()：创建TowWayLinkList对象</td></tr><tr><td>成员方法</td><td>1、public void clear()：空置线性表                                                                                                                                                                                               2、public boolean isEmpty()：判断线性表是否为空，是返回true，否返回false                                                                                                                                             3、public int length(): 获取线性表中元素的个数                                                                                                                                                                                            4、public T get(int i): 读取并返回线性表中的第i个元素的值                                                                                                                                                                      5、public void insert(T t)：往线性表中添加一个元素                                                                                                                                                                           6、public void insert(int i,T t)：在线性表的第i个元素之前插入一个值为t的数据元素。                                                                                                                       7、public T remove(int i): 删除并返回线性表中第i个数据元素                                                                                                                                                          8、public int indexOf(T t): 返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1                                                                                            9、public T getFirst(): 获取第一个元素                                                                                                                                                                                                  10、public T getLast(): 获取最后一个元素</td></tr><tr><td>成员内部类</td><td>private class Node: 结点类</td></tr><tr><td>成员变量</td><td>1、private Node first: 记录首结点                                                                                                                                                                                                                   2、private Node last: 记录尾结点                                                                                                                                                                                                              3、private int N: 记录链表的长度</td></tr></tbody></table><h5 id="双向链表代码实现"><a href="#双向链表代码实现" class="headerlink" title="双向链表代码实现"></a><strong>双向链表代码实现</strong></h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TowWayLinkList&lt;T&gt; implements Iterable&lt;T&gt;{    //首结点    private Node head;    //最后一个结点    private Node last;    //记录链表的长度    private int N;    //结点类    private class Node{        public T item; //存储数据        public Node pre; //指向上一个结点        public Node next; //指向下一个结点        public Node(T item,Node pre,Node next){            this.item = item;            this.pre = pre;            this.next = next;        }    }    public TowWayLinkList() {        //初始化头结点        this.head = new Node(null,null,null);        //初始化尾节点        this.last = null;        //初始化元素的个数        this.N = 0;    }    //清空链表    public void clear(){        this.head.next = null;        this.head.item = null;        this.head.pre = null;        this.last = null;        this.N = 0;    }    //判断线性表是否为空，是返回true，否返回false　    public boolean isEmpty(){        return  N == 0;    }    //获取线性表中元素的个数    public int length(){        return N;    }    // 获取第一个元素    public T getFirst() {        if (isEmpty()){            return null;        }        return head.next.item;    }    // 获取最后一个元素    public T getLast() {        if (isEmpty()){            return null;        }        return last.item;    }    //读取并返回线性表中的第i个元素的值    public T get(int i){        //通过循环，从头结点开始往后找，找i次，就可以找到该元素        Node n = head.next;        for (int index = 0; index &lt; i; index++) {            n = n.next;        }        return n.item;    }    //往线性表中添加一个元素    public void insert(T t){        //判断链表是否为空        if(isEmpty()){            //创建新的结点            Node newNode = new Node(t, head, null);            //让新的结点指向尾结点            last = newNode;            //让头结点指向尾结点            head.next = last;        }else {            Node oldLast = last;            //创建新的结点            Node newNode = new Node(t, oldLast, null);            //让当前的尾结点指向新的结点            oldLast.next = newNode;            //让新的结点成为尾结点            last = newNode;        }        //元素的个数+1        N++;    }    //在线性表的第i个元素之前插入一个值为t的数据元素。    public void insert(int i,T t){        // 先找到当前的结点的前一个结点        Node pre = head;        for (int index = 0; index &lt; i - 1; index++) {            pre = pre.next;        }        //找到i位置的结点        Node curr = pre.next;        //创建新的结点，并且新的结点需要指向原来i的位置的结点        Node tNode = new Node(t, pre,curr);        //让i位置的下一个结点成为新的结点即可        pre.next = tNode;        //让i位置的前一个结点成为新的结点即可        curr.pre = tNode;        //元素的个数+1        N++;    }    //删除并返回线性表中第i个数据元素    public T remove(int i){        //找到i位置的前一个结点        Node pre = head;        for (int index = 0; index &lt; i; index++) {            pre = pre.next;        }        //找到当前i位置的结点        Node curr = pre.next;        //找到i位置的下一个结点        Node nextNode = curr.next;        //前一个结点指向下一个结点头结点        pre.next = nextNode;        //下一个结点指向前一个结点尾结点        nextNode.pre = pre;        //元素的个数+1        N--;        return  curr.item;    }    //返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1    public int indexOf(T t){        //从头结点开始，依次找到每一个结点，取出item，和t比较，如果相同，则说明找到，否则就没有该元素        Node n = head;        for (int i = 0; n.next != null ; i++) {            n = n.next;            if (n.item.equals(t)){                return i;            }        }        return -1;    }    private class LIterator&lt;T&gt; implements Iterator {        private Node n;        public LIterator() {            this.n = head;        }        @Override        public boolean hasNext() {            return n.next != null;        }        @Override        public Object next() {            n = n.next;            return n.item;        }    }    @Override    public Iterator iterator() {        return new LIterator();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TowWayLinkListTest {    public static void main(String[] args) {        //创建顺序表对象        TowWayLinkList&lt;String&gt; list = new TowWayLinkList&lt;&gt;();        //测试插入        list.insert("科比");        list.insert("詹姆斯");        list.insert("乔丹");        list.insert(1,"库里");        for (String s : list) {            System.out.println(s);        }        System.out.println("===========================================");        //测试获取        String s = list.get(2);        System.out.println("获取索引为2处的值："+ s);        System.out.println("==========================");        //测试删除        String remove = list.remove(2);        System.out.println("删除索引为2处的值："+ remove);        System.out.println("第一个元素处的值："+ list.getFirst());        System.out.println("最后一个元素为处的值："+ list.getLast());        //测试清空        list.clear();        System.out.println("清空线性表后线性表的元素个数有多少个:"+ list.length());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930130431464.png" alt="image-20220930130431464"></p><h5 id="java中LinkedList实现"><a href="#java中LinkedList实现" class="headerlink" title="java中LinkedList实现"></a>java中LinkedList实现</h5><p>java中LinkedList集合也是使用双向链表实现，并提供了增删改查等相关方法</p><p>1.底层是否用双向链表实现；</p><p>2.结点类是否有三个域</p><h5 id="链表的复杂度分析"><a href="#链表的复杂度分析" class="headerlink" title="链表的复杂度分析"></a><strong>链表的复杂度分析</strong></h5><p><strong>get(int i):</strong>每一次查询，都需要从链表的头部开始，依次向后查找，随着数据元素N的增多，比较的元素越多，==<strong>时间复杂度为O(n)</strong>==</p><p><strong>insert(int i,T t):</strong>每一次插入，需要先找到i位置的前一个元素，然后完成插入操作，随着数据元素N的增多，查找的元素越多，==<strong>时间复杂度为O(n);</strong>==</p><p><strong>remove(int i):</strong>每一次移除，需要先找到i位置的前一个元素，然后完成插入操作，随着数据元素N的增多，查找的元素越多，==<strong>时间复杂度为O(n)</strong>==</p><p>相比较顺序表，链表插入和删除的时间复杂度虽然一样，但仍然有很大的优势，因为链表的物理地址是不连续的，它不需要预先指定存储空间大小，或者在存储过程中涉及到扩容等操作,,同时它并没有涉及的元素的交换。</p><p>相比较顺序表，链表的查询操作性能会比较低。因此，如果我们的程序中查询操作比较多，建议使用顺序表，增删操作比较多，建议使用链表。</p><h4 id="链表反转"><a href="#链表反转" class="headerlink" title="链表反转"></a><strong>链表反转</strong></h4><p>单链表的反转，是面试中的一个高频题目。</p><p><strong>需求：</strong></p><p>原链表中数据为：1-&gt;2-&gt;3&gt;4</p><p>反转后链表中数据为：4-&gt;3-&gt;2-&gt;1</p><p><strong>反转API：</strong></p><p><code>public void reverse()：对整个链表反转 </code></p><p><code>public Node reverse(Node curr)：反转链表中的某个结点curr,并把反转后的curr结点返回</code></p><p>使用递归可以完成反转，递归反转其实就是从原链表的第一个存数据的结点开始，依次递归调用反转每一个结点，直到把最后一个结点反转完毕，整个链表就反转完毕。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930131632237.png" alt="image-20220930131632237"></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h5><p>在LinkList类（单链表）添加如下的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//单链表的反转    public void reverse(){        //先判断链表是否为空        if (isEmpty()){            return;        }        reverse(head.next);    }    //反转指定的结点，并把反转后的结点返回    public Node reverse(Node curr){        //如果当前的结点为空，直接返回        if (curr.next == null){            head.next = curr;            return curr;        }        //递归的反转当前的结点curr的下一个结点，返回值就是链表反转后当前结点的上一个结点        Node pre = reverse(curr.next);        //让反转后的结点的下一结点变为当前的结点curr        pre.next = curr;        //把当前的结点的下一结点变为null        curr.next = null;        return curr;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class LinkListTest01 {    public static void main(String[] args) {        //创建单项链表对象        LinkList&lt;String&gt; list = new LinkList&lt;&gt;();        //测试插入        list.insert("科比");        list.insert("詹姆斯");        list.insert("乔丹");        list.insert(1,"库里");        System.out.println("反转前：");        for (Object s : list) {            System.out.println(s);        }        System.out.println("===========================================");        System.out.println("反转后：");        list.reverse();        for (Object s : list) {            System.out.println(s);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930152447473.png" alt="image-20220930152447473"></p><h4 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h4><p>快慢指针指的是定义两个指针，这两个指针的移动速度一块一慢，以此来制造出自己想要的差值，这个差值可以让我们找到链表上相应的结点。一般情况下，<strong>快指针的移动步长为慢指针的两倍</strong></p><h5 id="中间值问题"><a href="#中间值问题" class="headerlink" title="中间值问题"></a><strong>中间值问题</strong></h5><p><strong>需求：</strong></p><p>请完善测试类Test中的getMid方法，可以找出链表的中间元素值并返回。</p><p>利用快慢指针，我们把一个链表看成一个跑道，假设a的速度是b的两倍，那么当a跑完全程后，b刚好跑一半，以此来达到找到中间节点的目的。</p><p>如下图，最开始，slow与fast指针都指向链表第一个节点，然后slow每次移动一个指针，fast每次移动两个指针。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930153010663.png" alt="image-20220930153010663"></p><h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class FastSlowTest {    public static void main(String[] args) {        Node&lt;String&gt; first = new Node&lt;&gt;("aa", null);        Node&lt;String&gt; second = new Node&lt;&gt;("bb", null);        Node&lt;String&gt; third = new Node&lt;&gt;("gg", null);        Node&lt;String&gt; fourth = new Node&lt;&gt;("cc", null);        Node&lt;String&gt; fifth = new Node&lt;&gt;("dd", null);        Node&lt;String&gt; six = new Node&lt;&gt;("ee", null);        Node&lt;String&gt; seven = new Node&lt;&gt;("ff", null);        //完成结点之间的指向        first.next = second;        second.next = third;        third.next = fourth;        fourth.next = fifth;        fifth.next = six;        six.next = seven;        //查找中间值       String mid = getMid(first);        System.out.println("中间值为："+mid);    }    /**     *     * @param first  链表的首结点     * @return  链表的中间结点的值     */    public static String  getMid(Node&lt;String&gt; first){        Node&lt;String&gt; slow = first; //慢指针        Node&lt;String&gt; fast = first; //快指针        //使用两个指针强历链表,快指针指向的结点没有下一个结点了,就可以结束了,结束之后,慢指针指向的结点就是中间值        while(fast!=null &amp;&amp; fast.next!=null){            fast=fast.next.next;            slow=slow.next;        }        return slow.item;    }    private static class Node&lt;T&gt;{        //存储数据        T item;        //下一个结点        Node next;        public Node(T item, Node next){            this.item = item;            this.next = next;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930154833330.png" alt="image-20220930154833330"></p><h5 id="单向链表是否有环问题"><a href="#单向链表是否有环问题" class="headerlink" title="单向链表是否有环问题"></a><strong>单向链表是否有环问题</strong></h5><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930155006707.png" alt="image-20220930155006707"></p><p><strong>需求：</strong></p><p>请完善测试类Test中的isCircle方法，返回链表中是否有环。</p><p>使用快慢指针的思想，还是把链表比作一条跑道，链表中有环，那么这条跑道就是一条圆环跑道，在一条圆环跑道中，两个人有速度差，那么迟早两个人会相遇，只要相遇那么就说明有环。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930155705883.png" alt="image-20220930155705883"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930155750653.png" alt="image-20220930155750653"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930155835194.png" alt="image-20220930155835194"></p><h6 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CircleListCheckTest {    public static void main(String[] args) {        Node&lt;String&gt; first = new Node&lt;&gt;("aa", null);        Node&lt;String&gt; second = new Node&lt;&gt;("bb", null);        Node&lt;String&gt; third = new Node&lt;&gt;("gg", null);        Node&lt;String&gt; fourth = new Node&lt;&gt;("cc", null);        Node&lt;String&gt; fifth = new Node&lt;&gt;("dd", null);        Node&lt;String&gt; six = new Node&lt;&gt;("ee", null);        Node&lt;String&gt; seven = new Node&lt;&gt;("ff", null);        //完成结点之间的指向        first.next = second;        second.next = third;        third.next = fourth;        fourth.next = fifth;        fifth.next = six;        six.next = seven;        //生成环        seven.next = third;        //判断链表是否有环        boolean circle = isCircle(first);        System.out.println("first链表中是否有环？"+ circle);    }    public static boolean isCircle(Node&lt;String&gt; first){        Node&lt;String&gt; slow = first;        Node&lt;String&gt; fast = first;        //遍历链表﹐如果快慢指针指向了同一个结点﹐那么证明有环        while(fast!=null &amp;&amp; fast.next!=null){            fast = fast.next.next;            slow = slow.next;            if (fast.equals(slow)){                return true;            }        }        return false;    }       private static class Node&lt;T&gt;{        //存储数据        T item;        //下一个结点        Node next;        public Node(T item, Node next){            this.item = item;            this.next = next;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930160518106.png" alt="image-20220930160518106"></p><h5 id="有环链表入口问题"><a href="#有环链表入口问题" class="headerlink" title="有环链表入口问题"></a><strong>有环链表入口问题</strong></h5><p><strong>需求：</strong></p><p>完善Test类中的getEntrance方法，查找有环链表中环的入口结点。</p><p>当快慢指针相遇时，我们可以判断到链表中有环，这时重新设定一个新指针指向链表的起点，且步长与慢指针一样为1，则慢指针与“新”指针相遇的地方就是环的入口。证明这一结论牵涉到数论的知识，这里略，只讲实现。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930160642311.png" alt="image-20220930160642311"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930160823740.png" alt="image-20220930160823740"></p><h6 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CircleListCheckTest {    public static void main(String[] args) {        Node&lt;String&gt; first = new Node&lt;&gt;("aa", null);        Node&lt;String&gt; second = new Node&lt;&gt;("bb", null);        Node&lt;String&gt; third = new Node&lt;&gt;("gg", null);        Node&lt;String&gt; fourth = new Node&lt;&gt;("cc", null);        Node&lt;String&gt; fifth = new Node&lt;&gt;("dd", null);        Node&lt;String&gt; six = new Node&lt;&gt;("ee", null);        Node&lt;String&gt; seven = new Node&lt;&gt;("ff", null);        //完成结点之间的指向        first.next = second;        second.next = third;        third.next = fourth;        fourth.next = fifth;        fifth.next = six;        six.next = seven;        //生成环        seven.next = third;        //判断链表是否有环        boolean circle = isCircle(first);        System.out.println("first链表中是否有环？"+ circle);        //查找环的入口        Node entrance = getEntrance(first);        System.out.println("fisrt链表中环的入口是:"+ entrance.item);    }    public static Node getEntrance(Node&lt;String&gt; first){        Node&lt;String&gt; slow = first;        Node&lt;String&gt; fast = first;        Node&lt;String&gt; temp = null; //临时指针        //遍历链表，先找到环（快慢指针相遇），准备一个临时指针，指向链表的首结点，继续遍历，直到慢指针和临时指针相遇，那么相遇的位置就是环的入口        while(fast!=null &amp;&amp; fast.next!=null){            fast = fast.next.next;            slow=slow.next;            //判断快慢指针是否相遇            if (fast.equals(slow)){                temp = first;                continue;            }            //让临时结点变换            if (temp!=null){                temp=temp.next;                //判断临时指针与慢指针是否相遇                if (temp.equals(slow)){                    break;                }            }        }        return temp;    }    public static boolean isCircle(Node&lt;String&gt; first){        Node&lt;String&gt; slow = first;        Node&lt;String&gt; fast = first;        //遍历链表﹐如果快慢指针指向了同一个结点﹐那么证明有环        while(fast!=null &amp;&amp; fast.next!=null){            fast = fast.next.next;            slow = slow.next;            if (fast.equals(slow)){                return true;            }        }        return false;    }       private static class Node&lt;T&gt;{        //存储数据        T item;        //下一个结点        Node next;        public Node(T item, Node next){            this.item = item;            this.next = next;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a><strong>循环链表</strong></h4><p>循环链表，顾名思义，链表整体要形成一个圆环状。在单向链表中，最后一个节点的指针为null，不指向任何结点，因为没有下一个元素了。要实现循环链表，我们只需要让单向链表的最后一个节点的指针指向头结点即可。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930200032818.png" alt="image-20220930200032818"></p><h5 id="循环列表的构建"><a href="#循环列表的构建" class="headerlink" title="循环列表的构建"></a>循环列表的构建</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CircleListCheckTest {    public static void main(String[] args) {        Node&lt;String&gt; first = new Node&lt;&gt;("aa", null);        Node&lt;String&gt; second = new Node&lt;&gt;("bb", null);        Node&lt;String&gt; third = new Node&lt;&gt;("gg", null);        Node&lt;String&gt; fourth = new Node&lt;&gt;("cc", null);        Node&lt;String&gt; fifth = new Node&lt;&gt;("dd", null);        Node&lt;String&gt; six = new Node&lt;&gt;("ee", null);        Node&lt;String&gt; seven = new Node&lt;&gt;("ff", null);        //完成结点之间的指向        first.next = second;        second.next = third;        third.next = fourth;        fourth.next = fifth;        fifth.next = six;        six.next = seven;        //构建循环链表,让最后一个结点指向第一个结点        seven.next = first;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a><strong>约瑟夫问题</strong></h4><p><strong>问题描述：</strong></p><p>传说有这样一个故事，在罗马人占领乔塔帕特后，39 个犹太人与约瑟夫及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，第一个人从1开始报数，依次往后，如果有人报数到3，那么这个人就必须自杀，然后再由他的下一个人重新从1开始报数，直到所有人都自杀身亡为止。然而约瑟夫和他的朋友并不想遵从。于是，约瑟夫要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，从而逃过了这场死亡游戏 。</p><p><strong>问题转换：</strong></p><p>41个人坐一圈，第一个人编号为1，第二个人编号为2，第n个人编号为n。</p><p>1.编号为1的人开始从1报数，依次向后，报数为3的那个人退出圈；</p><p>2.自退出那个人开始的下一个人再次从1开始报数，以此类推；</p><p>3.求出最后退出的那个人的编号。</p><p><strong>图示：</strong></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930200702147.png" alt="image-20220930200702147"></p><p>  <strong>解题思路：</strong></p><p>1.构建含有41个结点的单向循环链表，分别存储1~41的值，分别代表这41个人；</p><p>2.使用计数器count，记录当前报数的值；</p><p>3.遍历链表，每循环一次，count++；</p><p>4.判断count的值，如果是3，则从链表中删除这个结点并打印结点的值，把count重置为0；</p><h5 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class JosephTest {    public static void main(String[] args) {        //解决约瑟夫问题        //1.构建含有41个结点的单向循环链表，分别存储1~41的值，分别代表这41个人；        Node&lt;Integer&gt; first = null; //首结点        Node&lt;Integer&gt; pre = null;  //记录前一个结点        for (int i = 1; i &lt;= 41; i++) {            //如果是第一个结点            if (i == 1){                first = new Node&lt;&gt;(i,null);                pre = first;                continue;            }            //如果不是第一个结点            Node&lt;Integer&gt; newNode = new Node&lt;&gt;(i,null);            pre.next = newNode;            pre = newNode;            //如果是最后一个结点，那么需要让最后一个结点的下一个结点变为first，变为循环链表            if (i == 41){                pre.next = first;            }        }        //2.使用计数器count，记录当前报数的值；        int count = 0;        //3.遍历循环列表        Node&lt;Integer&gt; n = first; //记录每次遍历拿到的结点，默认从首结点开始        Node&lt;Integer&gt; before = null;  //记录当前结点的上一个结点        while (n != n.next){            //模拟报数            count++;            //判断当前报数是否是3            if (count == 3){                //如果是3﹔则把当前结点删除调用﹔打印当前结点,重置count=0,让当前结点n后移                before.next = n.next;                System.out.print(n.item + "\t");                count = 0; //重置报数                n = n.next; //指针向下移            }else {                //如果不是3: ifbefore变为当前结点﹔让当前结点后移;                before = n;                n = n.next;            }        }        System.out.println(n.item);    }    //结点类    private static class Node&lt;T&gt;{        //存储数据        T item;        //下一个结点        Node next;        public Node(T item, Node next){            this.item = item;            this.next = next;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p><strong>计算机中的栈</strong></p><p>我们把生活中的栈的概念引入到计算机中，就是供数据休息的地方，它是一种数据结构，数据既可以进入到栈中，又可以从栈中出去。</p><p>栈是一种基于==<strong>先进后出(FILO)</strong>==的数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。</p><p>我们称数据进入到栈的动作为<strong>压栈</strong>，数据从栈中出去的动作为<strong>弹栈</strong>。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20220930204328922.png" alt="image-20220930204328922"></p><h4 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a><strong>栈的实现</strong></h4><h5 id="栈API设计"><a href="#栈API设计" class="headerlink" title="栈API设计"></a><strong>栈API设计</strong></h5><table><thead><tr><th><strong>类名</strong></th><th><strong>Stack</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Stack)：创建Stack对象</td></tr><tr><td>成员方法</td><td>1、public boolean isEmpty()：判断栈是否为空，是返回true，否返回false                                                                                                                                  2、public int size():  获取栈中元素的个数                                                                                                                                                                                                                                                    3、public T pop():  弹出栈顶元素                                                                                                                                                                                                          4、public void push(T t)：向栈中压入元素t</td></tr><tr><td>成员变量</td><td>1、private Node head:  记录首结点                                                                                                                                                                                                          2、private int N:  当前栈的元素个数</td></tr></tbody></table><h5 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Stack &lt;T&gt; implements Iterable&lt;T&gt;{    private Node head;  //首结点    private int N; //栈的长度    //结点类    private class Node{        public T item; //存储数据        public Node next; //指向下一个结点        public Node(T item, Node next) {            this.item = item;            this.next = next;        }    }    //初始化栈    public Stack(){        this.head = new Node(null,null);        this.N = 0;    }    //判断栈是否为空    public boolean isEmpty(){        return N == 0;    }    //获取栈中元素的个数    public int size(){        return N;    }    //把元素t压栈    public  void push(T t){        //找到首结点指向的第一个结点        Node oldFirst = head.next;        //创建新的结点        Node newNode = new Node(t, null);        //让首结点指向新结点        head.next = newNode;        //让新结点指向原来的第一个结点        newNode.next = oldFirst;        //元素个数+1        N++;    }    //弹出栈顶元素    public T pop(){        //找到首结点指向的第一个结点        Node oldFirst = head.next;        if (oldFirst == null){            return null;        }        //让首结点指向原来第一个结点的下一个结点        head.next = oldFirst.next;        //元素个数-1        N--;        return oldFirst.item;    }    @Override    public Iterator&lt;T&gt; iterator() {        return new SIterator();    }    private class SIterator implements Iterator&lt;T&gt;{        private Node n;        public SIterator(){            this.n = head;        }        @Override        public boolean hasNext() {            return n.next != null;        }        @Override        public T next() {            Node node = n.next;            n = n.next;            return node.item;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class StackTest {    public static void main(String[] args) {        Stack&lt;String&gt; stack = new Stack&lt;&gt;();        //压栈        stack.push("a");        stack.push("b");        stack.push("c");        stack.push("d");        for (String item : stack) {            System.out.println(item);        }        System.out.println("=============================");        //弹栈        String pop = stack.pop();        System.out.println("栈顶元素是：" +pop);        System.out.println("当前栈的个数有："+ stack.size()+ "个");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221001170056303.png" alt="image-20221001170056303"></p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><h6 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a><strong>括号匹配问题</strong></h6><p><strong>问题描述：</strong></p><p>给定一个字符串，里边可能包含”()”小括号和其他字符，请编写程序检查该字符串的中的小括号是否成对出现。 </p><p>例如：</p><p>“(上海)(长安)”：正确匹配 </p><p>“上海((长安))”：正确匹配 </p><p>“上海(长安(北京)(深圳)南京)”:正确匹配 </p><p>“上海(长安))”：错误匹配 </p><p>“((上海)长安”：错误匹配 </p><p><strong>分析：</strong></p><p>1.创建一个栈用来存储左括号 </p><p>2.从左往右遍历字符串，拿到每一个字符 </p><p>3.判断该字符是不是左括号，如果是，放入栈中存储 </p><p>4.判断该字符是不是右括号，如果不是，继续下一次循环 </p><p>5.如果该字符是右括号，则从栈中弹出一个元素t； </p><p>6.判断元素t是否为null，如果不是，则证明有对应的左括号，如果不是，则证明没有对应的左括号 </p><p>7.循环结束后，判断栈中还有没有剩余的左括号，如果有，则不匹配，如果没有，则匹配</p><p><strong>代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class BracketsMatchTest {    public static void main(String[] args) {        String str = "(上海(长安)))";        boolean match = isMatch(str);        System.out.println(str + "中的括号是否匹配？" + match);    }    public static boolean isMatch(String str){        Stack&lt;String&gt; stack = new Stack&lt;&gt;();        //从左到右循环str字符串        for (int i = 0; i &lt; str.length(); i++) {            String s = str.charAt(i) + "";            //判断当前的字符是否为左括号，如果是则放入栈中            if (s.equals("(")){                stack.push(s);            }else if (s.equals(")")){                //如果当前的字符为右括号，则从栈中弹出一个左括号，并判断弹出的结果是否为null，如果是null证明没有匹配的左括号                String pop = stack.pop();                if (pop == null){                    return false;                }            }        }        //判断栈中还有没有剩余的左括号，如果有，则证明括号不匹配        if (stack.size() == 0){            return true;        }else {            return false;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221001172859268.png" alt="image-20221001172859268"></p><h6 id="逆波兰表达式求值问题"><a href="#逆波兰表达式求值问题" class="headerlink" title="逆波兰表达式求值问题"></a><strong>逆波兰表达式求值问题</strong></h6><p><strong>中缀表达式：</strong></p><p>中缀表达式就是我们平常生活中使用的表达式，例如：1+3*2,2-(1+3)等等，中缀表达式的特点是：二元运算符总是置于两个操作数中间。</p><p>中缀表达式是人们最喜欢的表达式方式，因为简单，易懂。但是对于计算机来说就不是这样了，因为中缀表达式的运算顺序不具有规律性。不同的运算符具有不同的优先级，如果计算机执行中缀表达式，需要解析表达式语义，做大量的优先级相关操作。</p><p><strong>逆波兰表达式(后缀表达式)：</strong></p><p>逆波兰表达式是波兰逻辑学家J・卢卡西维兹(J・ Lukasewicz)于1929年首先提出的一种表达式的表示方法，后缀表达式的特点：运算符总是放在跟它相关的操作数之后。</p><table><thead><tr><th><strong>中缀表达式</strong></th><th><strong>逆波兰表达式</strong></th></tr></thead><tbody><tr><td>a+b</td><td>ab+</td></tr><tr><td>a+(b-c)</td><td>abc-+</td></tr><tr><td>a+(b-c)*d</td><td>abc-d*+</td></tr><tr><td>a*(b-c)+d</td><td>abc-*d+</td></tr></tbody></table><p><strong>需求：</strong></p><p>给定一个只包含加减乘除四种运算的逆波兰表达式的数组表示方式，求出该逆波兰表达式的结果。</p><p><strong>分析：</strong></p><p>1.创建一个栈对象stack存储操作数 </p><p>2.从左往右遍历逆波兰表达式，得到每一个字符串 </p><p>3.判断该字符串是不是运算符，如果不是，把该该操作数压入stack栈中 </p><p>4.如果是运算符，则从stack栈中弹出两个操作数o1，o2 </p><p>5.使用该运算符计算o1和o2，得到结果result </p><p>6.把该结果压入stack栈中 </p><p>7.遍历结束后，拿出栈中最终的结果返回 </p><p><strong>代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ReversePolishNotation {    public static void main(String[] args) {        //中缀表达式3*（17-15）+18/6的逆波兰表达式如下        String[] notation = {"3", "17", "15", "-", "*","18", "6","/","+"};        int result = caculate(notation);        System.out.println("逆波兰表达式的结果为："+result);    }    private static int caculate(String[] notation) {        //1.创建一个栈对象oprands存储操作数        Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();        //2.从左往右遍历逆波兰表达式，得到每一个字符串        for (int i = 0; i &lt; notation.length; i++) {            String curr = notation[i];            //3.判断该字符串是不是运算符，如果不是，把该该操作数压入oprands栈中            Integer o1;            Integer o2;            Integer result;            switch (curr){                case "+":                    o1 = stack.pop();                    o2 = stack.pop();                    result = o2 + o1;                    stack.push(result);                    break;                case "-":                    o1 = stack.pop();                    o2 = stack.pop();                    result = o2 - o1;                    stack.push(result);                    break;                case "*":                    o1 = stack.pop();                    o2 = stack.pop();                    result = o2 * o1;                    stack.push(result);                    break;                case "/":                    o1 = stack.pop();                    o2 = stack.pop();                    result = o2 / o1;                    stack.push(result);                    break;                default:                    stack.push(Integer.parseInt(curr));                    break;            }        }        //7.遍历结束后，拿出栈中最终的结果返回        Integer result = stack.pop();        return result;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221001194552514.png" alt="image-20221001194552514"></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列是一种基于==<strong>先进先出(FIFO)</strong>==的数据结构，是一种只能在一端进行插入,在另一端进行删除操作的特殊线性表，它按照先进先出的原则存储数据，先进入的数据，在读取数据时先读被读出来。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221001194718497.png" alt="image-20221001194718497"></p><h4 id="队列的API设计"><a href="#队列的API设计" class="headerlink" title="队列的API设计"></a>队列的API设计</h4><table><thead><tr><th>类</th><th><strong>Queue</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Queue()：创建Queue对象</td></tr><tr><td>成员方法</td><td>1、public boolean isEmpty()：判断队列是否为空，是返回true，否返回false                                                                                                                            2、public int size():  获取队列中元素的个数                                                                                                                                                                                           3、public T dequeue():  从队列中拿出一个元素                                                                                                                                                                                   4、public void enqueue(T t)：往队列中插入一个元素</td></tr><tr><td>成员变量</td><td>1、private Node head:  记录首结点                                                                                                                                                                                                        2、private int N:  当前栈的元素个数                                                                                                                                                                                                          3、private Node last:  记录最后一个结点</td></tr></tbody></table><h4 id="队列的代码实现"><a href="#队列的代码实现" class="headerlink" title="队列的代码实现"></a><strong>队列的代码实现</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Queue&lt;T&gt; implements Iterable&lt;T&gt;{    private Node head;//首结点    private int N; //队列的元素个数    private Node last; //队列的尾结点    private class Node{        public T item; //存储数据        public Node next; //指向下一个结点//        public Node last; //指向下一个结点        public Node(T item, Node next) {            this.item = item;            this.next = next;        }    }    public Queue(){        this.head = new Node(null,null);        this.N = 0;        this.last =null;    }    //判断队列是否为空，是返回true，否返回false    public boolean isEmpty(){        return N == 0;    }    //获取队列中元素的个数    public int size(){        return N;    }    //  从队列中拿出一个元素   public T dequeue() {        //首先判断队列是否为null        if (isEmpty()){            return null;        }        Node oldFirst = head.next;        head.next = oldFirst.next;        //队列的元素个数-1        N--;       //因为出队列其实是在删除元素,因此如果队列中的元素被删除完了,需要重置last=null;       if (isEmpty()){           last = null;       }       return oldFirst.item;   }   //往队列中插入一个元素    public void enqueue(T t){        //当前尾结点last为null        if (last == null){            last = new Node(t, null);            head.next = last;        }else {            //当前尾结点last不为null            Node oldLast = last;            last = new Node(t,null);            oldLast.next = last;        }        //元素个数+1        N++;    }    @Override    public Iterator&lt;T&gt; iterator() {        return new QIterator();    }    private class QIterator implements Iterator&lt;T&gt;{        private Node n;        public QIterator(){            this.n = head;        }        @Override        public boolean hasNext() {            return n.next != null;        }        @Override        public T next() {            Node node = n.next;            n = n.next;            return node.item;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class QueueTest {    public static void main(String[] args) {        Queue&lt;String&gt; queue = new Queue&lt;&gt;();        queue.enqueue("a");        queue.enqueue("b");        queue.enqueue("c");        queue.enqueue("d");        for (String s : queue) {            System.out.println(s);        }        System.out.println("=================");        queue.dequeue();        for (String s : queue) {            System.out.println(s);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221001201913099.png" alt="image-20221001201913099"></p><h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>符号表最主要的目的就是将一个键和一个值联系起来，符号表能够将存储的数据元素是一个键和一个值共同组成的键值对数据，我们可以根据键来查找对应的值。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221001202707817.png" alt="image-20221001202707817"></p><p>符号表中，<strong>键具有唯一性</strong>。</p><p>符号表在实际生活中的使用场景是非常广泛的，见下表：</p><table><thead><tr><th><strong>应用</strong></th><th><strong>查找目的</strong></th><th><strong>键</strong></th><th><strong>值</strong></th></tr></thead><tbody><tr><td>字典</td><td>找出单词的释义</td><td>单词</td><td>释义</td></tr><tr><td>图书索引</td><td>找出某个术语相关的页码</td><td>术语</td><td>一串页码</td></tr><tr><td>网络搜索</td><td>找出某个关键字对应的网页</td><td>关键字</td><td>网页名称</td></tr></tbody></table><h3 id="符号表API设计"><a href="#符号表API设计" class="headerlink" title="符号表API设计"></a>符号表API设计</h3><p><strong>结点类：</strong></p><table><thead><tr><th><strong>类名</strong></th><th><strong>Node&lt;Key,Value&gt;</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Node(Key key,Value value,Node next)：创建Node对象</td></tr><tr><td>成员变量</td><td>1、public Key key: 存储键                                                                                                                                                                                                                                    2、public Value value:  存储值                                                                                                                                                                                                                        3、public Node next:  存储下一个结点</td></tr></tbody></table><p><strong>符号表：</strong></p><table><thead><tr><th><strong>类名</strong></th><th><strong>SymbolTable&lt;Key,Value&gt;</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>SymbolTable()：创建SymbolTable对象</td></tr><tr><td>成员方法</td><td>1、public Value get(Key key)：根据键key，找对应的值                                                                                                                                                                                       2、public void put(Key key,Value val):  向符号表中插入一个键值对                                                                                                                                                      3、public void delete(Key key):  删除键为key的键值对                                                                                                                                                                                    4、public int size()：获取符号表的大小</td></tr><tr><td>成员变量</td><td>1、private Node head:记录首结点                                                                                                                                                                                                                                                                          2、private int N:记录符号表中键值对的个数</td></tr></tbody></table><h3 id="符号表的代码实现"><a href="#符号表的代码实现" class="headerlink" title="符号表的代码实现"></a><strong>符号表的代码实现</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SymbolTable &lt;Key,Value&gt;{    //首结点    private Node head;    //记录符号表中的元素个数    private int N;    private class Node{        //键        private Key key;        //值        private Value value;        //下一个结点        private Node next;        public Node(Key key,Value value,Node next){            this.key = key;            this.value = value;            this.next = next;        }    }    public SymbolTable(){        this.head = new Node(null,null,null);        this.N = 0;    }    //根据键key，找对应的值    public Value get(Key key) {        //找到键为key的键值对结点        Node n = head;        while (n.next != null){            //变换n            n = n.next;            if (n.key.equals(key)){                return n.value;            }        }        return null;    }    //向符号表中插入一个键值对    public void put(Key key,Value value){        //符号表中已经存在了键key的键值对，那么只要找到该结点，替换值为value即可        Node n = head;        while (n.next != null){            //变换n            n = n.next;            //判断n结点存储的键是否为key，如果是，则替换n结点的value值            if (n.key.equals(key)){                n.value = value;                return;            }        }        //如果符号表中不存在键为key的键值对，只需创建新的结点，保存要插入的键值对，把新结点插入到链表的头部，head.next = 新的结点即可        Node newNode = new Node(key, value, null);        Node oldFirst = head.next;        newNode.next = oldFirst;        head.next = newNode;        //元素个数+        N++;    }    // 删除键为key的键值对    public void delete(Key key){        //找到键为key的键值对结点，把结点从链表中删除        Node n = head;        while (n.next != null){            //判断n结点的下一结点的键是否为key，如果是，则删除该结点            if (n.next.key.equals(key)){                n.next = n.next.next;                N--;                return;            }            //变换n            n = n.next;        }    }    //获取符号表的大小    public int size(){        return N;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SymbolTableTest {    public static void main(String[] args) {        SymbolTable&lt;Integer, String &gt; symbolTable = new SymbolTable&lt;&gt;();        symbolTable.put(1,"乔峰");        symbolTable.put(2,"虚竹");        symbolTable.put(3,"段誉");        symbolTable.put(1,"郭靖");        System.out.println("插入完毕后，元素的个数为："+ symbolTable.size());        System.out.println(symbolTable.get(1));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221001235607219.png" alt="image-20221001235607219"></p><h3 id="有序符号表"><a href="#有序符号表" class="headerlink" title="有序符号表"></a><strong>有序符号表</strong></h3><p>刚才实现的符号表，我们可以称之为无序符号表，因为在插入的时候，并没有考虑键值对的顺序，而在实际生活中，有时候我们需要根据键的大小进行排序，插入数据时要考虑顺序，那么接下来我们就实现一下有序符号表。</p><h4 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class OrderSymbolTable &lt;Key extends Comparable&lt;Key&gt;, Value&gt; implements Iterable{    //首结点    private Node head;    //记录符号表中的元素个数    private int N;    private class Node{        //键        private Key key;        //值        private Value value;        //下一个结点        private Node next;        public Node(Key key,Value value,Node next){            this.key = key;            this.value = value;            this.next = next;        }    }    public OrderSymbolTable(){        this.head = new Node(null,null,null);        this.N = 0;    }    //根据键key，找对应的值    public Value get(Key key) {        //找到键为key的键值对结点        Node n = head;        while (n.next != null){            //变换n            n = n.next;            if (n.key.equals(key)){                return n.value;            }        }        return null;    }    //向符号表中插入一个键值对    public void put(Key key,Value value){        //定义两个Node变量，分别记录当前结点和当前结点的上一个结点           Node curr = head.next;           Node pre = head;           while (curr != null &amp;&amp; key.compareTo(curr.key) &gt; 0){              //变换当前结点和前一个结点即可               pre = curr;               curr = curr.next;           }           //如果当前结点curr的键和要插入的key一样,则替换            if (curr != null &amp;&amp; key.compareTo(curr.key) == 0){               curr.value = value;               return;           }            //如果当前结点curr的键和要插入的key不一样﹐把新的结点插入到curr之前            Node node = new Node(key, value, curr);            pre.next = node;           //元素个数+1            N++;    }    // 删除键为key的键值对    public void delete(Key key){        //找到键为key的键值对结点，把结点从链表中删除        Node n = head;        while (n.next != null){            //判断n结点的下一结点的键是否为key，如果是，则删除该结点            if (n.next.key.equals(key)){                n.next = n.next.next;                N--;                return;            }            //变换n            n = n.next;        }    }    //获取符号表的大小    public int size(){        return N;    }    @Override    public Iterator iterator() {        return new SIterator();    }    private class SIterator&lt;T&gt; implements Iterator&lt;T&gt; {        private Node n;        public SIterator() {            this.n = head;        }        @Override        public boolean hasNext() {            return n.next != null;        }        @Override        public T next() {            Node node = n.next;            n = n.next;            return (T) get(node.key);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class OrderSymbolTableTest {    public static void main(String[] args) {        OrderSymbolTable&lt;Integer, String&gt; symbolTable = new OrderSymbolTable&lt;&gt;();        symbolTable.put(1,"张三");        symbolTable.put(2,"李四");        symbolTable.put(7,"王五");        symbolTable.put(4,"赵六");        symbolTable.put(3,"田七");        for (Object o : symbolTable) {            System.out.println(o);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221002002149449.png" alt="image-20221002002149449"></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉树入门"><a href="#二叉树入门" class="headerlink" title="二叉树入门"></a><strong>二叉树入门</strong></h3><p>在符号表中，不难看出，符号表的增删查操作，随着元素个数N的增多，其耗时也是线性增多的，时间复杂度都是O(n),为了提高运算效率，接下来我们学习树这种数据结构。</p><h4 id="树的基本定义"><a href="#树的基本定义" class="headerlink" title="树的基本定义"></a><strong>树的基本定义</strong></h4><p>树是我们计算机中非常重要的一种数据结构，同时使用树这种数据结构，可以描述现实生活中的很多事物，例如家谱、单位的组织架构、等等。</p><p>树是由n（n&gt;=1）个有限结点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221002123247065.png" alt="image-20221002123247065"></p><p>树具有以下特点：</p><p> 1.每个结点有零个或多个子结点；</p><p> 2.没有父结点的结点为根结点；</p><p> 3.每一个非根结点只有一个父结点；</p><p> 4.每个结点及其后代结点整体上可以看做是一棵树，称为当前结点的父结点的一个子树；</p><h4 id="树的相关术语"><a href="#树的相关术语" class="headerlink" title="树的相关术语"></a><strong>树的相关术语</strong></h4><p><strong>结点的度：</strong></p><p>一个结点含有的子树的个数称为该结点的度；</p><p><strong>叶结点：</strong></p><p>度为0的结点称为叶结点，也可以叫做终端结点</p><p><strong>分支结点：</strong></p><p>度不为0的结点称为分支结点，也可以叫做非终端结点</p><p><strong>结点的层次：</strong></p><p>从根结点开始，根结点的层次为1，根的直接后继层次为2，以此类推</p><p><strong>结点的层序编号：</strong></p><p>将树中的结点，按照从上层到下层，同层从左到右的次序排成一个线性序列，把他们编成连续的自然数。</p><p><strong>树的度：</strong></p><p>树中所有结点的度的最大值</p><p><strong>树的高度(深度)：</strong></p><p>树中结点的最大层次</p><p><strong>森林：</strong></p><p> m（m&gt;=0）个互不相交的树的集合，将一颗非空树的根结点删去，树就变成一个森林；给森林增加一个统一的根</p><p>结点，森林就变成一棵树</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221002124044681.png" alt="image-20221002124044681"></p><p><strong>孩子结点：</strong></p><p>一个结点的直接后继结点称为该结点的孩子结点</p><p><strong>双亲结点(父结点)：</strong></p><p>一个结点的直接前驱称为该结点的双亲结点</p><p><strong>兄弟结点：</strong></p><p>同一双亲结点的孩子结点间互称兄弟结点</p><h3 id="二叉树的基本定义"><a href="#二叉树的基本定义" class="headerlink" title="二叉树的基本定义"></a><strong>二叉树的基本定义</strong></h3><p>二叉树就是度不超过2的树(每个结点最多有两个子结点)</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221002124224073.png" alt="image-20221002124224073"></p><p><strong>满二叉树：</strong></p><p>一个二叉树，如果每一个层的结点树都达到最大值，则这个二叉树就是满二叉树。每一层的结点数为：2^(k-1)个</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221002124240262.png" alt="image-20221002124240262"></p><p><strong>完全二叉树：</strong></p><p>叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221002124527705.png" alt="image-20221002124527705"></p><h3 id="二叉查找树的创建"><a href="#二叉查找树的创建" class="headerlink" title="二叉查找树的创建"></a><strong>二叉查找树的创建</strong></h3><h4 id="二叉树的结点类"><a href="#二叉树的结点类" class="headerlink" title="二叉树的结点类"></a><strong>二叉树的结点类</strong></h4><p>根据对树的观察，我们发现二叉树其实就是由一个一个的结点及其之间的关系组成的，按照面向对象的思想，我们设计一个结点类来描述结点这个事物。</p><h4 id="结点类API设计："><a href="#结点类API设计：" class="headerlink" title="结点类API设计："></a><strong>结点类API设计：</strong></h4><table><thead><tr><th><strong>类名</strong></th><th><strong>Node&lt;Key,Value&gt;</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>Node(Key key, Value value, Node left, Node right)：创建Node对象</td></tr><tr><td>成员变量</td><td>1、public Node left:记录左子结点 <br>2、public Node right:记录右子结点  <br>3、public Key key:存储键  <br>4、public Value value:存储值</td></tr></tbody></table><h5 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a><strong>代码实现：</strong></h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Node &lt;Key,Value&gt;{    public Node left; //记录左子结点    public Node right; //记录右子结点    public Key key; //存储键    public Value value; //存储值    public Node(Node left, Node right, Key key, Value value) {        this.left = left;        this.right = right;        this.key = key;        this.value = value;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二叉查找树API设计"><a href="#二叉查找树API设计" class="headerlink" title="二叉查找树API设计"></a><strong>二叉查找树API设计</strong></h4><table><thead><tr><th><strong>类名</strong></th><th><strong>BinaryTree&lt;Key，value&gt;</strong></th></tr></thead><tbody><tr><td>构造方法</td><td>BinaryTree()：创建BinaryTree对象</td></tr><tr><td>成员变量</td><td>1、private Node root:记录根结点 <br>2、private int N:记录树中元素的个数</td></tr><tr><td>成员方法</td><td>1、 public void put(Key key,Value value):向树中插入一个键值对<br>2、private Node put(Node x, Key key, Value val)：给指定树x上，添加键一个键值对，并返回添加后的新树<br>3、public Value get(Key key):根据key，从树中找出对应的值<br> 4、private Value get(Node x, Key key):从指定的树x中，找出key对应的值<br> 5、public void delete(Key key):根据key，删除树中对应的键值对<br>6、private Node delete(Node x, Key key):删除指定树x上的键为key的键值对，并返回删除后的新树<br>7、public int size():获取树中元素的个数</td></tr></tbody></table><h4 id="二叉查找树实现"><a href="#二叉查找树实现" class="headerlink" title="二叉查找树实现"></a><strong>二叉查找树实现</strong></h4><p><strong>插入方法put实现思想：</strong></p><p>1.如果当前树中没有任何一个结点，则直接把新结点当做根结点使用</p><p>2.如果当前树不为空，则从根结点开始：</p><p> 2.1如果新结点的key小于当前结点的key，则继续找当前结点的左子结点；</p><p> 2.2如果新结点的key大于当前结点的key，则继续找当前结点的右子结点；</p><p> 2.3如果新结点的key等于当前结点的key，则树中已经存在这样的结点，替换该结点的value值即可。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003163343438.png" alt="image-20221003163343438"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003163749805.png" alt="image-20221003163749805"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003163914699.png" alt="image-20221003163914699"></p><p><strong>查询方法get实现思想：</strong></p><p>从根节点开始：</p><p>1.如果要查询的key小于当前结点的key，则继续找当前结点的左子结点；</p><p> 2.如果要查询的key大于当前结点的key，则继续找当前结点的右子结点；</p><p> 3.如果要查询的key等于当前结点的key，则树中返回当前结点的value。</p><p><strong>删除方法delete实现思想：</strong></p><p> 1.找到被删除结点；</p><p> 2.找到被删除结点右子树中的最小结点minNode</p><p> 3.删除右子树中的最小结点</p><p> 4.让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点minNode的右子树</p><p> 5.让被删除结点的父节点指向最小结点minNode</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003204636296.png" alt="image-20221003204636296"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003205056842.png" alt="image-20221003205056842"></p><h5 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class BinaryTree &lt;Key extends Comparable&lt;Key&gt;,Value &gt;{    private Node root;//记录根结点     private int N; //记录树中元素的个数    public BinaryTree(){    }    //向树中插入一个键值对    public void put(Key key,Value value){        root = put(root,key,value);    }    //给指定树x上，添加键一个键值对，并返回添加后的新树    private Node put(Node x, Key key, Value value){        //如果x子树为空        if (x == null){            N++; //元素个数+1            return new Node(key,value,null,null);        }        //如果x子树不为空        int i = key.compareTo((Key) x.key);        if (i &gt; 0){ //比较x结点的键key的大小            //如果key大于x结点的键，则继续找x结点的右子树            x.right = put(x.right,key,value);        }else if (i &lt; 0){            //如果key小于x结点的键，则继续找x结点的左子树            x.left = put(x.left,key,value);        }else {            //如果key等于x结点的键，则替换x结点的值value即可            x.value = value;        }        return x;    }    //根据key，从树中找出对应的值    public Value get(Key key){        return get(root,key);    }    //从指定的树x中，找出key对应的值    private Value get(Node x, Key key){        //如果x树为null        if (x == null){            return null;        }        //如果x树不为null        int i = key.compareTo((Key) x.key);        if (i &gt; 0){ //比较x结点的键key的大小            //如果key大于x结点的键，则继续找x结点的右子树            return get(x.right,key);        }else if (i &lt; 0){            //如果key小于x结点的键，则继续找x结点的左子树            return get(x.left,key);        }else {            //如果key等于x结点的键，则直接返回x结点的值value即可            return (Value) x.value;        }    }    //根据key，删除树中对应的键值对    public void delete(Key key){        delete(root,key);    }    //删除指定树x上的键为key的键值对，并返回删除后的新树    private Node delete(Node x, Key key){        //如果x树为null        if (x == null){            return null;        }        //如果x树不为null        int i = key.compareTo((Key) x.key);        if (i &gt; 0){ //比较x结点的键key的大小            //如果key大于x结点的键，则继续找x结点的右子树            x.right =  delete(x.right,key);        }else if (i &lt; 0){            //如果key小于x结点的键，则继续找x结点的左子树            x.left = delete(x.left,key);        }else {            //元素个数-1            N--;            //如果key等于x结点的键，则直接删除x结点即可            //找到要删除的结点的右子树中最小的结点            if (x.right == null){                return x.left;            }            //找到要删除的结点的右子树中没有左结点            if (x.left == null){                return x.right;            }            Node minNode = x.right;            while (minNode != null){                minNode = minNode.left;            }            //删除右子树中最小的结点            Node n = x.right;            while (n.left != null){                if (n.left.left == null){                    n.left = null;                }else {                    //变换n结点                    n = n.left;                }            }            //让x结点的左子树成为minNode的左子树            minNode.left = x.left;            //让x结点的右子树成为minNode的右子树            minNode.right = x.right;            //让x结点的父结点指向minNode            x = minNode;        }        return x;    }   // 获取树中元素的个数    public int size(){        return N;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class BinaryTreeTest {    public static void main(String[] args) {        BinaryTree&lt;Integer, String &gt; tree = new BinaryTree&lt;&gt;();        //插入数据        tree.put(4,"张三");        tree.put(2,"李四");        tree.put(3,"王五");        tree.put(1,"赵六");        System.out.println("插入完毕后元素的个数为：" + tree.size());        //获取指定key的value        System.out.println("获取key为2的value为："+ tree.get(2));        //删除指定key的value        tree.delete(3);        System.out.println("删除key为3的元素后，树中元素的个数为："+tree.size());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003211751647.png" alt="image-20221003211751647"></p><h4 id="查找二叉树中最小的键"><a href="#查找二叉树中最小的键" class="headerlink" title="查找二叉树中最小的键"></a><strong>查找二叉树中最小的键</strong></h4><table><thead><tr><th><strong>public Key min()</strong></th><th><strong>找出树中最小的键</strong></th></tr></thead><tbody><tr><td>private Node min(Node x)</td><td>找出指定树x中，最小键所在的结点</td></tr></tbody></table><h5 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h5><p>在 BinaryTree类的基础上添加如下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//找出树中最小的键public Key min(){    return (Key) min(root).key;}//找出指定树x中，最小键所在的结点private Node min(Node x){    //需要判断x还有没左子树，如果有，则继续向左查找，如果没有，则x就是最小的键所在的结点    if (x.left != null){        return min(x.left);    }else {        return x;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找二叉树中最大的键"><a href="#查找二叉树中最大的键" class="headerlink" title="查找二叉树中最大的键"></a><strong>查找二叉树中最大的键</strong></h4><table><thead><tr><th><strong>public Key max()</strong></th><th><strong>找出树中最大的键</strong></th></tr></thead><tbody><tr><td>public Node max(Node x)</td><td>找出指定树x中，最大键所在的结点</td></tr></tbody></table><h5 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h5><p>在 BinaryTree类的基础上添加如下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//找出树中最大的键    public Key max(){        return (Key) max(root).key;    }    //找出指定树x中，最大键所在的结点    public Node max(Node x){        //需要判断x还有没右子树，如果有，则继续向右查找，如果没有，则x就是最大的键所在的结点        if (x.right != null){            return max(x.right);        }else {            return x;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003214600239.png" alt="image-20221003214600239"></p><h3 id="二叉树的基础遍历"><a href="#二叉树的基础遍历" class="headerlink" title="二叉树的基础遍历"></a><strong>二叉树的基础遍历</strong></h3><p>很多情况下，我们可能需要像遍历数组数组一样，遍历树，从而拿出树中存储的每一个元素，由于树状结构和线性结构不一样，它没有办法从头开始依次向后遍历，所以存在如何遍历，也就是按照什么样的<strong>搜索路径</strong>进行遍历的问题。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003214537685.png" alt="image-20221003214537685"></p><p>我们把树简单的画作上图中的样子，由一个根节点、一个左子树、一个右子树组成，那么按照根节点什么时候被访问，我们可以把二叉树的遍历分为以下三种方式：</p><p> 1.前序遍历：</p><p>先访问根结点，然后再访问左子树，最后访问右子树</p><p> 2.中序遍历：</p><p>先访问左子树，中间访问根节点，最后访问右子树</p><p> 3.后序遍历：</p><p>先访问左子树，再访问右子树，最后访问根节点</p><p>==<strong>这三种方式利用了深度优先的遍历思想</strong>==</p><p>如果我们分别对下面的树使用三种遍历方式进行遍历，得到的结果如下：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003214834680.png" alt="image-20221003214834680"></p><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a><strong>前序遍历</strong></h4><p>我们在BinaryTree类上，添加前序遍历的API： </p><p><code>public Queue&lt;Key&gt; preErgodic()</code>：使用前序遍历，获取整个树中的所有键 </p><p><code>private void preErgodic(Node x,Queue&lt;Key&gt; keys)</code>：使用前序遍历，把指定树x中的所有键放入到keys队列中</p><p>实现过程中，我们通过前序遍历，把,把每个结点的键取出，放入到队列中返回即可。</p><p><strong>实现步骤：</strong></p><p>1.把当前结点的key放入到队列中;</p><p>2.找到当前结点的左子树，如果不为空，递归遍历左子树</p><p>3.找到当前结点的右子树，如果不为空，递归遍历右子树</p><p><strong>代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//使用前序遍历，获取整个树中的所有键public Queue&lt;Key&gt; preErgodic(){    Queue&lt;Key&gt; keys = new Queue&lt;&gt;();    preErgodic(root,keys);    return keys;}//使用前序遍历，把指定树x中的所有键放入到keys队列中private void preErgodic(Node x, Queue&lt;Key&gt; keys){    if (x == null){        return;    }    //把x结点的key放到keys中    keys.enqueue((Key) x.key);    //递归遍历x结点的左子树    if (x.left != null){        preErgodic(x.left,keys);    }    //递归遍历x的右子树    if (x.right != null){        preErgodic(x.right,keys);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003231733571.png" alt="image-20221003231733571"></p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a><strong>中序遍历</strong></h4><p>我们在BinaryTree类上，添加前序遍历的API： </p><p><code>public Queue&lt;Key&gt; midErgodic()</code>：使用中序遍历，获取整个树中的所有键 </p><p><code>private void midErgodic(Node x,Queue&lt;Key&gt; keys)</code>：使用中序遍历，把指定树x中的所有键放入到keys队列中</p><p><strong>实现步骤：</strong></p><p>1.找到当前结点的左子树，如果不为空，递归遍历左子树</p><p>2.把当前结点的key放入到队列中;</p><p>3.找到当前结点的右子树，如果不为空，递归遍历右子树</p><p><strong>代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//使用中序遍历，获取整个树中的所有键public Queue&lt;Key&gt; midErgodic(){    Queue&lt;Key&gt; keys = new Queue&lt;&gt;();    midErgodic(root,keys);    return keys;}//使用中序遍历，把指定树x中的所有键放入到keys队列中private void midErgodic(Node x,Queue&lt;Key&gt; keys){    if (x == null){        return;    }    //先递归，把左子树中的键放到keys中    if (x.left != null){        midErgodic(x.left,keys);    }    //把当前结点的键放到keys中    keys.enqueue((Key) x.key);    //在递归，把右子树中的键放到keys中    if (x.right != null){        midErgodic(x.right,keys);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a><strong>后序遍历</strong></h4><p>我们在BinaryTree类上，添加前序遍历的API： </p><p><code>public Queue&lt;Key&gt; afterErgodic()</code>：使用后序遍历，获取整个树中的所有键 </p><p><code>private void afterErgodic(Node x,Queue&lt;Key&gt; keys)</code>：使用后序遍历，把指定树x中的所有键放入到keys队列中</p><p><strong>实现步骤：</strong></p><p>1.找到当前结点的左子树，如果不为空，递归遍历左子树</p><p>2.找到当前结点的右子树，如果不为空，递归遍历右子树</p><p>3.把当前结点的key放入到队列中; </p><p><strong>代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//使用后序遍历，获取整个树中的所有键public Queue&lt;Key&gt; afterErgodic(){    Queue&lt;Key&gt; keys = new Queue&lt;&gt;();    afterErgodic(root,keys);    return keys;}//使用后序遍历，把指定树x中的所有键放入到keys队列中private void afterErgodic(Node x,Queue&lt;Key&gt; keys){    if (x == null){        return;    }    //先递归，把左子树中的键放到keys中    if (x.left != null){        afterErgodic(x.left,keys);    }    //在递归，把右子树中的键放到keys中    if (x.right != null){        afterErgodic(x.right,keys);    }    //把当前结点的键放到keys中    keys.enqueue((Key) x.key);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package cn.example.algorithm.test.tree;import cn.example.algorithm.linearTable.Queue;import cn.example.algorithm.tree.BinaryTree;public class BinaryTreeErgodicTest {    public static void main(String[] args) {        BinaryTree&lt;String, String &gt; tree = new BinaryTree&lt;&gt;();        //插入数据        tree.put("E","5");        tree.put("B","2");        tree.put("G","7");        tree.put("A","1");        tree.put("D","4");        tree.put("F","6");        tree.put("H","8");        tree.put("C","3");        Queue&lt;String&gt; queue = tree.preErgodic();        System.out.println("前序遍历为：");        for (String key : queue) {            System.out.print(key);        }        System.out.println();        System.out.println("=====================");        Queue&lt;String&gt; queue1 = tree.midErgodic();        System.out.println("中序遍历为：");        for (String key : queue1) {            System.out.print(key);        }        System.out.println();        System.out.println("=====================");        Queue&lt;String&gt; queue3 = tree.afterErgodic();        System.out.println("后序遍历为：");        for (String key : queue3) {            System.out.print(key);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003234217508.png" alt="image-20221003234217508"></p><h3 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a><strong>二叉树的层序遍历</strong></h3><p>==<strong>层序遍历利用到广度优先的遍历思想</strong>==</p><p>所谓的层序遍历，就是从根节点（第一层）开始，依次向下（从上往下，从左往右），获取每一层所有结点的值，有二叉树如下：</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003234248905.png" alt="image-20221003234248905"></p><p>那么层序遍历的结果是：EBGADFHC</p><p>我们在BinaryTree类上，添加层序遍历的API： </p><p>public Queue<key> layerErgodic()：使用层序遍历，获取整个树中的所有键</key></p><p><strong>实现步骤：</strong></p><p>1.创建队列，存储每一层的结点；</p><p>2.使用循环从队列中弹出一个结点：</p><p> 2.1获取当前结点的key；</p><p> 2.2如果当前结点的左子结点不为空，则把左子结点放入到队列中</p><p> 2.3如果当前结点的右子结点不为空，则把右子结点放入到队列中</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003234600220.png" alt="image-20221003234600220"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221003234803408.png" alt="image-20221003234803408"></p><p><strong>代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//使用层序遍历，获取整个树中的所有键public Queue&lt;Key&gt; layerErgodic(){    //定义两个队列，分别存储树的键和树中的结点    Queue&lt;Key&gt; keys = new Queue&lt;&gt;();    Queue&lt;Node&gt; nodes = new Queue&lt;&gt;();    //默认往队列中存放根结点    nodes.enqueue(root);    while (!nodes.isEmpty()){        //从队列中弹出一个结点，把key放入到keys中        Node n = nodes.dequeue();        keys.enqueue((Key) n.key);        //判断当前的结点还有没有左子结点，如果右，则放到nodes中        if (n.left != null){            nodes.enqueue(n.left);        }        //判断当前的结点还有没有右子结点，如果右，则放到nodes中        if (n.right != null){            nodes.enqueue(n.right);        }    }    return keys;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的最大深度问题"><a href="#二叉树的最大深度问题" class="headerlink" title="二叉树的最大深度问题"></a><strong>二叉树的最大深度问题</strong></h3><p><strong>需求：</strong></p><p>给定一棵树，请计算树的最大深度（树的根节点到最远叶子结点的最长路径上的结点数）;</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004000523511.png" alt="image-20221004000523511"></p><p>上面这棵树的最大深度为4。</p><p><strong>实现：</strong></p><p>我们在BinaryTree类上，添加如下的API求最大深度：</p><p><code>public int maxDepth()</code>：计算整个树的最大深度 </p><p><code>private int maxDepth(Node x)</code>:  计算指定树x的最大深度 </p><p><strong>实现步骤：</strong></p><p>1.如果根结点为空，则最大深度为0；</p><p>2.计算左子树的最大深度；</p><p>3.计算右子树的最大深度；</p><p>4.当前树的最大深度=左子树的最大深度和右子树的最大深度中的较大者+1</p><p><strong>代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">//计算整个树的最大深度public int maxDepth(){    return maxDepth(root);}//计算指定树x的最大深度private int maxDepth(Node x){    if (x == null){        return 0;    }    int max = 0;//x的最大深度    int maxL = 0;//左子树的最大深度    int maxR = 0;//右子树的最大深度    //计算x结点左子树的最大深度    if (x.left != null){        maxL = maxDepth(x.left);    }    //计算x结点右子树的最大深度    if (x.right != null){        maxR = maxDepth(x.right);    }    //比较左子树最大深度与右子树最大深度，取较大值+1即可    max = maxL &gt; maxR? maxL +1 : maxR + 1;    return max;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="折纸问题"><a href="#折纸问题" class="headerlink" title="折纸问题"></a><strong>折纸问题</strong></h3><p><strong>需求：</strong></p><p>请把一段纸条竖着放在桌子上，然后从纸条的下边向上方对折1次，压出折痕后展开。此时 折痕是凹下去的，即折痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折2 次，压出折痕后展开，此时有三条折痕，从上到下依次是下折痕、下折痕和上折痕。</p><p>给定一 个输入参数N，代表纸条都从下边向上方连续对折N次，请从上到下打印所有折痕的方向 </p><p>例如：N=1时，打印： down；N=2时，打印： down down up</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004001748329.png" alt="image-20221004001748329"></p><p><strong>分析：</strong></p><p>我们把对折后的纸张翻过来，让粉色朝下，这时把第一次对折产生的折痕看做是根结点，那第二次对折产生的下折痕就是该结点的左子结点，而第二次对折产生的上折痕就是该结点的右子结点，这样我们就可以使用树型数据结构来描述对折后产生的折痕。</p><p>这棵树有这样的特点：</p><p>1.根结点为下折痕；</p><p>2.每一个结点的左子结点为下折痕；</p><p>3.每一个结点的右子结点为上折痕；</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004002322517.png" alt="image-20221004002322517"></p><p><strong>实现步骤：</strong></p><p> 1.定义结点类</p><p> 2.构建深度为N的折痕树；</p><p> 3.使用中序遍历，打印出树中所有结点的内容；</p><p><strong>构建深度为N的折痕树：</strong></p><p>1.第一次对折，只有一条折痕，创建根结点；</p><p>2.如果不是第一次对折，则使用队列保存根结点；</p><p>3.循环遍历队列：</p><p> 3.1从队列中拿出一个结点；</p><p> 3.2如果这个结点的左子结点不为空，则把这个左子结点添加到队列中；</p><p> 3.3如果这个结点的右子结点不为空，则把这个右子结点添加到队列中；</p><p> 3.4判断当前结点的左子结点和右子结点都不为空，如果是，则需要为当前结点创建一个值为down的左子结点，一个值为up的右子结点。</p><p><strong>代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class PaperFoldingTest {    public static void main(String[] args) {        //构建折痕树        Node tree = createTree(3);        //遍历折痕树，并打印        printTree(tree);    }    //3.使用中序遍历，打印出树中所有结点的内容    private static void printTree(Node tree) {        if (tree==null){            return;        }        printTree(tree.left);        System.out.print(tree.item+",");        printTree(tree.right);    }    //2.构建深度为N的折痕树    private static Node createTree(int N) {        Node root = null;        for (int i = 0; i &lt; N; i++) {            if (i == 0) {                //1.第一次对折，只有一条折痕，创建根结点                root = new Node("down", null, null);                continue;            } else {                //2.如果不是第一次对折，则使用队列保存根结点                Queue&lt;Node&gt; queue = new Queue&lt;&gt;();                queue.enqueue(root);                //3.循环遍历队列：                while (!queue.isEmpty()) {                    //3.1从队列中拿出一个结点；                    Node tmp = queue.dequeue();                    //3.2如果这个结点的左子结点不为空，则把这个左子结点添加到队列中                    if (tmp.left != null) {                        queue.enqueue(tmp.left);                    }                    //3.3如果这个结点的右子结点不为空，则把这个右子结点添加到队列中                    if (tmp.right != null) {                        queue.enqueue(tmp.right);                    }                    //3.4判断当前结点的左子结点和右子结点都不为空，如果是，则需要为当前结点创建一个 值为down的左子结点，一个值为up的右子结点                    if (tmp.left == null &amp;&amp; tmp.right == null) {                        tmp.left = new Node("down", null, null);                        tmp.right = new Node("up", null, null);                    }                }            }        }        return root;    }    //1.定义结点类    private static class Node{        //存储结点元素        String item;        //左子结点        Node left;        //右子结点        Node right;        public Node(String item, Node left, Node right) {            this.item = item;            this.left = left;            this.right = right;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a><strong>堆</strong></h2><h3 id="堆的定义"><a href="#堆的定义" class="headerlink" title="堆的定义"></a><strong>堆的定义</strong></h3><p>堆是计算机科学中一类特殊的数据结构的统称，堆通常可以被看做是一棵完全二叉树的数组对象。</p><h3 id="堆的特性"><a href="#堆的特性" class="headerlink" title="堆的特性"></a><strong>堆的特性</strong></h3><p> 1、它是完全二叉树，除了树的最后一层结点不需要是满的，其它的每一层从左到右都是满的，如果最后一层结点不是满的，那么要求左满右不满。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004141352957.png" alt="image-20221004141352957"></p><p> 2、它通常用数组来实现。具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置1，它的子结点在位置2和3，而子结点的子结点则分别在位置4,5,6和7，以此类推。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004141733396.png" alt="image-20221004141733396"></p><p>如果一个结点的位置为k，则它的父结点的位置为[k/2],而它的两个子结点的位置则分别为2k和2k+1。这样，在不使用指针的情况下，我们也可以通过计算数组的索引在树中上下移动：从a[k]向上一层，就令k等于k/2,向下一层就令k等于2k或2k+1。</p><p> 3、每个结点都大于等于它的两个子结点。这里要注意堆中仅仅规定了每个结点大于等于它的两个子结点，但这两个子结点的顺序并没有做规定，跟我们之前学习的二叉查找树是有区别的。</p><h3 id="堆的API设计"><a href="#堆的API设计" class="headerlink" title="堆的API设计"></a><strong>堆的API设计</strong></h3><table><thead><tr><th><strong>类名</strong></th><th>Heap&lt;T extends Comparable<t>&gt;</t></th></tr></thead><tbody><tr><td>构造方法</td><td>Heap(int capacity)：创建容量为capacity的Heap对象</td></tr><tr><td>成员方法</td><td>1、private boolean less(int i,int j)：判断堆中索引i处的元素是否小于索引j处的元素<br>2、private void exch(int i,int j):交换堆中i索引和j索引处的值<br>3、public T delMax():删除堆中最大的元素,并返回这个最大元素<br>4、public void insert(T t)：往堆中插入一个元素<br>5、private void swim(int k):使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置<br>6、private void sink(int k):使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</td></tr><tr><td>成员变量</td><td>1、private T[] imtes : 用来存储元素的数组<br>2、private int N：记录堆中元素的个数</td></tr></tbody></table><h3 id="堆的实现"><a href="#堆的实现" class="headerlink" title="堆的实现"></a><strong>堆的实现</strong></h3><h4 id="insert插入方法的实现"><a href="#insert插入方法的实现" class="headerlink" title="insert插入方法的实现"></a><strong>insert插入方法的实现</strong></h4><p>堆是用数组完成数据元素的存储的，由于数组的底层是一串连续的内存地址，所以我们要往堆中插入数据，我们只能往数组中从索引0处开始，依次往后存放数据，但是堆中对元素的顺序是有要求的，每一个结点的数据要大于等于它的两个子结点的数据，所以每次插入一个元素，都会使得堆中的数据顺序变乱，这个时候我们就需要通过一些方法让刚才插入的这个数据放入到合适的位置。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004234631876.png" alt="image-20221004234631876"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004234708965.png" alt="image-20221004234708965"></p><p><img src="D:\java笔记\笔记\数据结构与算法.assets\image-20221004234842176.png" alt="image-20221004234842176"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004234926765.png" alt="image-20221004234926765"></p><p>所以，如果往堆中新插入元素，我们只需要不断的比较新结点a[k]和它的父结点a[k/2]的大小，然后根据结果完成数据元素的交换，就可以完成堆的有序调整。</p><h4 id="delMax删除最大元素方法的实现"><a href="#delMax删除最大元素方法的实现" class="headerlink" title="delMax删除最大元素方法的实现"></a>delMax删除最大元素方法的实现</h4><p>由堆的特性我们可以知道，索引1处的元素，也就是根结点就是最大的元素，当我们把根结点的元素删除后，需要有一个新的根结点出现，这时我们可以暂时把堆中最后一个元素放到索引1处，充当根结点，但是它有可能不满足堆的有序性需求，这个时候我们就需要通过一些方法，让这个新的根结点放入到合适的位置</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004235124581.png" alt="image-20221004235124581"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004235157230.png" alt="image-20221004235157230"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004235218213.png" alt="image-20221004235218213"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004235250180.png" alt="image-20221004235250180"></p><p><img src="/../../../java%E7%AC%94%E8%AE%B0/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.assets/image-20221004235324483.png" alt="image-20221004235324483"></p><p>所以，当删除掉最大元素后，只需要将最后一个元素放到索引1处，并不断的拿着当前结点a[k]与它的子结点a[2k]和a[2k+1]中的较大者交换位置，即可完成堆的有序调整。</p><h3 id="堆的代码实现"><a href="#堆的代码实现" class="headerlink" title="堆的代码实现"></a><strong>堆的代码实现</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Heap&lt;T extends Comparable&lt;T&gt;&gt; {    private T[] items; // 用来存储元素的数组    private int N;  //记录堆中元素的个数    public Heap(int capacity){        this.items = (T[]) new Comparable[capacity];        this.N = 0;    }    //判断堆中索引i处的元素是否小于索引j处的元素    private boolean less(int i,int j){        return items[i].compareTo(items[j]) &lt; 0;    }    //交换堆中i索引和j索引处的值    private void exch(int i,int j){        T temp = items[i];        items[i] = items[j];        items[j] = temp;    }    //删除堆中最大的元素,并返回这个最大元素    public T delMax(){        T max = items[1];        //交换索引1出的元素和最大索引出的元素，让完全二叉树中最右侧的元素变为临时结结点        exch(1,N);        //删除最大索引处的元素        items[N] = null;        //元素个数-1        N--;        //通过下沉调整堆，让堆重新有序        sink(1);        return max;    }    //往堆中插入一个元素    public void insert(T t){        items[++N] = t;        swim(N);    }    //使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置    private void swim(int k){        //通过循环，不断的比较当前结点的值和其父结点的值，如果发现父结点的值比当前结点的值小，则交换位置        while (k &gt; 1){            //比较当前结点和其父结点            if (less(k/2,k)){                exch(k/2,k);            }            k = k/2;        }    }    //使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置    private void sink(int k){        //通过循环不断的对比当前k结点和其左子结点2k+1处的较大值的元素大小，如果当前结点小，则需要交换位置        while (2*k &lt;= N){            //获取当前结点的子结点中较大的结点            int max; //记录较大结点所在的索引            if (2*k+1 &lt; N){                if (less(2*k,2*k+1)){                    max = 2*k+1;                }else {                    max = 2*k;                }            }else {                max = 2*k;            }            //比较当前结点和较大结点的值            if (!less(k,max)){                break;            }            //交换k索引出的值和max索引处的值            exch(k,max);            //变换k的值            k = max;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HeapTest {    public static void main(String[] args) {        Heap&lt;String &gt; heap = new Heap&lt;&gt;(10);        heap.insert("A");        heap.insert("B");        heap.insert("C");        heap.insert("D");        heap.insert("E");        heap.insert("F");        heap.insert("G");        //删除堆中的数据        String result = null;        while ((result = heap.delMax()) !=null){            System.out.print(result + "\t");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221004234526777.png" alt="image-20221004234526777"></h3><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a><strong>堆排序</strong></h3><p>给定一个数组：</p><p> String[] arr = {“S”,”O”,”R”,”T”,”E”,”X”,”A”,”M”,”P”,”L”,”E”}</p><p>请对数组中的字符按从小到大排序。</p><p><strong>实现步骤：</strong></p><ul><li>构造堆</li><li>得到堆顶元素，这个值就是最大值</li><li>交换堆顶元素和数组中的最后一个元素，此时所有元素中的最大元素已经放到合适的位置</li><li>对堆进行调整，重新让除了最后一个元素的剩余元素中的最大值放到堆顶</li><li>重复2~4这个步骤，直到堆中剩一个元素为止。</li></ul><h4 id="API设计"><a href="#API设计" class="headerlink" title="API设计"></a>API设计</h4><table><thead><tr><th><strong>类名</strong></th><th>**HeapSort&lt;T extends Comparable<t>&gt; **</t></th></tr></thead><tbody><tr><td>成员方法</td><td>1、public static void sort(Comparable[] source)：对source数组中的数据从小到大排序<br>2、private static void createHeap(Comparable[] source, Comparable[] heap):  根据原数组source，构造出堆heap<br>3、private static boolean less(Comparable[] heap, int i, int j)：判断heap堆中索引i处的元素是否小于索引j处的元素<br>4、private static void exch(Comparable[] heap, int i, int j):  交换heap堆中i索引和j索引处的值<br>5、private static void sink(Comparable[] heap, int target, int range):  在heap堆中，对target处的元素做下沉，范围是0~range。</td></tr></tbody></table><h4 id="堆构造过程"><a href="#堆构造过程" class="headerlink" title="堆构造过程"></a><strong>堆构造过程</strong></h4><p>堆的构造，最直观的想法就是另外再创建一个和新数组数组，然后从左往右遍历原数组，每得到一个元素后，添加到新数组中，并通过上浮，对堆进行调整，最后新的数组就是一个堆。</p><p>上述的方式虽然很直观，也很简单，但是我们可以用更聪明一点的办法完成它。创建一个新数组，把原数组0~ length-1的数据拷贝到新数组的1~length处，再从新数组长度的一半处开始往1索引处扫描（从右往左），然后对扫描到的每一个元素做下沉调整即可。</p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221005000200768.png" alt="image-20221005000200768"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221005000422579.png" alt="image-20221005000422579"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221005000451196.png" alt="image-20221005000451196"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221005000609642.png" alt="image-20221005000609642"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221005000642537.png" alt="image-20221005000642537"></p><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221005000718891.png" alt="image-20221005000718891"></p><h4 id="堆排序过程"><a href="#堆排序过程" class="headerlink" title="堆排序过程"></a><strong>堆排序过程</strong></h4><p>对构造好的堆，我们只需要做类似于堆的删除操作，就可以完成排序。</p><p>1.将堆顶元素和堆中最后一个元素交换位置；</p><p>2.通过对堆顶元素下沉调整堆，把最大的元素放到堆顶(此时最后一个元素不参与堆的调整，因为最大的数据已经到了数组的最右边)</p><p>3.重复1~2步骤，直到堆中剩最后一个元素。</p><h4 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HeapSort&lt;T extends Comparable&lt;T&gt;&gt; {    //对source数组中的数据从小到大排序    public static void sort(Comparable[] source){        //构建堆        Comparable[] heap = new Comparable[source.length+1];        createHeap(source,heap);        //定义一个变量，记录未排序的元素中最大的索引        int N = heap.length-1;        //通过循环，交换1索引出的元素和排序的元素中最大的随意处的元素        while (N != 1){            //交换元素            exch(heap,1,N);            //排序交换后的最大元素所在的索引，让它不需要参与下沉调整            N--;            //需要对索引1处的元素进行堆的下沉调整            sink(heap,1,N);        }        //把heap中的数据拷贝到原数组source中        System.arraycopy(heap,1,source,0,source.length);    }    //根据原数组source，构造出堆heap    private static void createHeap(Comparable[] source, Comparable[] heap){         //把source中的元素拷贝到head中，head中的元素就形成了一个无序的堆        System.arraycopy(source,0,heap,1,source.length);        //对堆中的元素做下沉调整（从长度的一半处开始，往索引1处扫描）        for (int i = (heap.length/2); i &gt; 0 ; i--) {            sink(heap,i, heap.length-1);        }    }    //判断heap堆中索引i处的元素是否小于索引j处的元素    private static boolean less(Comparable[] heap, int i, int j){        return heap[i].compareTo(heap[j]) &lt; 0;    }    //交换heap堆中i索引和j索引处的值    private static void exch(Comparable[] heap, int i, int j){        Comparable temp = heap[i];        heap[i] = heap[j];        heap[j] = temp;    }    //在heap堆中，对target处的元素做下沉，范围是0~range。    private static void sink(Comparable[] heap, int target, int range){        while (2*target &lt;=range){            //找出当前结点的较大结点            int max;            if (2*target+1 &lt;=range){                if (less(heap,2*target,2*target+1)){                    max = 2*target+1;                }else {                    max = 2*target;                }            }else {                max = 2*target;            }            //比较当前结点的值和较大子结点的值            if (!less(heap,target,max)){                break;            }            exch(heap,target,max);            target = max;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HeapSortTest {    public static void main(String[] args) {        String[] arr = {"S","O","R","T","E","X","A","M","P","L","E"};        HeapSort.sort(arr);        System.out.println(Arrays.toString(arr));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/rookiesnewbie/images/master/images/image-20221005003859000.png" alt="image-20221005003859000"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
